{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/assert/python/blank_line_killer.py","path":"assert/python/blank_line_killer.py","modified":0,"renderable":0},{"_id":"source/assert/python/insert_local_text.py.backup","path":"assert/python/insert_local_text.py.backup","modified":0,"renderable":0},{"_id":"source/assert/python/insert_local_text.win.py","path":"assert/python/insert_local_text.win.py","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/assert/repos/docker/docker.run.help","path":"assert/repos/docker/docker.run.help","modified":0,"renderable":0},{"_id":"source/assert/repos/python/module.example.zip","path":"assert/repos/python/module.example.zip","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1534586102349},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1534586102360},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1534586102356},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1534586102364},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1534586102412},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1534586102420},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1534586102428},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1534586102436},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1534586102444},{"_id":"themes/next/_config.yml","hash":"2166da28c27465c0fd4c59c19d7d9974cb4c3021","modified":1534592560132},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1534586102473},{"_id":"themes/next/bower.json","hash":"beac259ba5ef7d199a45a142221dae7d34dbdc49","modified":1534586102464},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1534586102711},{"_id":"themes/next/package.json","hash":"22a8e1a6259ee7452fe0d9a7a8952ad3ccabf719","modified":1534586103566},{"_id":"source/.vscode/tasks.json","hash":"166d32dac9923323ffa3a91e4c4add26d460e72e","modified":1534689273526},{"_id":"source/_drafts/Docker-Samba.md","hash":"ff9715ffb6efb07f778632491885a8ba3565bdb6","modified":1534598892060},{"_id":"source/_drafts/HTML5-link标签.md","hash":"2dcc3c18a1ceb61a7a99be9e7e6683b3de90b1c5","modified":1534673832815},{"_id":"source/_drafts/docker笔记.md","hash":"9e75c4f4e21d808681221d2316cdcc7d7e5cea6a","modified":1534691810211},{"_id":"source/_drafts/pynote-定义函数.md","hash":"6f27b96dc469520ee8ae47c67ef710e667673834","modified":1534531364573},{"_id":"source/_drafts/pynote-类的定义与继承.md","hash":"f05458129804d7f299dbba30550e44474b94df76","modified":1534531340281},{"_id":"source/_drafts/pynote-读写文件.md","hash":"f3cd62476190d9e4ff08ab17cddb2c53776be130","modified":1534351110564},{"_id":"source/_drafts/pynote-集合类型.md","hash":"1b0378cf6f26122b028285691343af958c9fcd57","modified":1534351122635},{"_id":"source/_drafts/regex-正则表达式.md","hash":"7dcc786e11c253764c86edc71bc0ac6835eedc55","modified":1534598930686},{"_id":"source/_drafts/windows汇编语言环境.md","hash":"c3bbf02ba69a813c8fb44facde54d213b6cb408b","modified":1533201630153},{"_id":"source/_drafts/windows系统中链接类型.md","hash":"7bb91db2b09a128ba368afb830e600a435c05ec1","modified":1532693691998},{"_id":"source/_posts/PowerShell-安装-Chocolatey.md","hash":"2338361b7220d3a862e4425534989eac13a3988f","modified":1534678535982},{"_id":"source/_posts/hello-world.md","hash":"21593471ade0a9b84bf6a47e6d8036454b433a63","modified":1533201701112},{"_id":"source/_posts/hexo配置过程.md","hash":"ae9c8529963208bbc42d3f53f86490bc0594b682","modified":1534690769891},{"_id":"source/_posts/powershell创建链接文件.md","hash":"9023219a15b880ce6c4d085a60aa7bac1e6702e0","modified":1532590028650},{"_id":"source/_posts/pynote-0-python基本认识.md","hash":"a0d5bcae070c86d95b1e5e1d8c50b5fd234739b4","modified":1534690584061},{"_id":"source/_posts/pynote-python中的数字与字符串.md","hash":"56026a624a5d77101ea197c963035787313bb5dd","modified":1534350991163},{"_id":"source/_posts/pynote-python控制结构.md","hash":"8784b93533ee12bc9b9c2b86892371fea55fe06e","modified":1534350996861},{"_id":"source/_posts/pynote-python模块.md","hash":"ff9d5f87c34f7a6de192ae9e38ac1f397068a707","modified":1534689838698},{"_id":"source/_posts/pynote-python运算符.md","hash":"8a58e8d9c56d984c4a8e297f3d9491eb9cf50816","modified":1534351005232},{"_id":"source/_posts/pynote-try-except-raise异常处理.md","hash":"8105806e02b5268d0e6430d592e88911c5016ede","modified":1534350823014},{"_id":"source/_posts/使用Brook翻墙.md","hash":"4923d7558b05f67b8c4ddb95c6ccbcb364255dc9","modified":1532692968104},{"_id":"source/about/index.md","hash":"38cae75afad59f8cab109ca37ace27401f660bd2","modified":1532527282825},{"_id":"source/categories/index.md","hash":"6c18f5d45966abaaf3bc73b60466c66f9ff3b01e","modified":1532529157336},{"_id":"source/tags/index.md","hash":"440b73b2d4aa692a9f338d2d8bc2385f61c3e1fe","modified":1532448036116},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534586102263},{"_id":"themes/next/.git/config","hash":"e6396f4650bd14040df3e97a6e598b61349b261e","modified":1534586102315},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534586078809},{"_id":"themes/next/.git/index","hash":"cf38ad3c01251c67ca27e250e89275e541550c6a","modified":1534621425096},{"_id":"themes/next/.git/packed-refs","hash":"a501d3c0b4327897f958f5d9ef60b058e875907c","modified":1534586102217},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1534586102377},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1534586102370},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1534586102384},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1534586102390},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1534586102397},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1534586102404},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1534586102486},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1534586102511},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1534586102499},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1534586102519},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1534586102528},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1534586102539},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1534586102547},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1534586102556},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1534586102566},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1534586102722},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1534586102746},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1534586102746},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1534586102757},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1534586102765},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1534586102773},{"_id":"themes/next/languages/ja.yml","hash":"509af6c38458a402d37b9beea3500e3b439aa153","modified":1534586102781},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1534586102790},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1534586102798},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1534586102807},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1534586102815},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1534586102825},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1534586102834},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1534586102843},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1534586102851},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1534586102860},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1534586102867},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1534586102906},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1534586103511},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1534586103521},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1534586103530},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1534586103536},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1534586103545},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1534586103552},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1534586103560},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1534586103588},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1534586103601},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1534586103612},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1534586104732},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1534586104738},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1534586104743},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104372},{"_id":"source/assert/python/blank_line_killer.py","hash":"72ee32ee3014adb3d86a919f1718bb18d25efe27","modified":1534648657329},{"_id":"source/assert/python/insert_local_text.py.backup","hash":"e9976fb4c3c8193a0de3883c631b633549dea1f9","modified":1534688758254},{"_id":"source/assert/python/insert_local_text.win.py","hash":"bdf0f9f2da2ff58bf70c4202357783fe04c12eca","modified":1534691696609},{"_id":"source/assert/resources/docker.run.help.md","hash":"b35e93d0be7cc51fc44683f9d52c453f1cb2477f","modified":1534691566186},{"_id":"source/assert/resources/test.md","hash":"1af6d4ca8083e87304a177c6ddbb3fc8f856d90f","modified":1534688246529},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534586078824},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534586078833},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1534586078838},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534586078847},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534586078852},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1534586078857},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534586078861},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1534586078866},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1534586078871},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1534586078876},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534586078881},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534586078887},{"_id":"themes/next/.git/logs/HEAD","hash":"69276f38adb517634a66448f0e9ff15e66ba9088","modified":1534586102282},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1534586102580},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1534586102591},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1534586102603},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1534586102612},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1534586102626},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1534586102640},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1534586102649},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1534586102657},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1534586102665},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1534586102675},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1534586102685},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1534586102693},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1534586102702},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1534586102892},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534586102897},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534586102901},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1534586102927},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1534586102931},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1534586102936},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1534586102940},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1534586102949},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1534586102955},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1534586102965},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1534586102974},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1534586102981},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1534586102988},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1534586103061},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1534586103070},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1534586103140},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1534586103148},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1534586103153},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1534586103192},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1534586103295},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1534586103351},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1534586103358},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1534586103365},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1534586103409},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1534586103421},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1534586103428},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1534586103435},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1534586103443},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1534586103627},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1534586103637},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1534586103643},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1534586103650},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1534586103657},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1534586103665},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1534586103671},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1534586103677},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1534586103684},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1534586104365},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534586104376},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534586104382},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534586104387},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534586104391},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534586104396},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534586104401},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534586104410},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534586104416},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534586104421},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534586104426},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534586104442},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534586104438},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534586104432},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534586104447},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534586104452},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534586104457},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534586104465},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534586104470},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586103177},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586103180},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104182},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104184},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104196},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104349},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104362},{"_id":"source/assert/js/src/insert_local_text.js","hash":"eca90cb73286bb592bbba68803ffcec6e60c6a5f","modified":1534573676759},{"_id":"source/assert/repos/docker/docker.run.help","hash":"80b858a7d9a5bd2b0d4c91e0dbc3818fd73ea606","modified":1534691468486},{"_id":"source/assert/repos/python/module.example.zip","hash":"48c4bc7c32d85d1d1316efc5903bc999b9802eea","modified":1534688405137},{"_id":"themes/next/.git/refs/heads/master","hash":"e7d5d06a97b02e9fd6141aba44a00feed39541ad","modified":1534586102277},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1534586102917},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1534586102922},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1534586102998},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1534586103005},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1534586103012},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1534586103022},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1534586103034},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1534586103042},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1534586103054},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1534586103080},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1534586103088},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1534586103097},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1534586103106},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1534586103114},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1534586103122},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1534586103130},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1534586103163},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1534586103172},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1534586103184},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1534586103205},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1534586103210},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1534586103215},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1534586103220},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1534586103226},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1534586103234},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1534586103243},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1534586103253},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1534586103261},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1534586103268},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1534586103275},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1534586103282},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1534586103288},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1534586103305},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1534586103314},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1534586103321},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1534586103329},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1534586103337},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1534586103344},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1534586103376},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1534586103385},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1534586103393},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1534586103475},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1534586103484},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1534586103492},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1534586103502},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1534586104170},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1534586104178},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1534586104188},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1534586104192},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1534586104340},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1534586104347},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1534586104353},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1534586104359},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1534586104486},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1534586104479},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1534586104491},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1534586104497},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1534586104509},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534586104503},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1534586104529},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1534586104536},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1534586104545},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1534586104516},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1534586104561},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1534586104571},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1534586104579},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1534586104588},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1534586104594},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534586104710},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534586104717},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534586104724},{"_id":"themes/next/.git/objects/pack/pack-cae7102de9b2d9816958a40fde0d5d024fd08c1f.idx","hash":"1027bc9ec3a2141e88ed1f46596bb954fbab283d","modified":1534586102162},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534586104662},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"69276f38adb517634a66448f0e9ff15e66ba9088","modified":1534586102288},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534586102255},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1534586103457},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1534586103466},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1534586103702},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1534586103710},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1534586103716},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1534586103723},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1534586103729},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1534586103856},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1534586104026},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1534586104129},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1534586104137},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1534586104143},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1534586104146},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1534586104151},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1534586104157},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1534586104163},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1534586104203},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1534586104211},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1534586104215},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1534586104219},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1534586104223},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1534586104229},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534586104235},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1534586104240},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1534586104261},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1534586104267},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1534586104271},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534586104277},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1534586104281},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1534586104295},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1534586104301},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1534586104306},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1534586104313},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1534586104319},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1534586104325},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1534586104330},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1534586104525},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534586104600},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534586104608},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534586104615},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534586104675},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534586104682},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534586104638},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534586104648},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534586104693},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"69276f38adb517634a66448f0e9ff15e66ba9088","modified":1534586102251},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1534586103738},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1534586103746},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1534586103755},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1534586103760},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1534586103766},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1534586103773},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1534586103781},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1534586103791},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1534586103799},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1534586103808},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1534586103818},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1534586103825},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1534586103832},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1534586103838},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1534586103844},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1534586103850},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1534586103863},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1534586103875},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1534586103884},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1534586103888},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1534586103894},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1534586103900},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1534586103905},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1534586103913},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1534586103918},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1534586103922},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1534586103933},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1534586103938},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1534586103942},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1534586103948},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1534586103952},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1534586103958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1534586103968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1534586103975},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1534586103983},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1534586103987},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1534586103992},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1534586103998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1534586104005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1534586104011},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1534586104015},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1534586104020},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1534586104031},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1534586104037},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1534586104041},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1534586104046},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1534586104050},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1534586104055},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1534586104061},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1534586104068},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1534586104080},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1534586104087},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1534586104094},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1534586104099},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1534586104104},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1534586104108},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1534586104114},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1534586104118},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1534586104125},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1534586104247},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534586104255},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534586104290},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534586104627},{"_id":"themes/next/.git/objects/pack/pack-cae7102de9b2d9816958a40fde0d5d024fd08c1f.pack","hash":"2f21c8c4eb7ec4af4aa6c200ab01ad70a325e28d","modified":1534586102166},{"_id":"public/assert/js/src/insert_local_text.js","hash":"2ffc79abebe5edf313c844abf709fa9ce4601df9","modified":1534691724453},{"_id":"public/search.xml","hash":"dc8fac9a89cb7bec332b5b5f3bc843b8714b30c6","modified":1534691724472},{"_id":"public/about/index.html","hash":"95d8f844239940ffe7590b6fe5f02c1bd3fc1908","modified":1534691724516},{"_id":"public/tags/index.html","hash":"cf64fbda5354c6433a14906b40992e1c3ae4159a","modified":1534691724516},{"_id":"public/categories/index.html","hash":"1eef2b06dd37bfe04b6aa3ab46762c371856fa5b","modified":1534691724516},{"_id":"public/assert/resources/test.html","hash":"85f686049027cd09d9496ed78e6ce81ad175ebfb","modified":1534691724516},{"_id":"public/assert/resources/docker.run.help.html","hash":"c161d916b69488425dbef7d77fd784cf9912de3d","modified":1534691724516},{"_id":"public/2018/08/pynote-python模块/index.html","hash":"3e07103c1d4a26d4919bd5de37cc2171aaadaea4","modified":1534691724516},{"_id":"public/2018/08/PowerShell-安装-Chocolatey/index.html","hash":"cfe7797c33085137c5390400b9bc22eaa98d6430","modified":1534691724516},{"_id":"public/2018/08/pynote-try-except-raise异常处理/index.html","hash":"73ccb86e65cbb2f9e194cdda2e8ab50282b8f57c","modified":1534691724516},{"_id":"public/2018/07/pynote-python中的数字与字符串/index.html","hash":"956a1b9739416750c818217c462f8142a367a283","modified":1534691724516},{"_id":"public/2018/07/pynote-python控制结构/index.html","hash":"034d1eef19334eeae7688d0022ec53cfae1b1ce8","modified":1534691724516},{"_id":"public/2018/07/pynote-python运算符/index.html","hash":"d08625af0c6890a775e750dd177b340a62aa72e2","modified":1534691724516},{"_id":"public/2018/07/pynote-0-python基本认识/index.html","hash":"c0d55b56e06e00957ebd80bb6cfbf174221666ca","modified":1534691724517},{"_id":"public/2018/07/hexo配置过程/index.html","hash":"5e8f90991ed7e0b44f57110ad1997049bcf4c519","modified":1534691724517},{"_id":"public/2018/07/powershell创建链接文件/index.html","hash":"7d77620c414dea65c398bc949763c1de1334232b","modified":1534691724517},{"_id":"public/2018/07/使用Brook翻墙/index.html","hash":"99f90b1011d8d77595822a2cb3789befec651ffc","modified":1534691724517},{"_id":"public/2018/07/hello-world/index.html","hash":"ea6a4be210cc55fc748585ba1a842ec86e0f35d3","modified":1534691724517},{"_id":"public/categories/日常/index.html","hash":"d2351a663ea9f308d28e0c5aa06ec683dc884f9f","modified":1534691724518},{"_id":"public/categories/网站/index.html","hash":"0488de377180153ad4324fe42093c782f99fe450","modified":1534691724519},{"_id":"public/categories/Python/index.html","hash":"6d9a5167acb61870e625925615ddf9c5460a31ad","modified":1534691724519},{"_id":"public/archives/index.html","hash":"cc79bad5ea147516b68e9725f3b7bb7d8d615a18","modified":1534691724519},{"_id":"public/archives/page/2/index.html","hash":"c0858fc879a9378d5af7849b6189ad5b8fd3da54","modified":1534691724519},{"_id":"public/archives/2018/index.html","hash":"92cf989d553c00f7c75c51549f2410112e150894","modified":1534691724519},{"_id":"public/archives/2018/page/2/index.html","hash":"acf7b27eb57711dcc339b1c4fb69cbdb8557daee","modified":1534691724519},{"_id":"public/archives/2018/07/index.html","hash":"1b4ab07377874115d566aa455496fdd73327e0d5","modified":1534691724519},{"_id":"public/archives/2018/08/index.html","hash":"0e1b48d8d19e616904a935dc06010ad469ca57e9","modified":1534691724519},{"_id":"public/index.html","hash":"66a7b2bd8cd3a80c8c77eafeae620d5817454510","modified":1534691724519},{"_id":"public/page/2/index.html","hash":"931d9a84801a07c6df9ce5d650c2803f71e00fe0","modified":1534691724519},{"_id":"public/tags/Python/index.html","hash":"e2c5c61d5fd50e6e8acd098502e5f4d779e42d7a","modified":1534691724520},{"_id":"public/tags/Note/index.html","hash":"bac5bd1ad39bd57586bb41c12cb603fb95b1403b","modified":1534691724520},{"_id":"public/tags/PowerShell/index.html","hash":"2a44dbe8e319ad9bae645acb32261baeb26c2b35","modified":1534691724520},{"_id":"public/tags/Hexo/index.html","hash":"9405f03fdfabf8d31384a232515d8b958bfd77cb","modified":1534691724520},{"_id":"public/tags/Brook/index.html","hash":"9ec200ce70ff9e3b17cf02f18263da52bf13fe5b","modified":1534691724520},{"_id":"public/tags/翻墙/index.html","hash":"3ef917e865b5b8de4b47ea28116bbd35e46a7b79","modified":1534691724520},{"_id":"public/assert/python/blank_line_killer.py","hash":"72ee32ee3014adb3d86a919f1718bb18d25efe27","modified":1534691724529},{"_id":"public/assert/python/insert_local_text.py.backup","hash":"e9976fb4c3c8193a0de3883c631b633549dea1f9","modified":1534691724529},{"_id":"public/assert/python/insert_local_text.win.py","hash":"bdf0f9f2da2ff58bf70c4202357783fe04c12eca","modified":1534691724529},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534691724529},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534691724529},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534691724529},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534691724529},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534691724529},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534691724529},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534691724529},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534691724529},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534691724529},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534691724529},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534691724529},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534691724529},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534691724529},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534691724529},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534691724529},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534691724529},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534691724530},{"_id":"public/assert/repos/docker/docker.run.help","hash":"80b858a7d9a5bd2b0d4c91e0dbc3818fd73ea606","modified":1534691724530},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534691724530},{"_id":"public/assert/repos/python/module.example.zip","hash":"48c4bc7c32d85d1d1316efc5903bc999b9802eea","modified":1534691724530},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1534691724530},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534691724530},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534691724993},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534691724996},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1534691724997},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1534691724997},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534691724998},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1534691724998},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1534691724998},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1534691724998},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1534691724998},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1534691724998},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1534691724998},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534691724998},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1534691724998},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534691724998},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534691724998},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1534691724998},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1534691724998},{"_id":"public/css/main.css","hash":"e3d4e54c1518f449e223eeecdd2e6511cbf6363c","modified":1534691724998},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534691724998},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534691724999},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534691724999},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534691724999},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534691724999},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534691724999},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534691725002}],"Category":[{"name":"日常","_id":"cjl0ztqln000210lkl87lgfg8"},{"name":"网站","_id":"cjl0ztqlu000710lk2dggxrnw"},{"name":"Linux","_id":"cjl0ztqlx000c10lkc9n5xn62"},{"name":"Python","_id":"cjl0ztqm1000j10lkoo3cpc54"},{"name":"Text","_id":"cjl0ztqm7000q10lkmweegm8t"},{"name":"操作系统","_id":"cjl0ztqmc000x10lk79x4x6fg"},{"name":"Assemble","_id":"cjl0ztqmf001310lkrl22q8qj"}],"Data":[],"Page":[{"title":"关于博主","date":"2018-07-25T13:56:07.000Z","type":"about","comments":1,"_content":"\n# 联系方式\n\n[zombie110year@gmail.com]()","source":"about/index.md","raw":"---\ntitle: 关于博主\ndate: 2018-07-25 21:56:07\ntype: \"about\"\ncomments: true\n---\n\n# 联系方式\n\n[zombie110year@gmail.com]()","updated":"2018-07-25T14:01:22.825Z","path":"about/index.html","layout":"page","_id":"cjl0ztqsl002h10lk1mlo49wd","content":"<h1 id=\"联系方式\">联系方式</h1>\r\n<p><a href=\"\">zombie110year@gmail.com</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\">联系方式</h1>\r\n<p><a href=\"\">zombie110year@gmail.com</a></p>\r\n"},{"title":"tags","date":"2018-07-24T16:00:14.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-25 00:00:14\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-07-24T16:00:36.116Z","path":"tags/index.html","layout":"page","_id":"cjl0ztqsm002i10lk1wkp825y","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"分类","date":"2018-07-25T14:31:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-07-25 22:31:57\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-07-25T14:32:37.336Z","path":"categories/index.html","layout":"page","_id":"cjl0ztqsp002j10lk61sn16c1","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"测试","tags":["Python","Note"],"categories":["Python"],"_content":"\n# 看看 markdown 文档\n\n在非 `_drafts` `_posts` 目录下会怎么样.\n\n```py\nprint(\"测试代码块功能\")\n```\n\n[测试超链接](/index.html)","source":"assert/resources/test.md","raw":"---\ntitle: '测试'\ntags:\n    - Python\n    - Note\ncategories:\n    - Python\n---\n\n# 看看 markdown 文档\n\n在非 `_drafts` `_posts` 目录下会怎么样.\n\n```py\nprint(\"测试代码块功能\")\n```\n\n[测试超链接](/index.html)","date":"2018-08-19T14:17:26.529Z","updated":"2018-08-19T14:17:26.529Z","path":"assert/resources/test.html","comments":1,"layout":"page","_id":"cjl0ztqv4002k10lk0lt6nscd","content":"<h1 id=\"看看-markdown-文档\">看看 markdown 文档</h1>\r\n<p>在非 <code>_drafts</code> <code>_posts</code> 目录下会怎么样.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"测试代码块功能\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"/index.html\">测试超链接</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"看看-markdown-文档\">看看 markdown 文档</h1>\r\n<p>在非 <code>_drafts</code> <code>_posts</code> 目录下会怎么样.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"测试代码块功能\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"/index.html\">测试超链接</a></p>\r\n"},{"_content":"[Origin-File](/assert/repos/docker/docker.run.help)\n\n```\nUsage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\nOptions:\n      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`\n  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.\n      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n      --cap-add list                   Add Linux capabilities\n      --cap-drop list                  Drop Linux capabilities\n      --cgroup-parent string           Optional parent cgroup for the container\n      --cidfile string                 Write the container ID to the file\n      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n      --cpu-rt-period int              Limit CPU real-time period in microseconds\n      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.\n      --cpus decimal                   限制使用 CPU 的数量.\n      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach                         在后台运行容器, 并显示容器 ID.\n      --detach-keys string             Override the key sequence for detaching a container\n      --device list                    Add a host device to the container\n      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n      --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n      --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n      --disable-content-trust          Skip image verification (default true)\n      --dns list                       Set custom DNS servers\n      --dns-option list                Set DNS options\n      --dns-search list                Set custom DNS search domains\n      --entrypoint string              Overwrite the default ENTRYPOINT of the image\n  -e, --env list                       Set environment variables\n      --env-file list                  Read in a file of environment variables\n      --expose list                    Expose a port or a range of ports\n      --group-add list                 Add additional groups to join\n      --health-cmd string              Command to run to check health\n      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n      --health-retries int             Consecutive failures needed to report unhealthy\n      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)\n                                       (default 0s)\n      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n      --help                           显示帮助信息.\n  -h, --hostname string                为容器的 hostname 取名.\n      --init                           Run an init inside the container that forwards signals and reaps processes\n  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin\n      --ip string                      IPv4 address (e.g., 172.30.100.104)\n      --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n      --ipc string                     IPC mode to use\n      --isolation string               Container isolation technology\n      --kernel-memory bytes            限制内核内存使用量\n  -l, --label list                     Set meta data on a container\n      --label-file list                Read in a line delimited file of labels\n      --link list                      Add link to another container\n      --link-local-ip list             Container IPv4/IPv6 link-local addresses\n      --log-driver string              Logging driver for the container\n      --log-opt list                   Log driver options\n      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`\n      --memory-reservation bytes       Memory soft limit\n      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n      --mount mount                    Attach a filesystem mount to the container\n      --name string                    Assign a name to the container\n      --network string                 Connect a container to a network (default \"default\")\n      --network-alias list             Add network-scoped alias for the container\n      --no-healthcheck                 Disable any container-specified HEALTHCHECK\n      --oom-kill-disable               Disable OOM Killer\n      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n      --pid string                     PID namespace to use\n      --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n      --privileged                     Give extended privileges to this container\n  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.\n      --read-only                      Mount the container's root filesystem as read only\n      --restart string                 Restart policy to apply when a container exits (default \"no\")\n      --rm                             当容器停止运行时自动移除.\n      --runtime string                 Runtime to use for this container\n      --security-opt list              Security Options\n      --shm-size bytes                 Size of /dev/shm\n      --sig-proxy                      Proxy received signals to the process (default true)\n      --stop-signal string             Signal to stop a container (default \"SIGTERM\")\n      --stop-timeout int               Timeout (in seconds) to stop a container\n      --storage-opt list               Storage driver options for the container\n      --sysctl map                     Sysctl options (default map[])\n      --tmpfs list                     挂载一个临时文件系统.\n  -t, --tty                            创建一个伪终端\n      --ulimit ulimit                  Ulimit options (default [])\n  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])\n      --userns string                  User namespace to use\n      --uts string                     UTS namespace to use\n  -v, --volume list                    Bind mount a volume\n      --volume-driver string           Optional volume driver for the container\n      --volumes-from list              Mount volumes from the specified container(s)\n  -w, --workdir string                 Working directory inside the container\n\n```\n","source":"assert/resources/docker.run.help.md","raw":"[Origin-File](/assert/repos/docker/docker.run.help)\n\n```\nUsage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\nOptions:\n      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`\n  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.\n      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n      --cap-add list                   Add Linux capabilities\n      --cap-drop list                  Drop Linux capabilities\n      --cgroup-parent string           Optional parent cgroup for the container\n      --cidfile string                 Write the container ID to the file\n      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n      --cpu-rt-period int              Limit CPU real-time period in microseconds\n      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.\n      --cpus decimal                   限制使用 CPU 的数量.\n      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach                         在后台运行容器, 并显示容器 ID.\n      --detach-keys string             Override the key sequence for detaching a container\n      --device list                    Add a host device to the container\n      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n      --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n      --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n      --disable-content-trust          Skip image verification (default true)\n      --dns list                       Set custom DNS servers\n      --dns-option list                Set DNS options\n      --dns-search list                Set custom DNS search domains\n      --entrypoint string              Overwrite the default ENTRYPOINT of the image\n  -e, --env list                       Set environment variables\n      --env-file list                  Read in a file of environment variables\n      --expose list                    Expose a port or a range of ports\n      --group-add list                 Add additional groups to join\n      --health-cmd string              Command to run to check health\n      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n      --health-retries int             Consecutive failures needed to report unhealthy\n      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)\n                                       (default 0s)\n      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n      --help                           显示帮助信息.\n  -h, --hostname string                为容器的 hostname 取名.\n      --init                           Run an init inside the container that forwards signals and reaps processes\n  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin\n      --ip string                      IPv4 address (e.g., 172.30.100.104)\n      --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n      --ipc string                     IPC mode to use\n      --isolation string               Container isolation technology\n      --kernel-memory bytes            限制内核内存使用量\n  -l, --label list                     Set meta data on a container\n      --label-file list                Read in a line delimited file of labels\n      --link list                      Add link to another container\n      --link-local-ip list             Container IPv4/IPv6 link-local addresses\n      --log-driver string              Logging driver for the container\n      --log-opt list                   Log driver options\n      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`\n      --memory-reservation bytes       Memory soft limit\n      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n      --mount mount                    Attach a filesystem mount to the container\n      --name string                    Assign a name to the container\n      --network string                 Connect a container to a network (default \"default\")\n      --network-alias list             Add network-scoped alias for the container\n      --no-healthcheck                 Disable any container-specified HEALTHCHECK\n      --oom-kill-disable               Disable OOM Killer\n      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n      --pid string                     PID namespace to use\n      --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n      --privileged                     Give extended privileges to this container\n  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.\n      --read-only                      Mount the container's root filesystem as read only\n      --restart string                 Restart policy to apply when a container exits (default \"no\")\n      --rm                             当容器停止运行时自动移除.\n      --runtime string                 Runtime to use for this container\n      --security-opt list              Security Options\n      --shm-size bytes                 Size of /dev/shm\n      --sig-proxy                      Proxy received signals to the process (default true)\n      --stop-signal string             Signal to stop a container (default \"SIGTERM\")\n      --stop-timeout int               Timeout (in seconds) to stop a container\n      --storage-opt list               Storage driver options for the container\n      --sysctl map                     Sysctl options (default map[])\n      --tmpfs list                     挂载一个临时文件系统.\n  -t, --tty                            创建一个伪终端\n      --ulimit ulimit                  Ulimit options (default [])\n  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])\n      --userns string                  User namespace to use\n      --uts string                     UTS namespace to use\n  -v, --volume list                    Bind mount a volume\n      --volume-driver string           Optional volume driver for the container\n      --volumes-from list              Mount volumes from the specified container(s)\n  -w, --workdir string                 Working directory inside the container\n\n```\n","date":"2018-08-19T15:12:46.186Z","updated":"2018-08-19T15:12:46.186Z","path":"assert/resources/docker.run.help.html","title":"","comments":1,"layout":"page","_id":"cjl0ztqv5002l10lkovji5vv6","content":"<p><a href=\"/assert/repos/docker/docker.run.help\">Origin-File</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\">Run a command in a new container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`</span><br><span class=\"line\">  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.</span><br><span class=\"line\">      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</span><br><span class=\"line\">      --blkio-weight-device list       Block IO weight (relative device weight) (default [])</span><br><span class=\"line\">      --cap-add list                   Add Linux capabilities</span><br><span class=\"line\">      --cap-drop list                  Drop Linux capabilities</span><br><span class=\"line\">      --cgroup-parent string           Optional parent cgroup for the container</span><br><span class=\"line\">      --cidfile string                 Write the container ID to the file</span><br><span class=\"line\">      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int              Limit CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds</span><br><span class=\"line\">  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.</span><br><span class=\"line\">      --cpus decimal                   限制使用 CPU 的数量.</span><br><span class=\"line\">      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">  -d, --detach                         在后台运行容器, 并显示容器 ID.</span><br><span class=\"line\">      --detach-keys string             Override the key sequence for detaching a container</span><br><span class=\"line\">      --device list                    Add a host device to the container</span><br><span class=\"line\">      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list</span><br><span class=\"line\">      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])</span><br><span class=\"line\">      --device-read-iops list          Limit read rate (IO per second) from a device (default [])</span><br><span class=\"line\">      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])</span><br><span class=\"line\">      --device-write-iops list         Limit write rate (IO per second) to a device (default [])</span><br><span class=\"line\">      --disable-content-trust          Skip image verification (default true)</span><br><span class=\"line\">      --dns list                       Set custom DNS servers</span><br><span class=\"line\">      --dns-option list                Set DNS options</span><br><span class=\"line\">      --dns-search list                Set custom DNS search domains</span><br><span class=\"line\">      --entrypoint string              Overwrite the default ENTRYPOINT of the image</span><br><span class=\"line\">  -e, --env list                       Set environment variables</span><br><span class=\"line\">      --env-file list                  Read in a file of environment variables</span><br><span class=\"line\">      --expose list                    Expose a port or a range of ports</span><br><span class=\"line\">      --group-add list                 Add additional groups to join</span><br><span class=\"line\">      --health-cmd string              Command to run to check health</span><br><span class=\"line\">      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --health-retries int             Consecutive failures needed to report unhealthy</span><br><span class=\"line\">      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)</span><br><span class=\"line\">                                       (default 0s)</span><br><span class=\"line\">      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --help                           显示帮助信息.</span><br><span class=\"line\">  -h, --hostname string                为容器的 hostname 取名.</span><br><span class=\"line\">      --init                           Run an init inside the container that forwards signals and reaps processes</span><br><span class=\"line\">  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin</span><br><span class=\"line\">      --ip string                      IPv4 address (e.g., 172.30.100.104)</span><br><span class=\"line\">      --ip6 string                     IPv6 address (e.g., 2001:db8::33)</span><br><span class=\"line\">      --ipc string                     IPC mode to use</span><br><span class=\"line\">      --isolation string               Container isolation technology</span><br><span class=\"line\">      --kernel-memory bytes            限制内核内存使用量</span><br><span class=\"line\">  -l, --label list                     Set meta data on a container</span><br><span class=\"line\">      --label-file list                Read in a line delimited file of labels</span><br><span class=\"line\">      --link list                      Add link to another container</span><br><span class=\"line\">      --link-local-ip list             Container IPv4/IPv6 link-local addresses</span><br><span class=\"line\">      --log-driver string              Logging driver for the container</span><br><span class=\"line\">      --log-opt list                   Log driver options</span><br><span class=\"line\">      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)</span><br><span class=\"line\">  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`</span><br><span class=\"line\">      --memory-reservation bytes       Memory soft limit</span><br><span class=\"line\">      --memory-swap bytes              Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap</span><br><span class=\"line\">      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)</span><br><span class=\"line\">      --mount mount                    Attach a filesystem mount to the container</span><br><span class=\"line\">      --name string                    Assign a name to the container</span><br><span class=\"line\">      --network string                 Connect a container to a network (default &quot;default&quot;)</span><br><span class=\"line\">      --network-alias list             Add network-scoped alias for the container</span><br><span class=\"line\">      --no-healthcheck                 Disable any container-specified HEALTHCHECK</span><br><span class=\"line\">      --oom-kill-disable               Disable OOM Killer</span><br><span class=\"line\">      --oom-score-adj int              Tune host&apos;s OOM preferences (-1000 to 1000)</span><br><span class=\"line\">      --pid string                     PID namespace to use</span><br><span class=\"line\">      --pids-limit int                 Tune container pids limit (set -1 for unlimited)</span><br><span class=\"line\">      --privileged                     Give extended privileges to this container</span><br><span class=\"line\">  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.</span><br><span class=\"line\">  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.</span><br><span class=\"line\">      --read-only                      Mount the container&apos;s root filesystem as read only</span><br><span class=\"line\">      --restart string                 Restart policy to apply when a container exits (default &quot;no&quot;)</span><br><span class=\"line\">      --rm                             当容器停止运行时自动移除.</span><br><span class=\"line\">      --runtime string                 Runtime to use for this container</span><br><span class=\"line\">      --security-opt list              Security Options</span><br><span class=\"line\">      --shm-size bytes                 Size of /dev/shm</span><br><span class=\"line\">      --sig-proxy                      Proxy received signals to the process (default true)</span><br><span class=\"line\">      --stop-signal string             Signal to stop a container (default &quot;SIGTERM&quot;)</span><br><span class=\"line\">      --stop-timeout int               Timeout (in seconds) to stop a container</span><br><span class=\"line\">      --storage-opt list               Storage driver options for the container</span><br><span class=\"line\">      --sysctl map                     Sysctl options (default map[])</span><br><span class=\"line\">      --tmpfs list                     挂载一个临时文件系统.</span><br><span class=\"line\">  -t, --tty                            创建一个伪终端</span><br><span class=\"line\">      --ulimit ulimit                  Ulimit options (default [])</span><br><span class=\"line\">  -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class=\"line\">      --userns string                  User namespace to use</span><br><span class=\"line\">      --uts string                     UTS namespace to use</span><br><span class=\"line\">  -v, --volume list                    Bind mount a volume</span><br><span class=\"line\">      --volume-driver string           Optional volume driver for the container</span><br><span class=\"line\">      --volumes-from list              Mount volumes from the specified container(s)</span><br><span class=\"line\">  -w, --workdir string                 Working directory inside the container</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/assert/repos/docker/docker.run.help\">Origin-File</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\">Run a command in a new container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`</span><br><span class=\"line\">  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.</span><br><span class=\"line\">      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</span><br><span class=\"line\">      --blkio-weight-device list       Block IO weight (relative device weight) (default [])</span><br><span class=\"line\">      --cap-add list                   Add Linux capabilities</span><br><span class=\"line\">      --cap-drop list                  Drop Linux capabilities</span><br><span class=\"line\">      --cgroup-parent string           Optional parent cgroup for the container</span><br><span class=\"line\">      --cidfile string                 Write the container ID to the file</span><br><span class=\"line\">      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int              Limit CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds</span><br><span class=\"line\">  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.</span><br><span class=\"line\">      --cpus decimal                   限制使用 CPU 的数量.</span><br><span class=\"line\">      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">  -d, --detach                         在后台运行容器, 并显示容器 ID.</span><br><span class=\"line\">      --detach-keys string             Override the key sequence for detaching a container</span><br><span class=\"line\">      --device list                    Add a host device to the container</span><br><span class=\"line\">      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list</span><br><span class=\"line\">      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])</span><br><span class=\"line\">      --device-read-iops list          Limit read rate (IO per second) from a device (default [])</span><br><span class=\"line\">      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])</span><br><span class=\"line\">      --device-write-iops list         Limit write rate (IO per second) to a device (default [])</span><br><span class=\"line\">      --disable-content-trust          Skip image verification (default true)</span><br><span class=\"line\">      --dns list                       Set custom DNS servers</span><br><span class=\"line\">      --dns-option list                Set DNS options</span><br><span class=\"line\">      --dns-search list                Set custom DNS search domains</span><br><span class=\"line\">      --entrypoint string              Overwrite the default ENTRYPOINT of the image</span><br><span class=\"line\">  -e, --env list                       Set environment variables</span><br><span class=\"line\">      --env-file list                  Read in a file of environment variables</span><br><span class=\"line\">      --expose list                    Expose a port or a range of ports</span><br><span class=\"line\">      --group-add list                 Add additional groups to join</span><br><span class=\"line\">      --health-cmd string              Command to run to check health</span><br><span class=\"line\">      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --health-retries int             Consecutive failures needed to report unhealthy</span><br><span class=\"line\">      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)</span><br><span class=\"line\">                                       (default 0s)</span><br><span class=\"line\">      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --help                           显示帮助信息.</span><br><span class=\"line\">  -h, --hostname string                为容器的 hostname 取名.</span><br><span class=\"line\">      --init                           Run an init inside the container that forwards signals and reaps processes</span><br><span class=\"line\">  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin</span><br><span class=\"line\">      --ip string                      IPv4 address (e.g., 172.30.100.104)</span><br><span class=\"line\">      --ip6 string                     IPv6 address (e.g., 2001:db8::33)</span><br><span class=\"line\">      --ipc string                     IPC mode to use</span><br><span class=\"line\">      --isolation string               Container isolation technology</span><br><span class=\"line\">      --kernel-memory bytes            限制内核内存使用量</span><br><span class=\"line\">  -l, --label list                     Set meta data on a container</span><br><span class=\"line\">      --label-file list                Read in a line delimited file of labels</span><br><span class=\"line\">      --link list                      Add link to another container</span><br><span class=\"line\">      --link-local-ip list             Container IPv4/IPv6 link-local addresses</span><br><span class=\"line\">      --log-driver string              Logging driver for the container</span><br><span class=\"line\">      --log-opt list                   Log driver options</span><br><span class=\"line\">      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)</span><br><span class=\"line\">  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`</span><br><span class=\"line\">      --memory-reservation bytes       Memory soft limit</span><br><span class=\"line\">      --memory-swap bytes              Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap</span><br><span class=\"line\">      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)</span><br><span class=\"line\">      --mount mount                    Attach a filesystem mount to the container</span><br><span class=\"line\">      --name string                    Assign a name to the container</span><br><span class=\"line\">      --network string                 Connect a container to a network (default &quot;default&quot;)</span><br><span class=\"line\">      --network-alias list             Add network-scoped alias for the container</span><br><span class=\"line\">      --no-healthcheck                 Disable any container-specified HEALTHCHECK</span><br><span class=\"line\">      --oom-kill-disable               Disable OOM Killer</span><br><span class=\"line\">      --oom-score-adj int              Tune host&apos;s OOM preferences (-1000 to 1000)</span><br><span class=\"line\">      --pid string                     PID namespace to use</span><br><span class=\"line\">      --pids-limit int                 Tune container pids limit (set -1 for unlimited)</span><br><span class=\"line\">      --privileged                     Give extended privileges to this container</span><br><span class=\"line\">  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.</span><br><span class=\"line\">  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.</span><br><span class=\"line\">      --read-only                      Mount the container&apos;s root filesystem as read only</span><br><span class=\"line\">      --restart string                 Restart policy to apply when a container exits (default &quot;no&quot;)</span><br><span class=\"line\">      --rm                             当容器停止运行时自动移除.</span><br><span class=\"line\">      --runtime string                 Runtime to use for this container</span><br><span class=\"line\">      --security-opt list              Security Options</span><br><span class=\"line\">      --shm-size bytes                 Size of /dev/shm</span><br><span class=\"line\">      --sig-proxy                      Proxy received signals to the process (default true)</span><br><span class=\"line\">      --stop-signal string             Signal to stop a container (default &quot;SIGTERM&quot;)</span><br><span class=\"line\">      --stop-timeout int               Timeout (in seconds) to stop a container</span><br><span class=\"line\">      --storage-opt list               Storage driver options for the container</span><br><span class=\"line\">      --sysctl map                     Sysctl options (default map[])</span><br><span class=\"line\">      --tmpfs list                     挂载一个临时文件系统.</span><br><span class=\"line\">  -t, --tty                            创建一个伪终端</span><br><span class=\"line\">      --ulimit ulimit                  Ulimit options (default [])</span><br><span class=\"line\">  -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class=\"line\">      --userns string                  User namespace to use</span><br><span class=\"line\">      --uts string                     UTS namespace to use</span><br><span class=\"line\">  -v, --volume list                    Bind mount a volume</span><br><span class=\"line\">      --volume-driver string           Optional volume driver for the container</span><br><span class=\"line\">      --volumes-from list              Mount volumes from the specified container(s)</span><br><span class=\"line\">  -w, --workdir string                 Working directory inside the container</span><br></pre></td></tr></table></figure>\r\n"},{"_content":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</pre></code>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)","source":"assert/js/src/insert_local_text.js","raw":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</pre></code>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)","date":"2018-08-18T09:37:01.808Z","updated":"2018-08-18T06:27:56.759Z","path":"assert/js/src/insert_local_text.js","layout":"false","title":"","comments":1,"_id":"cjl0ztqvf002m10lk15y0yzm3","content":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</code></pre>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)","site":{"data":{}},"excerpt":"","more":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</code></pre>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)"}],"Post":[{"title":"Docker-Samba","date":"2018-08-18T13:22:33.000Z","_content":"\n# 创建 Docker 数据卷 (volumes)\n\n```sh\ndocker volume create samba\n# 创建一个名为 samba 的数据卷.\n```\n\n```sh\n# 配置数据卷","source":"_drafts/Docker-Samba.md","raw":"---\ntitle: Docker-Samba\ndate: 2018-08-18 21:22:33\ntags:\n    - Samba\n    - Docker\ncategories:\n    - 日常\n---\n\n# 创建 Docker 数据卷 (volumes)\n\n```sh\ndocker volume create samba\n# 创建一个名为 samba 的数据卷.\n```\n\n```sh\n# 配置数据卷","slug":"Docker-Samba","published":0,"updated":"2018-08-18T13:28:12.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqlg000010lka4995mq1","content":"<h1 id=\"创建-docker-数据卷-volumes\">创建 Docker 数据卷 (volumes)</h1>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create samba</span><br><span class=\"line\"><span class=\"comment\"># 创建一个名为 samba 的数据卷.</span></span><br></pre></td></tr></table></figure>\r\n<p>```sh # 配置数据卷</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建-docker-数据卷-volumes\">创建 Docker 数据卷 (volumes)</h1>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create samba</span><br><span class=\"line\"><span class=\"comment\"># 创建一个名为 samba 的数据卷.</span></span><br></pre></td></tr></table></figure>\r\n<p>```sh # 配置数据卷</p>\r\n"},{"title":"HTML5-link标签","date":"2018-08-18T13:29:36.000Z","_content":"\n# <link> 是干什么用的?\n\n希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂...\n\n后来看了博客的 public 文件夹, 发现首页的 `index.html` 通过 \n\n```html\n<link itemprop=\"mainEntityOfPage\" href=\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\">\n```\n\n来插入文章. 于是针对性地搜索了一番.\n\n---\n\n- `<link>` 标签定义两个连接文档的关系\n- `<link>` 元素是空元素, 它只有属性\n> 也就是说 `<link>` 标签总是这样子的: `<link 属性列表 />`\n- `<link>` 元素有以下属性:\n    - `href` 定义目标文档或资源的位置. 可使用绝对路径或相对路径.\n    - `hreflang` 定义目标 URL 的基准语言\n    - `media` 规定文档显示设备.\n    - `rel`  定义当前文档与目标的关系\n        - `alternate` \n        - `author`\n        - `dns-prefetch`\n        - `help`\n        - `icon`\n        - `license`\n        - `next`\n        - `pingback`\n        - `preconnect`\n        - `prefetch`\n        - `preload`\n        - `prerender`\n        - `prev`\n        - `search`\n        - `stylesheet` 表明目标是当前文档的样式表\n    - `type` 规定目标 URL 的 MIME 类型\n        - `text/css` 表明是一个 CSS 文件","source":"_drafts/HTML5-link标签.md","raw":"---\ntitle: HTML5-link标签\ndate: 2018-08-18 21:29:36\ntags:\n    - HTML5\ncategories:\n    - 网站\n---\n\n# <link> 是干什么用的?\n\n希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂...\n\n后来看了博客的 public 文件夹, 发现首页的 `index.html` 通过 \n\n```html\n<link itemprop=\"mainEntityOfPage\" href=\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\">\n```\n\n来插入文章. 于是针对性地搜索了一番.\n\n---\n\n- `<link>` 标签定义两个连接文档的关系\n- `<link>` 元素是空元素, 它只有属性\n> 也就是说 `<link>` 标签总是这样子的: `<link 属性列表 />`\n- `<link>` 元素有以下属性:\n    - `href` 定义目标文档或资源的位置. 可使用绝对路径或相对路径.\n    - `hreflang` 定义目标 URL 的基准语言\n    - `media` 规定文档显示设备.\n    - `rel`  定义当前文档与目标的关系\n        - `alternate` \n        - `author`\n        - `dns-prefetch`\n        - `help`\n        - `icon`\n        - `license`\n        - `next`\n        - `pingback`\n        - `preconnect`\n        - `prefetch`\n        - `preload`\n        - `prerender`\n        - `prev`\n        - `search`\n        - `stylesheet` 表明目标是当前文档的样式表\n    - `type` 规定目标 URL 的 MIME 类型\n        - `text/css` 表明是一个 CSS 文件","slug":"HTML5-link标签","published":0,"updated":"2018-08-19T10:17:12.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqll000110lk4m7vcdta","content":"<h1 id=\"是干什么用的\"><link> 是干什么用的?</h1>\r\n<p>希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂…</p>\r\n<p>后来看了博客的 public 文件夹, 发现首页的 <code>index.html</code> 通过</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">\"mainEntityOfPage\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<p>来插入文章. 于是针对性地搜索了一番.</p>\r\n<hr>\r\n<ul>\r\n<li><code>&lt;link&gt;</code> 标签定义两个连接文档的关系</li>\r\n<li><code>&lt;link&gt;</code> 元素是空元素, 它只有属性 &gt; 也就是说 <code>&lt;link&gt;</code> 标签总是这样子的: <code>&lt;link 属性列表 /&gt;</code></li>\r\n<li><code>&lt;link&gt;</code> 元素有以下属性:\r\n<ul>\r\n<li><code>href</code> 定义目标文档或资源的位置. 可使用绝对路径或相对路径.</li>\r\n<li><code>hreflang</code> 定义目标 URL 的基准语言</li>\r\n<li><code>media</code> 规定文档显示设备.</li>\r\n<li><code>rel</code> 定义当前文档与目标的关系\r\n<ul>\r\n<li><code>alternate</code></li>\r\n<li><code>author</code></li>\r\n<li><code>dns-prefetch</code></li>\r\n<li><code>help</code></li>\r\n<li><code>icon</code></li>\r\n<li><code>license</code></li>\r\n<li><code>next</code></li>\r\n<li><code>pingback</code></li>\r\n<li><code>preconnect</code></li>\r\n<li><code>prefetch</code></li>\r\n<li><code>preload</code></li>\r\n<li><code>prerender</code></li>\r\n<li><code>prev</code></li>\r\n<li><code>search</code></li>\r\n<li><code>stylesheet</code> 表明目标是当前文档的样式表</li>\r\n</ul></li>\r\n<li><code>type</code> 规定目标 URL 的 MIME 类型\r\n<ul>\r\n<li><code>text/css</code> 表明是一个 CSS 文件</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"是干什么用的\"><link> 是干什么用的?</h1>\r\n<p>希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂…</p>\r\n<p>后来看了博客的 public 文件夹, 发现首页的 <code>index.html</code> 通过</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">\"mainEntityOfPage\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<p>来插入文章. 于是针对性地搜索了一番.</p>\r\n<hr>\r\n<ul>\r\n<li><code>&lt;link&gt;</code> 标签定义两个连接文档的关系</li>\r\n<li><code>&lt;link&gt;</code> 元素是空元素, 它只有属性 &gt; 也就是说 <code>&lt;link&gt;</code> 标签总是这样子的: <code>&lt;link 属性列表 /&gt;</code></li>\r\n<li><code>&lt;link&gt;</code> 元素有以下属性:\r\n<ul>\r\n<li><code>href</code> 定义目标文档或资源的位置. 可使用绝对路径或相对路径.</li>\r\n<li><code>hreflang</code> 定义目标 URL 的基准语言</li>\r\n<li><code>media</code> 规定文档显示设备.</li>\r\n<li><code>rel</code> 定义当前文档与目标的关系\r\n<ul>\r\n<li><code>alternate</code></li>\r\n<li><code>author</code></li>\r\n<li><code>dns-prefetch</code></li>\r\n<li><code>help</code></li>\r\n<li><code>icon</code></li>\r\n<li><code>license</code></li>\r\n<li><code>next</code></li>\r\n<li><code>pingback</code></li>\r\n<li><code>preconnect</code></li>\r\n<li><code>prefetch</code></li>\r\n<li><code>preload</code></li>\r\n<li><code>prerender</code></li>\r\n<li><code>prev</code></li>\r\n<li><code>search</code></li>\r\n<li><code>stylesheet</code> 表明目标是当前文档的样式表</li>\r\n</ul></li>\r\n<li><code>type</code> 规定目标 URL 的 MIME 类型\r\n<ul>\r\n<li><code>text/css</code> 表明是一个 CSS 文件</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"Docker笔记","mathjax":false,"date":"2018-08-17T19:09:11.000Z","_content":"\n# 在 Linux 上安装 Docker\n\n[GetDocker](https://get.docker.com) 准备了一个安装脚本.\n\n```sh\nwget -qO- https://get.docker.com | sh\n```\n\n# Docker 基本概念\n\nDocker 和虚拟机有所相似也有所不同:\n\n相似在于:\n\n- Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰\n\n不同在于:\n\n- Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的\"进程\". 而虚拟机则是直接从系统中划走了额定的资源.\n- Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.\n\n![Docker](https://www.docker.com/sites/default/files/Container%402x.png)\n![Vitual Machine](https://www.docker.com/sites/default/files/VM%402x.png)\n\n## Docker 镜像\n\nDocker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.\n\n## Docker 容器\n\n容器和镜像关系, 就类似于面对对象编程中的 `实例` 与 `类` 一样. 镜像是静态的定义, 容器是运行的实体.\n\n容器实质上是一个进程, 但是运行于独立的 `命名空间` . 容器可以有自己的用户, 系统配置, 文件系统.\n\n每一个容器运行时, 是以镜像为 `基础层` , 在其上创建一个当前容器的 `存储层`, 我们可以称这个为容器运行时读写而准备的存储层为 `容器存储层`.\n\n容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.\n\n按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 `数据卷(Volume)`, 或者绑定 `宿主目录` , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.\n\n数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失. \n\n## DockerFile\n\n# Docker 使用\n\n**运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组**\n\n```sh\n# 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.\nsudo cat /etc/group | grep docker\n# 2. 创建 docker 用户组\nsudo groupadd -g docker\n# 3. 将当前用户添加到 docker 用户组\nsudo usermode -aG docker current_user\n# 4. 重启 docker 服务, 使权限生效\nsudo systemctl restart docker\n# 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限\nsudo chmod a+rw /var/run/docker.sock\n```\n\n## 根据已有镜像运行容器\n\n```sh\ndocker run [image] [command]\n```\n\n- `docker run` 如果成功, 就会创建一个容器, 此容器基于 `image` 建立. `command` 是在容器中执行的指令.\n- 如果未在本地找到 `image` , docker 会自动前往官方仓库下载.\n\n一些有用的参数 [^docker.run.help]\n\n- `-a` 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. `--attach`\n- `-d` 后台运行, 并打印容器 ID, 长指令形式为 `--detach`\n- `-i` 开放容器的 stdin, 长指令形式为 `--interactive`\n- `-t` 创建一个终端(tty), `--tty`\n- `-h` 指定容器的 hostname, `--hostname`, 例如, `-h MyC` 或 `--hostname MyC` 将容器的 hostname 设置为 \"MyC\"\n- `--env` 设置环境变量\n- `--memory (int)bytes` 限制容器使用的内存, 例如 `--memory 1024m` 限制容器最多使用 1024MB 内存\n- `-p`, `--publish list` 公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n- `-P` 公开容器内部所有使用的端口, 随机映射到主机.\n\n## 使用参数运行容器\n\n```sh\ndocker run [options] [image] [command]\n```\n\n- 对 docker 使用的参数必须紧挨着 `docker run ` .\n\n### 交互式容器\n\n```sh\ndocker run -i -t ubuntu /bin/bash\n```\n\n- `-i` 参数表示允许向容器内的 stdin 输入.\n- `-t` 参数表示向容器外部生成一个终端.\n\n当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境.\n输入 `exit` 返回主机的 Shell, 同时, 容器被停止.\n\n```\nc64513b74145: Already exists\n01b8b12bad90: Already exists\nc5d85cf7a05f: Already exists\nb6b268720157: Already exists\ne12192999ff1: Already exists\nDigest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7\nStatus: Downloaded newer image for ubuntu:latest\nroot@43912502ede1:/#\n```\n\n### 后台运行容器\n\n```sh\ndocker run -d [image] [command]\n```\n\n- `-d` 参数会将此容器放在系统后台运行.\n\n## 停止容器\n\n要停止容器, 需要先获取容器 ID\n\n```sh\ndocker ps       # 列出当前正在运行的容器\ndocker ps -a    # 列出所有容器\n```\n\n```\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n5512151d0144        training/webapp     \"python app.py\"     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen\n```\n\n之后使用\n\n```sh\ndocker stop [ID]\n```\n\n停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.\n\n# Docker 管理\n\n## 添加容器\n## 添加镜像\n## 列出容器\n## 列出镜像\n## 移除容器\n## 移除镜像\n\n```sh\ndocker image ls                 # 列出本地镜像\ndocker image rm -f [images]     # 强制删除镜像\n```\n\n如果 `docker image rm [images]` 没有 `-f` 参数的话, 删除操作无法成功, 且报错:\n\n```sh\nError response from daemon:\nconflict: unable to remove repository reference \"hello-world:latest\" (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d\n```\n\n---\n\n[^docker.run.help]: [Docker.run.help](/assert/resources/docker.run.help.html)","source":"_drafts/docker笔记.md","raw":"---\ntitle: Docker笔记\nmathjax: false\ntags:\n  - Docker\ncategories:\n  - Linux\ndate: 2018-08-18 03:09:11\n---\n\n# 在 Linux 上安装 Docker\n\n[GetDocker](https://get.docker.com) 准备了一个安装脚本.\n\n```sh\nwget -qO- https://get.docker.com | sh\n```\n\n# Docker 基本概念\n\nDocker 和虚拟机有所相似也有所不同:\n\n相似在于:\n\n- Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰\n\n不同在于:\n\n- Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的\"进程\". 而虚拟机则是直接从系统中划走了额定的资源.\n- Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.\n\n![Docker](https://www.docker.com/sites/default/files/Container%402x.png)\n![Vitual Machine](https://www.docker.com/sites/default/files/VM%402x.png)\n\n## Docker 镜像\n\nDocker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.\n\n## Docker 容器\n\n容器和镜像关系, 就类似于面对对象编程中的 `实例` 与 `类` 一样. 镜像是静态的定义, 容器是运行的实体.\n\n容器实质上是一个进程, 但是运行于独立的 `命名空间` . 容器可以有自己的用户, 系统配置, 文件系统.\n\n每一个容器运行时, 是以镜像为 `基础层` , 在其上创建一个当前容器的 `存储层`, 我们可以称这个为容器运行时读写而准备的存储层为 `容器存储层`.\n\n容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.\n\n按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 `数据卷(Volume)`, 或者绑定 `宿主目录` , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.\n\n数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失. \n\n## DockerFile\n\n# Docker 使用\n\n**运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组**\n\n```sh\n# 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.\nsudo cat /etc/group | grep docker\n# 2. 创建 docker 用户组\nsudo groupadd -g docker\n# 3. 将当前用户添加到 docker 用户组\nsudo usermode -aG docker current_user\n# 4. 重启 docker 服务, 使权限生效\nsudo systemctl restart docker\n# 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限\nsudo chmod a+rw /var/run/docker.sock\n```\n\n## 根据已有镜像运行容器\n\n```sh\ndocker run [image] [command]\n```\n\n- `docker run` 如果成功, 就会创建一个容器, 此容器基于 `image` 建立. `command` 是在容器中执行的指令.\n- 如果未在本地找到 `image` , docker 会自动前往官方仓库下载.\n\n一些有用的参数 [^docker.run.help]\n\n- `-a` 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. `--attach`\n- `-d` 后台运行, 并打印容器 ID, 长指令形式为 `--detach`\n- `-i` 开放容器的 stdin, 长指令形式为 `--interactive`\n- `-t` 创建一个终端(tty), `--tty`\n- `-h` 指定容器的 hostname, `--hostname`, 例如, `-h MyC` 或 `--hostname MyC` 将容器的 hostname 设置为 \"MyC\"\n- `--env` 设置环境变量\n- `--memory (int)bytes` 限制容器使用的内存, 例如 `--memory 1024m` 限制容器最多使用 1024MB 内存\n- `-p`, `--publish list` 公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n- `-P` 公开容器内部所有使用的端口, 随机映射到主机.\n\n## 使用参数运行容器\n\n```sh\ndocker run [options] [image] [command]\n```\n\n- 对 docker 使用的参数必须紧挨着 `docker run ` .\n\n### 交互式容器\n\n```sh\ndocker run -i -t ubuntu /bin/bash\n```\n\n- `-i` 参数表示允许向容器内的 stdin 输入.\n- `-t` 参数表示向容器外部生成一个终端.\n\n当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境.\n输入 `exit` 返回主机的 Shell, 同时, 容器被停止.\n\n```\nc64513b74145: Already exists\n01b8b12bad90: Already exists\nc5d85cf7a05f: Already exists\nb6b268720157: Already exists\ne12192999ff1: Already exists\nDigest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7\nStatus: Downloaded newer image for ubuntu:latest\nroot@43912502ede1:/#\n```\n\n### 后台运行容器\n\n```sh\ndocker run -d [image] [command]\n```\n\n- `-d` 参数会将此容器放在系统后台运行.\n\n## 停止容器\n\n要停止容器, 需要先获取容器 ID\n\n```sh\ndocker ps       # 列出当前正在运行的容器\ndocker ps -a    # 列出所有容器\n```\n\n```\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n5512151d0144        training/webapp     \"python app.py\"     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen\n```\n\n之后使用\n\n```sh\ndocker stop [ID]\n```\n\n停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.\n\n# Docker 管理\n\n## 添加容器\n## 添加镜像\n## 列出容器\n## 列出镜像\n## 移除容器\n## 移除镜像\n\n```sh\ndocker image ls                 # 列出本地镜像\ndocker image rm -f [images]     # 强制删除镜像\n```\n\n如果 `docker image rm [images]` 没有 `-f` 参数的话, 删除操作无法成功, 且报错:\n\n```sh\nError response from daemon:\nconflict: unable to remove repository reference \"hello-world:latest\" (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d\n```\n\n---\n\n[^docker.run.help]: [Docker.run.help](/assert/resources/docker.run.help.html)","slug":"docker笔记","published":0,"updated":"2018-08-19T15:16:50.211Z","_id":"cjl0ztqlo000410lkvxxrsc44","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"在-linux-上安装-docker\">在 Linux 上安装 Docker</h1>\r\n<p><a href=\"https://get.docker.com\" target=\"_blank\" rel=\"noopener\">GetDocker</a> 准备了一个安装脚本.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://get.docker.com | sh</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"docker-基本概念\">Docker 基本概念</h1>\r\n<p>Docker 和虚拟机有所相似也有所不同:</p>\r\n<p>相似在于:</p>\r\n<ul>\r\n<li>Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰</li>\r\n</ul>\r\n<p>不同在于:</p>\r\n<ul>\r\n<li>Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的“进程”. 而虚拟机则是直接从系统中划走了额定的资源.</li>\r\n<li>Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.</li>\r\n</ul>\r\n<p><img src=\"https://www.docker.com/sites/default/files/Container%402x.png\" alt=\"Docker\"> <img src=\"https://www.docker.com/sites/default/files/VM%402x.png\" alt=\"Vitual Machine\"></p>\r\n<h2 id=\"docker-镜像\">Docker 镜像</h2>\r\n<p>Docker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.</p>\r\n<h2 id=\"docker-容器\">Docker 容器</h2>\r\n<p>容器和镜像关系, 就类似于面对对象编程中的 <code>实例</code> 与 <code>类</code> 一样. 镜像是静态的定义, 容器是运行的实体.</p>\r\n<p>容器实质上是一个进程, 但是运行于独立的 <code>命名空间</code> . 容器可以有自己的用户, 系统配置, 文件系统.</p>\r\n<p>每一个容器运行时, 是以镜像为 <code>基础层</code> , 在其上创建一个当前容器的 <code>存储层</code>, 我们可以称这个为容器运行时读写而准备的存储层为 <code>容器存储层</code>.</p>\r\n<p>容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.</p>\r\n<p>按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 <code>数据卷(Volume)</code>, 或者绑定 <code>宿主目录</code> , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.</p>\r\n<p>数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失.</p>\r\n<h2 id=\"dockerfile\">DockerFile</h2>\r\n<h1 id=\"docker-使用\">Docker 使用</h1>\r\n<p><strong>运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组</strong></p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.</span></span><br><span class=\"line\">sudo cat /etc/group | grep docker</span><br><span class=\"line\"><span class=\"comment\"># 2. 创建 docker 用户组</span></span><br><span class=\"line\">sudo groupadd -g docker</span><br><span class=\"line\"><span class=\"comment\"># 3. 将当前用户添加到 docker 用户组</span></span><br><span class=\"line\">sudo usermode -aG docker current_user</span><br><span class=\"line\"><span class=\"comment\"># 4. 重启 docker 服务, 使权限生效</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\"><span class=\"comment\"># 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限</span></span><br><span class=\"line\">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"根据已有镜像运行容器\">根据已有镜像运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>docker run</code> 如果成功, 就会创建一个容器, 此容器基于 <code>image</code> 建立. <code>command</code> 是在容器中执行的指令.</li>\r\n<li>如果未在本地找到 <code>image</code> , docker 会自动前往官方仓库下载.</li>\r\n</ul>\r\n<p>一些有用的参数 <a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a></p>\r\n<ul>\r\n<li><code>-a</code> 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. <code>--attach</code></li>\r\n<li><code>-d</code> 后台运行, 并打印容器 ID, 长指令形式为 <code>--detach</code></li>\r\n<li><code>-i</code> 开放容器的 stdin, 长指令形式为 <code>--interactive</code></li>\r\n<li><code>-t</code> 创建一个终端(tty), <code>--tty</code></li>\r\n<li><code>-h</code> 指定容器的 hostname, <code>--hostname</code>, 例如, <code>-h MyC</code> 或 <code>--hostname MyC</code> 将容器的 hostname 设置为 “MyC”</li>\r\n<li><code>--env</code> 设置环境变量</li>\r\n<li><code>--memory (int)bytes</code> 限制容器使用的内存, 例如 <code>--memory 1024m</code> 限制容器最多使用 1024MB 内存</li>\r\n<li><code>-p</code>, <code>--publish list</code> 公开容器内部端口, 并将其映射到对应主机端口. 例如 <code>-p [80:80, 8080:8080]</code> 或 <code>--publish=[80:80, 8080:8080]</code> 每一项都是 <code>主机端口号:容器端口号</code> 的组合.</li>\r\n<li><code>-P</code> 公开容器内部所有使用的端口, 随机映射到主机.</li>\r\n</ul>\r\n<h2 id=\"使用参数运行容器\">使用参数运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [options] [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>对 docker 使用的参数必须紧挨着 <code>docker run</code> .</li>\r\n</ul>\r\n<h3 id=\"交互式容器\">交互式容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-i</code> 参数表示允许向容器内的 stdin 输入.</li>\r\n<li><code>-t</code> 参数表示向容器外部生成一个终端.</li>\r\n</ul>\r\n<p>当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境. 输入 <code>exit</code> 返回主机的 Shell, 同时, 容器被停止.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c64513b74145: Already exists</span><br><span class=\"line\">01b8b12bad90: Already exists</span><br><span class=\"line\">c5d85cf7a05f: Already exists</span><br><span class=\"line\">b6b268720157: Already exists</span><br><span class=\"line\">e12192999ff1: Already exists</span><br><span class=\"line\">Digest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7</span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:latest</span><br><span class=\"line\">root@43912502ede1:/#</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"后台运行容器\">后台运行容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-d</code> 参数会将此容器放在系统后台运行.</li>\r\n</ul>\r\n<h2 id=\"停止容器\">停止容器</h2>\r\n<p>要停止容器, 需要先获取容器 ID</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps       <span class=\"comment\"># 列出当前正在运行的容器</span></span><br><span class=\"line\">docker ps -a    <span class=\"comment\"># 列出所有容器</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">5512151d0144        training/webapp     &quot;python app.py&quot;     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen</span><br></pre></td></tr></table></figure>\r\n<p>之后使用</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop [ID]</span><br></pre></td></tr></table></figure>\r\n<p>停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.</p>\r\n<h1 id=\"docker-管理\">Docker 管理</h1>\r\n<h2 id=\"添加容器\">添加容器</h2>\r\n<h2 id=\"添加镜像\">添加镜像</h2>\r\n<h2 id=\"列出容器\">列出容器</h2>\r\n<h2 id=\"列出镜像\">列出镜像</h2>\r\n<h2 id=\"移除容器\">移除容器</h2>\r\n<h2 id=\"移除镜像\">移除镜像</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls                 <span class=\"comment\"># 列出本地镜像</span></span><br><span class=\"line\">docker image rm -f [images]     <span class=\"comment\"># 强制删除镜像</span></span><br></pre></td></tr></table></figure>\r\n<p>如果 <code>docker image rm [images]</code> 没有 <code>-f</code> 参数的话, 删除操作无法成功, 且报错:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error response from daemon:</span><br><span class=\"line\">conflict: unable to remove repository reference <span class=\"string\">\"hello-world:latest\"</span> (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d</span><br></pre></td></tr></table></figure>\r\n<hr>\r\n<section class=\"footnotes\">\r\n<hr>\r\n<ol>\r\n<li id=\"fn1\"><p><a href=\"/assert/resources/docker.run.help.html\">Docker.run.help</a><a href=\"#fnref1\" class=\"footnote-back\">↩</a></p></li>\r\n</ol>\r\n</section>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在-linux-上安装-docker\">在 Linux 上安装 Docker</h1>\r\n<p><a href=\"https://get.docker.com\" target=\"_blank\" rel=\"noopener\">GetDocker</a> 准备了一个安装脚本.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://get.docker.com | sh</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"docker-基本概念\">Docker 基本概念</h1>\r\n<p>Docker 和虚拟机有所相似也有所不同:</p>\r\n<p>相似在于:</p>\r\n<ul>\r\n<li>Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰</li>\r\n</ul>\r\n<p>不同在于:</p>\r\n<ul>\r\n<li>Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的“进程”. 而虚拟机则是直接从系统中划走了额定的资源.</li>\r\n<li>Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.</li>\r\n</ul>\r\n<p><img src=\"https://www.docker.com/sites/default/files/Container%402x.png\" alt=\"Docker\"> <img src=\"https://www.docker.com/sites/default/files/VM%402x.png\" alt=\"Vitual Machine\"></p>\r\n<h2 id=\"docker-镜像\">Docker 镜像</h2>\r\n<p>Docker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.</p>\r\n<h2 id=\"docker-容器\">Docker 容器</h2>\r\n<p>容器和镜像关系, 就类似于面对对象编程中的 <code>实例</code> 与 <code>类</code> 一样. 镜像是静态的定义, 容器是运行的实体.</p>\r\n<p>容器实质上是一个进程, 但是运行于独立的 <code>命名空间</code> . 容器可以有自己的用户, 系统配置, 文件系统.</p>\r\n<p>每一个容器运行时, 是以镜像为 <code>基础层</code> , 在其上创建一个当前容器的 <code>存储层</code>, 我们可以称这个为容器运行时读写而准备的存储层为 <code>容器存储层</code>.</p>\r\n<p>容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.</p>\r\n<p>按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 <code>数据卷(Volume)</code>, 或者绑定 <code>宿主目录</code> , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.</p>\r\n<p>数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失.</p>\r\n<h2 id=\"dockerfile\">DockerFile</h2>\r\n<h1 id=\"docker-使用\">Docker 使用</h1>\r\n<p><strong>运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组</strong></p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.</span></span><br><span class=\"line\">sudo cat /etc/group | grep docker</span><br><span class=\"line\"><span class=\"comment\"># 2. 创建 docker 用户组</span></span><br><span class=\"line\">sudo groupadd -g docker</span><br><span class=\"line\"><span class=\"comment\"># 3. 将当前用户添加到 docker 用户组</span></span><br><span class=\"line\">sudo usermode -aG docker current_user</span><br><span class=\"line\"><span class=\"comment\"># 4. 重启 docker 服务, 使权限生效</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\"><span class=\"comment\"># 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限</span></span><br><span class=\"line\">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"根据已有镜像运行容器\">根据已有镜像运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>docker run</code> 如果成功, 就会创建一个容器, 此容器基于 <code>image</code> 建立. <code>command</code> 是在容器中执行的指令.</li>\r\n<li>如果未在本地找到 <code>image</code> , docker 会自动前往官方仓库下载.</li>\r\n</ul>\r\n<p>一些有用的参数 <a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a></p>\r\n<ul>\r\n<li><code>-a</code> 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. <code>--attach</code></li>\r\n<li><code>-d</code> 后台运行, 并打印容器 ID, 长指令形式为 <code>--detach</code></li>\r\n<li><code>-i</code> 开放容器的 stdin, 长指令形式为 <code>--interactive</code></li>\r\n<li><code>-t</code> 创建一个终端(tty), <code>--tty</code></li>\r\n<li><code>-h</code> 指定容器的 hostname, <code>--hostname</code>, 例如, <code>-h MyC</code> 或 <code>--hostname MyC</code> 将容器的 hostname 设置为 “MyC”</li>\r\n<li><code>--env</code> 设置环境变量</li>\r\n<li><code>--memory (int)bytes</code> 限制容器使用的内存, 例如 <code>--memory 1024m</code> 限制容器最多使用 1024MB 内存</li>\r\n<li><code>-p</code>, <code>--publish list</code> 公开容器内部端口, 并将其映射到对应主机端口. 例如 <code>-p [80:80, 8080:8080]</code> 或 <code>--publish=[80:80, 8080:8080]</code> 每一项都是 <code>主机端口号:容器端口号</code> 的组合.</li>\r\n<li><code>-P</code> 公开容器内部所有使用的端口, 随机映射到主机.</li>\r\n</ul>\r\n<h2 id=\"使用参数运行容器\">使用参数运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [options] [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>对 docker 使用的参数必须紧挨着 <code>docker run</code> .</li>\r\n</ul>\r\n<h3 id=\"交互式容器\">交互式容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-i</code> 参数表示允许向容器内的 stdin 输入.</li>\r\n<li><code>-t</code> 参数表示向容器外部生成一个终端.</li>\r\n</ul>\r\n<p>当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境. 输入 <code>exit</code> 返回主机的 Shell, 同时, 容器被停止.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c64513b74145: Already exists</span><br><span class=\"line\">01b8b12bad90: Already exists</span><br><span class=\"line\">c5d85cf7a05f: Already exists</span><br><span class=\"line\">b6b268720157: Already exists</span><br><span class=\"line\">e12192999ff1: Already exists</span><br><span class=\"line\">Digest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7</span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:latest</span><br><span class=\"line\">root@43912502ede1:/#</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"后台运行容器\">后台运行容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-d</code> 参数会将此容器放在系统后台运行.</li>\r\n</ul>\r\n<h2 id=\"停止容器\">停止容器</h2>\r\n<p>要停止容器, 需要先获取容器 ID</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps       <span class=\"comment\"># 列出当前正在运行的容器</span></span><br><span class=\"line\">docker ps -a    <span class=\"comment\"># 列出所有容器</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">5512151d0144        training/webapp     &quot;python app.py&quot;     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen</span><br></pre></td></tr></table></figure>\r\n<p>之后使用</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop [ID]</span><br></pre></td></tr></table></figure>\r\n<p>停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.</p>\r\n<h1 id=\"docker-管理\">Docker 管理</h1>\r\n<h2 id=\"添加容器\">添加容器</h2>\r\n<h2 id=\"添加镜像\">添加镜像</h2>\r\n<h2 id=\"列出容器\">列出容器</h2>\r\n<h2 id=\"列出镜像\">列出镜像</h2>\r\n<h2 id=\"移除容器\">移除容器</h2>\r\n<h2 id=\"移除镜像\">移除镜像</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls                 <span class=\"comment\"># 列出本地镜像</span></span><br><span class=\"line\">docker image rm -f [images]     <span class=\"comment\"># 强制删除镜像</span></span><br></pre></td></tr></table></figure>\r\n<p>如果 <code>docker image rm [images]</code> 没有 <code>-f</code> 参数的话, 删除操作无法成功, 且报错:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error response from daemon:</span><br><span class=\"line\">conflict: unable to remove repository reference <span class=\"string\">\"hello-world:latest\"</span> (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d</span><br></pre></td></tr></table></figure>\r\n<hr>\r\n<section class=\"footnotes\">\r\n<hr>\r\n<ol>\r\n<li id=\"fn1\"><p><a href=\"/assert/resources/docker.run.help.html\">Docker.run.help</a><a href=\"#fnref1\" class=\"footnote-back\">↩</a></p></li>\r\n</ol>\r\n</section>\r\n"},{"title":"[PyNote]-定义函数","mathjax":false,"date":"2018-08-12T16:35:59.000Z","_content":"\n# 语法\n\n```py\ndef function_name(args):\n    pass\n```\n\n## 参数传递","source":"_drafts/pynote-定义函数.md","raw":"---\ntitle: '[PyNote]-定义函数'\nmathjax: false\ntags:\n  - null\ncategories:\n  - null\ndate: 2018-08-13 00:35:59\n---\n\n# 语法\n\n```py\ndef function_name(args):\n    pass\n```\n\n## 参数传递","slug":"pynote-定义函数","published":0,"updated":"2018-08-17T18:42:44.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqlr000510lkyzzwmu8y","content":"<h1 id=\"语法\">语法</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function_name</span><span class=\"params\">(args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"参数传递\">参数传递</h2>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"语法\">语法</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function_name</span><span class=\"params\">(args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"参数传递\">参数传递</h2>\r\n"},{"title":"[PyNote]-类的定义与继承","mathjax":false,"date":"2018-08-13T16:35:35.000Z","_content":"\n# 定义一个类\n\n```py\nclass ClassName(object):\n    def __init__(self):\n        pass\n```\n\n以上代码定义了一个什么都没有的类.\n\n- `ClassName` 按照代码规范, 应使用 `驼峰命名法`.\n- `CLassName(object)` 是一个继承自 `object` 的类. `object` 是 Python 中的基类, 可以留空, 默认值就是它.\n- `__init__()` 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.\n- `self` 变量代表了属于该类的实例.\n\n```py\nclass RandomNumber():\n    def __init__(self, count):\n        from random import randint\n        self.body = []\n        for i in range(0, count):\n          self.body.append(randint(0, 100))\nc = RandomNumber(100)\n```\n\n在定义实例 `c` 时, `100` 作为 `count` 的实际参数传递给了 `__init__()` 方法. 而 `c` 传递给了 `self` 参数.","source":"_drafts/pynote-类的定义与继承.md","raw":"---\ntitle: '[PyNote]-类的定义与继承'\nmathjax: false\ntags:\n  - null\ncategories:\n  - null\ndate: 2018-08-14 00:35:35\n---\n\n# 定义一个类\n\n```py\nclass ClassName(object):\n    def __init__(self):\n        pass\n```\n\n以上代码定义了一个什么都没有的类.\n\n- `ClassName` 按照代码规范, 应使用 `驼峰命名法`.\n- `CLassName(object)` 是一个继承自 `object` 的类. `object` 是 Python 中的基类, 可以留空, 默认值就是它.\n- `__init__()` 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.\n- `self` 变量代表了属于该类的实例.\n\n```py\nclass RandomNumber():\n    def __init__(self, count):\n        from random import randint\n        self.body = []\n        for i in range(0, count):\n          self.body.append(randint(0, 100))\nc = RandomNumber(100)\n```\n\n在定义实例 `c` 时, `100` 作为 `count` 的实际参数传递给了 `__init__()` 方法. 而 `c` 传递给了 `self` 参数.","slug":"pynote-类的定义与继承","published":0,"updated":"2018-08-17T18:42:20.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqlt000610lkxw252fgu","content":"<h1 id=\"定义一个类\">定义一个类</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>以上代码定义了一个什么都没有的类.</p>\r\n<ul>\r\n<li><code>ClassName</code> 按照代码规范, 应使用 <code>驼峰命名法</code>.</li>\r\n<li><code>CLassName(object)</code> 是一个继承自 <code>object</code> 的类. <code>object</code> 是 Python 中的基类, 可以留空, 默认值就是它.</li>\r\n<li><code>__init__()</code> 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.</li>\r\n<li><code>self</code> 变量代表了属于该类的实例.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomNumber</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, count)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\">        self.body = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, count):</span><br><span class=\"line\">          self.body.append(randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">c = RandomNumber(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\r\n<p>在定义实例 <code>c</code> 时, <code>100</code> 作为 <code>count</code> 的实际参数传递给了 <code>__init__()</code> 方法. 而 <code>c</code> 传递给了 <code>self</code> 参数.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义一个类\">定义一个类</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>以上代码定义了一个什么都没有的类.</p>\r\n<ul>\r\n<li><code>ClassName</code> 按照代码规范, 应使用 <code>驼峰命名法</code>.</li>\r\n<li><code>CLassName(object)</code> 是一个继承自 <code>object</code> 的类. <code>object</code> 是 Python 中的基类, 可以留空, 默认值就是它.</li>\r\n<li><code>__init__()</code> 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.</li>\r\n<li><code>self</code> 变量代表了属于该类的实例.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomNumber</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, count)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\">        self.body = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, count):</span><br><span class=\"line\">          self.body.append(randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">c = RandomNumber(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\r\n<p>在定义实例 <code>c</code> 时, <code>100</code> 作为 <code>count</code> 的实际参数传递给了 <code>__init__()</code> 方法. 而 <code>c</code> 传递给了 <code>self</code> 参数.</p>\r\n"},{"title":"[PyNote]-读写文件","mathjax":false,"date":"2018-08-15T16:38:16.000Z","_content":"`read()` 读取全部字符\n`readline()` 读取一行, 以换行符结尾, 并将读文件指针后移一行. 读到文件末尾会返回空字符串.\n`readlines()` 读取全部, 但以列表的形式将每一行的内容保存.\n","source":"_drafts/pynote-读写文件.md","raw":"---\ntitle: '[PyNote]-读写文件'\nmathjax: false\ntags:\n  - null\ncategories:\n  - null\ndate: 2018-08-16 00:38:16\n---\n`read()` 读取全部字符\n`readline()` 读取一行, 以换行符结尾, 并将读文件指针后移一行. 读到文件末尾会返回空字符串.\n`readlines()` 读取全部, 但以列表的形式将每一行的内容保存.\n","slug":"pynote-读写文件","published":0,"updated":"2018-08-15T16:38:30.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqlv000910lkl6frajtm","content":"<p><code>read()</code> 读取全部字符 <code>readline()</code> 读取一行, 以换行符结尾, 并将读文件指针后移一行. 读到文件末尾会返回空字符串. <code>readlines()</code> 读取全部, 但以列表的形式将每一行的内容保存.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p><code>read()</code> 读取全部字符 <code>readline()</code> 读取一行, 以换行符结尾, 并将读文件指针后移一行. 读到文件末尾会返回空字符串. <code>readlines()</code> 读取全部, 但以列表的形式将每一行的内容保存.</p>\r\n"},{"title":"[PyNote]-3.2-Python集合类型","mathjax":false,"date":"2018-07-29T13:37:35.000Z","_content":"\n- 集合\n  - 列表\n  - 元组\n  - 字典\n\n## 集合-set\n\n`set` 是一个无序列表, 用 `set(objects)` 生成一个集合类型的\n\n## 列表-list\n\nPython 中使用 `[]` 包括多个元素来表示 list.\n\n```py\nlist = [\"高数\", 59, \"挂科\", 0.99] # 将 list 类型的对象赋值给一个命名为 list 的变量.\nprint(list)\n\n# 输出信息:\n['高数', 59, '挂科', 0.99]        # list 中可以包含任意类型的对象, 且有序排列.\n```\n\n\n\n## 元组-tuple\n\n\n\n## 字典-dictionary (dict)\n\n","source":"_drafts/pynote-集合类型.md","raw":"---\ntitle: '[PyNote]-3.2-Python集合类型'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-29 21:37:35\n---\n\n- 集合\n  - 列表\n  - 元组\n  - 字典\n\n## 集合-set\n\n`set` 是一个无序列表, 用 `set(objects)` 生成一个集合类型的\n\n## 列表-list\n\nPython 中使用 `[]` 包括多个元素来表示 list.\n\n```py\nlist = [\"高数\", 59, \"挂科\", 0.99] # 将 list 类型的对象赋值给一个命名为 list 的变量.\nprint(list)\n\n# 输出信息:\n['高数', 59, '挂科', 0.99]        # list 中可以包含任意类型的对象, 且有序排列.\n```\n\n\n\n## 元组-tuple\n\n\n\n## 字典-dictionary (dict)\n\n","slug":"pynote-集合类型","published":0,"updated":"2018-08-15T16:38:42.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqlw000a10lkncnknh8m","content":"<ul>\r\n<li>集合\r\n<ul>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"集合-set\">集合-set</h2>\r\n<p><code>set</code> 是一个无序列表, 用 <code>set(objects)</code> 生成一个集合类型的</p>\r\n<h2 id=\"列表-list\">列表-list</h2>\r\n<p>Python 中使用 <code>[]</code> 包括多个元素来表示 list.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">\"高数\"</span>, <span class=\"number\">59</span>, <span class=\"string\">\"挂科\"</span>, <span class=\"number\">0.99</span>] <span class=\"comment\"># 将 list 类型的对象赋值给一个命名为 list 的变量.</span></span><br><span class=\"line\">print(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出信息:</span></span><br><span class=\"line\">[<span class=\"string\">'高数'</span>, <span class=\"number\">59</span>, <span class=\"string\">'挂科'</span>, <span class=\"number\">0.99</span>]        <span class=\"comment\"># list 中可以包含任意类型的对象, 且有序排列.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"元组-tuple\">元组-tuple</h2>\r\n<h2 id=\"字典-dictionary-dict\">字典-dictionary (dict)</h2>\r\n","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>集合\r\n<ul>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"集合-set\">集合-set</h2>\r\n<p><code>set</code> 是一个无序列表, 用 <code>set(objects)</code> 生成一个集合类型的</p>\r\n<h2 id=\"列表-list\">列表-list</h2>\r\n<p>Python 中使用 <code>[]</code> 包括多个元素来表示 list.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">\"高数\"</span>, <span class=\"number\">59</span>, <span class=\"string\">\"挂科\"</span>, <span class=\"number\">0.99</span>] <span class=\"comment\"># 将 list 类型的对象赋值给一个命名为 list 的变量.</span></span><br><span class=\"line\">print(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出信息:</span></span><br><span class=\"line\">[<span class=\"string\">'高数'</span>, <span class=\"number\">59</span>, <span class=\"string\">'挂科'</span>, <span class=\"number\">0.99</span>]        <span class=\"comment\"># list 中可以包含任意类型的对象, 且有序排列.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"元组-tuple\">元组-tuple</h2>\r\n<h2 id=\"字典-dictionary-dict\">字典-dictionary (dict)</h2>\r\n"},{"title":"Regex 正则表达式","mathjax":false,"date":"2018-08-10T08:24:09.000Z","_content":"\n# Regex 语法列表\n\n|表达式|含义|备注|\n|-|-|-|\n|`.`|表示一个任意字符||\n|`+`|字符至少出现一次||\n|`*`|字符出现 0 次或任意次|`.*` 等价于通配符 `*`|\n|`?`|字符出现 0 次或 1 次|`.?` 等价于通配符 `?`|\n|`|`|||\n|`()`|||\n|`[]`|||\n|`{n}`|字符正好出现 n 次||\n|`{n,}`|字符至少出现 n 次||\n|`{m,n}`|字符出现 m 到 n 次||\n|`\\s`|任意数量的空白字符|如空格, 换行符等|\n|`\\S`|任意数量的可见字符|如普通字母, 汉字等|\n|`\\b`|匹配一个单词边界|如 `This is a high tower`, `hi\\b` 将会匹配 `high` 中的 `hi`, 而 `This` 中的 `hi` 不会匹配|\n|`\\B`|匹配一个非单词边界||\n|`\\`|转义字符||\n|``|||","source":"_drafts/regex-正则表达式.md","raw":"---\ntitle: Regex 正则表达式\nmathjax: false\ntags:\n  - Regex\ncategories:\n  - Text\ndate: 2018-08-10 16:24:09\n---\n\n# Regex 语法列表\n\n|表达式|含义|备注|\n|-|-|-|\n|`.`|表示一个任意字符||\n|`+`|字符至少出现一次||\n|`*`|字符出现 0 次或任意次|`.*` 等价于通配符 `*`|\n|`?`|字符出现 0 次或 1 次|`.?` 等价于通配符 `?`|\n|`|`|||\n|`()`|||\n|`[]`|||\n|`{n}`|字符正好出现 n 次||\n|`{n,}`|字符至少出现 n 次||\n|`{m,n}`|字符出现 m 到 n 次||\n|`\\s`|任意数量的空白字符|如空格, 换行符等|\n|`\\S`|任意数量的可见字符|如普通字母, 汉字等|\n|`\\b`|匹配一个单词边界|如 `This is a high tower`, `hi\\b` 将会匹配 `high` 中的 `hi`, 而 `This` 中的 `hi` 不会匹配|\n|`\\B`|匹配一个非单词边界||\n|`\\`|转义字符||\n|``|||","slug":"regex-正则表达式","published":0,"updated":"2018-08-18T13:28:50.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqly000e10lk2q72gfd7","content":"<h1 id=\"regex-语法列表\">Regex 语法列表</h1>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>表达式</th>\r\n<th>含义</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>.</code></td>\r\n<td>表示一个任意字符</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>+</code></td>\r\n<td>字符至少出现一次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>*</code></td>\r\n<td>字符出现 0 次或任意次</td>\r\n<td><code>.*</code> 等价于通配符 <code>*</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>?</code></td>\r\n<td>字符出现 0 次或 1 次</td>\r\n<td><code>.?</code> 等价于通配符 <code>?</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>|</code></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>()</code></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>[]</code></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>{n}</code></td>\r\n<td>字符正好出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>{n,}</code></td>\r\n<td>字符至少出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>{m,n}</code></td>\r\n<td>字符出现 m 到 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>\\s</code></td>\r\n<td>任意数量的空白字符</td>\r\n<td>如空格, 换行符等</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>\\S</code></td>\r\n<td>任意数量的可见字符</td>\r\n<td>如普通字母, 汉字等</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>\\b</code></td>\r\n<td>匹配一个单词边界</td>\r\n<td>如 <code>This is a high tower</code>, <code>hi\\b</code> 将会匹配 <code>high</code> 中的 <code>hi</code>, 而 <code>This</code> 中的 <code>hi</code> 不会匹配</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>\\B</code></td>\r\n<td>匹配一个非单词边界</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>\\</code></td>\r\n<td>转义字符</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>``</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"regex-语法列表\">Regex 语法列表</h1>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>表达式</th>\r\n<th>含义</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>.</code></td>\r\n<td>表示一个任意字符</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>+</code></td>\r\n<td>字符至少出现一次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>*</code></td>\r\n<td>字符出现 0 次或任意次</td>\r\n<td><code>.*</code> 等价于通配符 <code>*</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>?</code></td>\r\n<td>字符出现 0 次或 1 次</td>\r\n<td><code>.?</code> 等价于通配符 <code>?</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>|</code></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>()</code></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>[]</code></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>{n}</code></td>\r\n<td>字符正好出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>{n,}</code></td>\r\n<td>字符至少出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>{m,n}</code></td>\r\n<td>字符出现 m 到 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>\\s</code></td>\r\n<td>任意数量的空白字符</td>\r\n<td>如空格, 换行符等</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>\\S</code></td>\r\n<td>任意数量的可见字符</td>\r\n<td>如普通字母, 汉字等</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>\\b</code></td>\r\n<td>匹配一个单词边界</td>\r\n<td>如 <code>This is a high tower</code>, <code>hi\\b</code> 将会匹配 <code>high</code> 中的 <code>hi</code>, 而 <code>This</code> 中的 <code>hi</code> 不会匹配</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>\\B</code></td>\r\n<td>匹配一个非单词边界</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>\\</code></td>\r\n<td>转义字符</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>``</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n"},{"title":"Windows系统中链接类型","mathjax":false,"date":"2018-07-28T16:43:26.000Z","_content":"\n## 先来讲讲 \"快捷方式\"\n\n## 符号链接 SymbolicLink\n\n## 硬链接 HardLink\n\n## Junction","source":"_drafts/windows系统中链接类型.md","raw":"---\ntitle: Windows系统中链接类型\nmathjax: false\ntags:\n  - Windows\n  - 'File System'\ncategories:\n  - 操作系统\ndate: 2018-07-29 00:43:26\n---\n\n## 先来讲讲 \"快捷方式\"\n\n## 符号链接 SymbolicLink\n\n## 硬链接 HardLink\n\n## Junction","slug":"windows系统中链接类型","published":0,"updated":"2018-07-27T12:14:51.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqm0000g10lk0it1ch4u","content":"<h2 id=\"先来讲讲-快捷方式\">先来讲讲 “快捷方式”</h2>\r\n<h2 id=\"符号链接-symboliclink\">符号链接 SymbolicLink</h2>\r\n<h2 id=\"硬链接-hardlink\">硬链接 HardLink</h2>\r\n<h2 id=\"junction\">Junction</h2>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先来讲讲-快捷方式\">先来讲讲 “快捷方式”</h2>\r\n<h2 id=\"符号链接-symboliclink\">符号链接 SymbolicLink</h2>\r\n<h2 id=\"硬链接-hardlink\">硬链接 HardLink</h2>\r\n<h2 id=\"junction\">Junction</h2>\r\n"},{"title":"Windows汇编语言环境","mathjax":false,"date":"2018-08-02T05:53:51.000Z","_content":"\n# 使用 GCC (MinGW-w64) + Vscode\n\nGCC 的一些参数\n\n编译一个 C 程序的过程.\n\nC 源代码 -> 预处理后的 C 源代码 -> 汇编 -> 编译至机器码 -> 链接为可执行文件\n\n|GCC 参数|作用|备注|\n|-|-|-|\n|`-E`|预处理, 但不编译, 生成`.i`文件|实际调用`cpp`|\n|`-S`|生成至汇编代码, 但不汇编, 根据 `--masm` 参数的不同, 生成`.s`或`.asm`文件|实际调用` `|\n|`-c`|汇编至机器码, 但不链接生成`.o`或`.obj`文件|实际调用`as`|\n|`--masm=`|配置汇编格式|`intel`, Intel 格式; `att` AT&T 格式|\n\nMinGW-w64 的 as.exe 对 intel 格式的汇编有问题, **不识别扩展名**, 所以编译 intel 格式的汇编文件时仍然使用 `.s` 扩展名. 经测试, 运行状况正常.\n\n```\n# 使用 .asm 扩展名时的报错.\nld.exe:./test.asm: file format not recognized; treating as linker script\nld.exe:./test.asm:1: syntax error\ncollect2.exe: error: ld returned 1 exit status\n```\n\n**未发现可行的图形化调试方法** 暂时放弃该方案.\n\n# 使用 Vitual Studio\n\n测试了一下书上抄来的代码:\n\n```asm\n\t.386\n\t.model\tflat\n\t.stack\t100\n\t.data\nnum1\tsdword\t?\nnum2\tsdword\t?\n\t.code\nmain\tproc\n\tmov\tnum1,\t5\n\tmov\teax,\tnum1\n\tmov\tnum2,\teax\n\tret\nmain\tendp\n\tend\n```\n\n遇到以下错误, 正在寻找解决方案\n\n```\nLINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup\ntest.exe : fatal error LNK1120: 1 个无法解析的外部命令\n```\n\n[Visual Studio2017汇编环境教程](https://zhuanlan.zhihu.com/p/31918676)\n[使用visual studio编译运行汇编程序](https://cfhm.github.io/2017/10/18/asm-1/)","source":"_drafts/windows汇编语言环境.md","raw":"---\ntitle: Windows汇编语言环境\nmathjax: false\ntags:\n  - Assemble\ncategories:\n  - Assemble\ndate: 2018-08-02 13:53:51\n---\n\n# 使用 GCC (MinGW-w64) + Vscode\n\nGCC 的一些参数\n\n编译一个 C 程序的过程.\n\nC 源代码 -> 预处理后的 C 源代码 -> 汇编 -> 编译至机器码 -> 链接为可执行文件\n\n|GCC 参数|作用|备注|\n|-|-|-|\n|`-E`|预处理, 但不编译, 生成`.i`文件|实际调用`cpp`|\n|`-S`|生成至汇编代码, 但不汇编, 根据 `--masm` 参数的不同, 生成`.s`或`.asm`文件|实际调用` `|\n|`-c`|汇编至机器码, 但不链接生成`.o`或`.obj`文件|实际调用`as`|\n|`--masm=`|配置汇编格式|`intel`, Intel 格式; `att` AT&T 格式|\n\nMinGW-w64 的 as.exe 对 intel 格式的汇编有问题, **不识别扩展名**, 所以编译 intel 格式的汇编文件时仍然使用 `.s` 扩展名. 经测试, 运行状况正常.\n\n```\n# 使用 .asm 扩展名时的报错.\nld.exe:./test.asm: file format not recognized; treating as linker script\nld.exe:./test.asm:1: syntax error\ncollect2.exe: error: ld returned 1 exit status\n```\n\n**未发现可行的图形化调试方法** 暂时放弃该方案.\n\n# 使用 Vitual Studio\n\n测试了一下书上抄来的代码:\n\n```asm\n\t.386\n\t.model\tflat\n\t.stack\t100\n\t.data\nnum1\tsdword\t?\nnum2\tsdword\t?\n\t.code\nmain\tproc\n\tmov\tnum1,\t5\n\tmov\teax,\tnum1\n\tmov\tnum2,\teax\n\tret\nmain\tendp\n\tend\n```\n\n遇到以下错误, 正在寻找解决方案\n\n```\nLINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup\ntest.exe : fatal error LNK1120: 1 个无法解析的外部命令\n```\n\n[Visual Studio2017汇编环境教程](https://zhuanlan.zhihu.com/p/31918676)\n[使用visual studio编译运行汇编程序](https://cfhm.github.io/2017/10/18/asm-1/)","slug":"windows汇编语言环境","published":0,"updated":"2018-08-02T09:20:30.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqm3000l10lksmurrlym","content":"<h1 id=\"使用-gcc-mingw-w64-vscode\">使用 GCC (MinGW-w64) + Vscode</h1>\r\n<p>GCC 的一些参数</p>\r\n<p>编译一个 C 程序的过程.</p>\r\n<p>C 源代码 -&gt; 预处理后的 C 源代码 -&gt; 汇编 -&gt; 编译至机器码 -&gt; 链接为可执行文件</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>GCC 参数</th>\r\n<th>作用</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>-E</code></td>\r\n<td>预处理, 但不编译, 生成<code>.i</code>文件</td>\r\n<td>实际调用<code>cpp</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>-S</code></td>\r\n<td>生成至汇编代码, 但不汇编, 根据 <code>--masm</code> 参数的不同, 生成<code>.s</code>或<code>.asm</code>文件</td>\r\n<td>实际调用` <code>| |</code>-c<code>|汇编至机器码, 但不链接生成</code>.o<code>或</code>.obj<code>文件|实际调用</code>as<code>| |</code>–masm=<code>|配置汇编格式|</code>intel<code>, Intel 格式;</code>att` AT&amp;T 格式</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>MinGW-w64 的 as.exe 对 intel 格式的汇编有问题, <strong>不识别扩展名</strong>, 所以编译 intel 格式的汇编文件时仍然使用 <code>.s</code> 扩展名. 经测试, 运行状况正常.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 .asm 扩展名时的报错.</span><br><span class=\"line\">ld.exe:./test.asm: file format not recognized; treating as linker script</span><br><span class=\"line\">ld.exe:./test.asm:1: syntax error</span><br><span class=\"line\">collect2.exe: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>\r\n<p><strong>未发现可行的图形化调试方法</strong> 暂时放弃该方案.</p>\r\n<h1 id=\"使用-vitual-studio\">使用 Vitual Studio</h1>\r\n<p>测试了一下书上抄来的代码:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.386</span><br><span class=\"line\">\t.model\tflat</span><br><span class=\"line\">\t.stack\t100</span><br><span class=\"line\">\t.data</span><br><span class=\"line\">num1\tsdword\t?</span><br><span class=\"line\">num2\tsdword\t?</span><br><span class=\"line\">\t.code</span><br><span class=\"line\">main\tproc</span><br><span class=\"line\">\tmov\tnum1,\t5</span><br><span class=\"line\">\tmov\teax,\tnum1</span><br><span class=\"line\">\tmov\tnum2,\teax</span><br><span class=\"line\">\tret</span><br><span class=\"line\">main\tendp</span><br><span class=\"line\">\tend</span><br></pre></td></tr></table></figure>\r\n<p>遇到以下错误, 正在寻找解决方案</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup</span><br><span class=\"line\">test.exe : fatal error LNK1120: 1 个无法解析的外部命令</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/31918676\" target=\"_blank\" rel=\"noopener\">Visual Studio2017汇编环境教程</a> <a href=\"https://cfhm.github.io/2017/10/18/asm-1/\" target=\"_blank\" rel=\"noopener\">使用visual studio编译运行汇编程序</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用-gcc-mingw-w64-vscode\">使用 GCC (MinGW-w64) + Vscode</h1>\r\n<p>GCC 的一些参数</p>\r\n<p>编译一个 C 程序的过程.</p>\r\n<p>C 源代码 -&gt; 预处理后的 C 源代码 -&gt; 汇编 -&gt; 编译至机器码 -&gt; 链接为可执行文件</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n<col style=\"width: 33%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>GCC 参数</th>\r\n<th>作用</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>-E</code></td>\r\n<td>预处理, 但不编译, 生成<code>.i</code>文件</td>\r\n<td>实际调用<code>cpp</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>-S</code></td>\r\n<td>生成至汇编代码, 但不汇编, 根据 <code>--masm</code> 参数的不同, 生成<code>.s</code>或<code>.asm</code>文件</td>\r\n<td>实际调用` <code>| |</code>-c<code>|汇编至机器码, 但不链接生成</code>.o<code>或</code>.obj<code>文件|实际调用</code>as<code>| |</code>–masm=<code>|配置汇编格式|</code>intel<code>, Intel 格式;</code>att` AT&amp;T 格式</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>MinGW-w64 的 as.exe 对 intel 格式的汇编有问题, <strong>不识别扩展名</strong>, 所以编译 intel 格式的汇编文件时仍然使用 <code>.s</code> 扩展名. 经测试, 运行状况正常.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 .asm 扩展名时的报错.</span><br><span class=\"line\">ld.exe:./test.asm: file format not recognized; treating as linker script</span><br><span class=\"line\">ld.exe:./test.asm:1: syntax error</span><br><span class=\"line\">collect2.exe: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>\r\n<p><strong>未发现可行的图形化调试方法</strong> 暂时放弃该方案.</p>\r\n<h1 id=\"使用-vitual-studio\">使用 Vitual Studio</h1>\r\n<p>测试了一下书上抄来的代码:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.386</span><br><span class=\"line\">\t.model\tflat</span><br><span class=\"line\">\t.stack\t100</span><br><span class=\"line\">\t.data</span><br><span class=\"line\">num1\tsdword\t?</span><br><span class=\"line\">num2\tsdword\t?</span><br><span class=\"line\">\t.code</span><br><span class=\"line\">main\tproc</span><br><span class=\"line\">\tmov\tnum1,\t5</span><br><span class=\"line\">\tmov\teax,\tnum1</span><br><span class=\"line\">\tmov\tnum2,\teax</span><br><span class=\"line\">\tret</span><br><span class=\"line\">main\tendp</span><br><span class=\"line\">\tend</span><br></pre></td></tr></table></figure>\r\n<p>遇到以下错误, 正在寻找解决方案</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup</span><br><span class=\"line\">test.exe : fatal error LNK1120: 1 个无法解析的外部命令</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/31918676\" target=\"_blank\" rel=\"noopener\">Visual Studio2017汇编环境教程</a> <a href=\"https://cfhm.github.io/2017/10/18/asm-1/\" target=\"_blank\" rel=\"noopener\">使用visual studio编译运行汇编程序</a></p>\r\n"},{"title":"PowerShell 安装 Chocolatey","date":"2018-08-19T09:23:15.000Z","_content":"\n> Windows10:1803.17134.228\n> \n> PowerShell:5.1.17134.228\n\n[Chocolatey](https://chocolatey.org/)\n\n# 按官网指示下载安装\n\n首先需要检查 PowerShell 的脚本安全政策.\n\n```powershell\nGet-ExecutionPolicy     # 查看当前政策\n```\n\n然后使用 `Set-ExecutionPolicy` 设置, 可以有以下选项:\n\n```powershell\n有效值包括:\n\n-- Restricted:不加载配置文件或运行脚本. 默认值为\"Restricted\". \n\n-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. \n\n-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. \n\n# 我喜欢设置为 Unrestricted\n-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. \n\n-- Bypass:不阻止任何执行项, 不显示警告和提示. \n\n-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略. \n```\n\n之后就运行 [官方提供的命令行](https://chocolatey.org/install#install-with-powershellexe)\n\n```powershell\niex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n# 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.\n```\n\n等待安装完成后, `choco --help` 检查安装是否成功.\n\n# 先安装一个 Vim 试试\n\n> 初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.\n\n下载时发现 `choco` 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.\n\n```\nDownloading vim\n  from 'https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download'\nProgress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).\nDownload of gvim-8-0-604.exe (9.22 MB) completed.\nInstalling vim...\nvim has been installed.\nAdding the vim installation directory to PATH …\nPATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...\n  vim may be able to be automatically uninstalled.\nEnvironment Vars (like PATH) have changed. Close/reopen your shell to\n see the changes (or in powershell/cmd.exe just type `refreshenv`).\n The install of vim was successful.\n  Software installed as 'exe', install location is likely default.\n\nChocolatey installed 1/1 packages.\n See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).\n```\n\n虽然 `choco` 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加... `refreshenv` 之后也无效...\nVim 安装路径在第八行提示, 手动将这个路径添加进PATH.\n\n......\n\n发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.\n\n> 重启之后就行了, Why?\n\n# PowerShell Gallay 中的 chocolatey Module\n\n\n\n发现在 PowerShell 中使用 `Find-Module chocolatey` 发现能找到该模块. 于是直接安装下来(需要管理员权限):\n\n```powershell\nPS> Install-Module chocolatey\n\n不受信任的存储库\n你正在从不受信任的存储库安装模块. 如果你信任该存储库, 请通过运行 Set-PSRepository cmdlet 更改其 InstallationPolicy\n值. 是否确实要从\"PSGallery\"安装模块?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为\"N\"):\n```\n\n安装完成后使用 `Import-Module chocolatey` 加载模块, 然后使用 `Get-Command *choco*` 查看可用的命令列表.\n\n```powershell\nPS> Get-Command *choco*\n\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nFunction        Disable-ChocolateyFeature                          0.0.50     chocolatey\nFunction        Disable-ChocolateySource                           0.0.50     chocolatey\nFunction        Enable-ChocolateyFeature                           0.0.50     chocolatey\nFunction        Enable-ChocolateySource                            0.0.50     chocolatey\nFunction        Get-ChocolateyDefaultArgument                      0.0.50     chocolatey\nFunction        Get-ChocolateyFeature                              0.0.50     chocolatey\nFunction        Get-ChocolateyPackage                              0.0.50     chocolatey\nFunction        Get-ChocolateySetting                              0.0.50     chocolatey\nFunction        Get-ChocolateySource                               0.0.50     chocolatey\nFunction        Get-ChocolateyVersion                              0.0.50     chocolatey\nFunction        Install-ChocolateyPackage                          0.0.50     chocolatey\nFunction        Install-ChocolateySoftware                         0.0.50     chocolatey\nFunction        Register-ChocolateySource                          0.0.50     chocolatey\nFunction        Set-ChocolateySetting                              0.0.50     chocolatey\nFunction        Test-ChocolateyFeature                             0.0.50     chocolatey\nFunction        Test-ChocolateyInstall                             0.0.50     chocolatey\nFunction        Test-ChocolateyPackageIsInstalled                  0.0.50     chocolatey\nFunction        Test-ChocolateySetting                             0.0.50     chocolatey\nFunction        Test-ChocolateySource                              0.0.50     chocolatey\nFunction        Uninstall-Chocolatey                               0.0.50     chocolatey\nFunction        Uninstall-ChocolateyPackage                        0.0.50     chocolatey\nFunction        Unregister-ChocolateySource                        0.0.50     chocolatey\nFunction        Update-ChocolateyPackage                           0.0.50     chocolatey\n```","source":"_posts/PowerShell-安装-Chocolatey.md","raw":"---\ntitle: PowerShell 安装 Chocolatey\ndate: 2018-08-19 17:23:15\ntags:\n    - PowerShell\ncategories:\n    - 日常\n---\n\n> Windows10:1803.17134.228\n> \n> PowerShell:5.1.17134.228\n\n[Chocolatey](https://chocolatey.org/)\n\n# 按官网指示下载安装\n\n首先需要检查 PowerShell 的脚本安全政策.\n\n```powershell\nGet-ExecutionPolicy     # 查看当前政策\n```\n\n然后使用 `Set-ExecutionPolicy` 设置, 可以有以下选项:\n\n```powershell\n有效值包括:\n\n-- Restricted:不加载配置文件或运行脚本. 默认值为\"Restricted\". \n\n-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. \n\n-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. \n\n# 我喜欢设置为 Unrestricted\n-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. \n\n-- Bypass:不阻止任何执行项, 不显示警告和提示. \n\n-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略. \n```\n\n之后就运行 [官方提供的命令行](https://chocolatey.org/install#install-with-powershellexe)\n\n```powershell\niex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n# 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.\n```\n\n等待安装完成后, `choco --help` 检查安装是否成功.\n\n# 先安装一个 Vim 试试\n\n> 初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.\n\n下载时发现 `choco` 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.\n\n```\nDownloading vim\n  from 'https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download'\nProgress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).\nDownload of gvim-8-0-604.exe (9.22 MB) completed.\nInstalling vim...\nvim has been installed.\nAdding the vim installation directory to PATH …\nPATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...\n  vim may be able to be automatically uninstalled.\nEnvironment Vars (like PATH) have changed. Close/reopen your shell to\n see the changes (or in powershell/cmd.exe just type `refreshenv`).\n The install of vim was successful.\n  Software installed as 'exe', install location is likely default.\n\nChocolatey installed 1/1 packages.\n See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).\n```\n\n虽然 `choco` 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加... `refreshenv` 之后也无效...\nVim 安装路径在第八行提示, 手动将这个路径添加进PATH.\n\n......\n\n发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.\n\n> 重启之后就行了, Why?\n\n# PowerShell Gallay 中的 chocolatey Module\n\n\n\n发现在 PowerShell 中使用 `Find-Module chocolatey` 发现能找到该模块. 于是直接安装下来(需要管理员权限):\n\n```powershell\nPS> Install-Module chocolatey\n\n不受信任的存储库\n你正在从不受信任的存储库安装模块. 如果你信任该存储库, 请通过运行 Set-PSRepository cmdlet 更改其 InstallationPolicy\n值. 是否确实要从\"PSGallery\"安装模块?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为\"N\"):\n```\n\n安装完成后使用 `Import-Module chocolatey` 加载模块, 然后使用 `Get-Command *choco*` 查看可用的命令列表.\n\n```powershell\nPS> Get-Command *choco*\n\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nFunction        Disable-ChocolateyFeature                          0.0.50     chocolatey\nFunction        Disable-ChocolateySource                           0.0.50     chocolatey\nFunction        Enable-ChocolateyFeature                           0.0.50     chocolatey\nFunction        Enable-ChocolateySource                            0.0.50     chocolatey\nFunction        Get-ChocolateyDefaultArgument                      0.0.50     chocolatey\nFunction        Get-ChocolateyFeature                              0.0.50     chocolatey\nFunction        Get-ChocolateyPackage                              0.0.50     chocolatey\nFunction        Get-ChocolateySetting                              0.0.50     chocolatey\nFunction        Get-ChocolateySource                               0.0.50     chocolatey\nFunction        Get-ChocolateyVersion                              0.0.50     chocolatey\nFunction        Install-ChocolateyPackage                          0.0.50     chocolatey\nFunction        Install-ChocolateySoftware                         0.0.50     chocolatey\nFunction        Register-ChocolateySource                          0.0.50     chocolatey\nFunction        Set-ChocolateySetting                              0.0.50     chocolatey\nFunction        Test-ChocolateyFeature                             0.0.50     chocolatey\nFunction        Test-ChocolateyInstall                             0.0.50     chocolatey\nFunction        Test-ChocolateyPackageIsInstalled                  0.0.50     chocolatey\nFunction        Test-ChocolateySetting                             0.0.50     chocolatey\nFunction        Test-ChocolateySource                              0.0.50     chocolatey\nFunction        Uninstall-Chocolatey                               0.0.50     chocolatey\nFunction        Uninstall-ChocolateyPackage                        0.0.50     chocolatey\nFunction        Unregister-ChocolateySource                        0.0.50     chocolatey\nFunction        Update-ChocolateyPackage                           0.0.50     chocolatey\n```","slug":"PowerShell-安装-Chocolatey","published":1,"updated":"2018-08-19T11:35:35.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqm5000n10lkoz4w4wo5","content":"<blockquote>\r\n<p>Windows10:1803.17134.228</p>\r\n<p>PowerShell:5.1.17134.228</p>\r\n</blockquote>\r\n<p><a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">Chocolatey</a></p>\r\n<h1 id=\"按官网指示下载安装\">按官网指示下载安装</h1>\r\n<p>首先需要检查 PowerShell 的脚本安全政策.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-ExecutionPolicy</span>     <span class=\"comment\"># 查看当前政策</span></span><br></pre></td></tr></table></figure>\r\n<p>然后使用 <code>Set-ExecutionPolicy</code> 设置, 可以有以下选项:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有效值包括:</span><br><span class=\"line\"></span><br><span class=\"line\">-- Restricted:不加载配置文件或运行脚本. 默认值为<span class=\"string\">\"Restricted\"</span>. </span><br><span class=\"line\"></span><br><span class=\"line\">-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我喜欢设置为 Unrestricted</span></span><br><span class=\"line\">-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Bypass:不阻止任何执行项, 不显示警告和提示. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略.</span><br></pre></td></tr></table></figure>\r\n<p>之后就运行 <a href=\"https://chocolatey.org/install#install-with-powershellexe\" target=\"_blank\" rel=\"noopener\">官方提供的命令行</a></p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iex ((<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">'https://chocolatey.org/install.ps1'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.</span></span><br></pre></td></tr></table></figure>\r\n<p>等待安装完成后, <code>choco --help</code> 检查安装是否成功.</p>\r\n<h1 id=\"先安装一个-vim-试试\">先安装一个 Vim 试试</h1>\r\n<blockquote>\r\n<p>初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.</p>\r\n</blockquote>\r\n<p>下载时发现 <code>choco</code> 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading vim</span><br><span class=\"line\">  from &apos;https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download&apos;</span><br><span class=\"line\">Progress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).</span><br><span class=\"line\">Download of gvim-8-0-604.exe (9.22 MB) completed.</span><br><span class=\"line\">Installing vim...</span><br><span class=\"line\">vim has been installed.</span><br><span class=\"line\">Adding the vim installation directory to PATH …</span><br><span class=\"line\">PATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...</span><br><span class=\"line\">  vim may be able to be automatically uninstalled.</span><br><span class=\"line\">Environment Vars (like PATH) have changed. Close/reopen your shell to</span><br><span class=\"line\"> see the changes (or in powershell/cmd.exe just type `refreshenv`).</span><br><span class=\"line\"> The install of vim was successful.</span><br><span class=\"line\">  Software installed as &apos;exe&apos;, install location is likely default.</span><br><span class=\"line\"></span><br><span class=\"line\">Chocolatey installed 1/1 packages.</span><br><span class=\"line\"> See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).</span><br></pre></td></tr></table></figure>\r\n<p>虽然 <code>choco</code> 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加… <code>refreshenv</code> 之后也无效… Vim 安装路径在第八行提示, 手动将这个路径添加进PATH.</p>\r\n<p>……</p>\r\n<p>发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.</p>\r\n<blockquote>\r\n<p>重启之后就行了, Why?</p>\r\n</blockquote>\r\n<h1 id=\"powershell-gallay-中的-chocolatey-module\">PowerShell Gallay 中的 chocolatey Module</h1>\r\n<p>发现在 PowerShell 中使用 <code>Find-Module chocolatey</code> 发现能找到该模块. 于是直接安装下来(需要管理员权限):</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS&gt; Install-Module chocolatey</span><br><span class=\"line\"></span><br><span class=\"line\">不受信任的存储库</span><br><span class=\"line\">你正在从不受信任的存储库安装模块. 如果你信任该存储库, 请通过运行 Set-PSRepository cmdlet 更改其 InstallationPolicy</span><br><span class=\"line\">值. 是否确实要从<span class=\"string\">\"PSGallery\"</span>安装模块?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为<span class=\"string\">\"N\"</span>):</span><br></pre></td></tr></table></figure>\r\n<p>安装完成后使用 <code>Import-Module chocolatey</code> 加载模块, 然后使用 <code>Get-Command *choco*</code> 查看可用的命令列表.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS&gt; <span class=\"built_in\">Get-Command</span> *choco*</span><br><span class=\"line\"></span><br><span class=\"line\">CommandType     Name                                               Version    Source</span><br><span class=\"line\">-----------     ----                                               -------    ------</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Disable-ChocolateyFeature                          <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Disable-ChocolateySource                           <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Enable-ChocolateyFeature                           <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Enable-ChocolateySource                            <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyDefaultArgument                      <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyFeature                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyPackage                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateySetting                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateySource                               <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyVersion                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Install-ChocolateyPackage                          <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Install-ChocolateySoftware                         <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Register-ChocolateySource                          <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Set-ChocolateySetting                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateyFeature                             <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateyInstall                             <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateyPackageIsInstalled                  <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateySetting                             <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateySource                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Uninstall-Chocolatey                               <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Uninstall-ChocolateyPackage                        <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Unregister-ChocolateySource                        <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Update-ChocolateyPackage                           <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\r\n<p>Windows10:1803.17134.228</p>\r\n<p>PowerShell:5.1.17134.228</p>\r\n</blockquote>\r\n<p><a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">Chocolatey</a></p>\r\n<h1 id=\"按官网指示下载安装\">按官网指示下载安装</h1>\r\n<p>首先需要检查 PowerShell 的脚本安全政策.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-ExecutionPolicy</span>     <span class=\"comment\"># 查看当前政策</span></span><br></pre></td></tr></table></figure>\r\n<p>然后使用 <code>Set-ExecutionPolicy</code> 设置, 可以有以下选项:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有效值包括:</span><br><span class=\"line\"></span><br><span class=\"line\">-- Restricted:不加载配置文件或运行脚本. 默认值为<span class=\"string\">\"Restricted\"</span>. </span><br><span class=\"line\"></span><br><span class=\"line\">-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我喜欢设置为 Unrestricted</span></span><br><span class=\"line\">-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Bypass:不阻止任何执行项, 不显示警告和提示. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略.</span><br></pre></td></tr></table></figure>\r\n<p>之后就运行 <a href=\"https://chocolatey.org/install#install-with-powershellexe\" target=\"_blank\" rel=\"noopener\">官方提供的命令行</a></p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iex ((<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">'https://chocolatey.org/install.ps1'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.</span></span><br></pre></td></tr></table></figure>\r\n<p>等待安装完成后, <code>choco --help</code> 检查安装是否成功.</p>\r\n<h1 id=\"先安装一个-vim-试试\">先安装一个 Vim 试试</h1>\r\n<blockquote>\r\n<p>初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.</p>\r\n</blockquote>\r\n<p>下载时发现 <code>choco</code> 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading vim</span><br><span class=\"line\">  from &apos;https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download&apos;</span><br><span class=\"line\">Progress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).</span><br><span class=\"line\">Download of gvim-8-0-604.exe (9.22 MB) completed.</span><br><span class=\"line\">Installing vim...</span><br><span class=\"line\">vim has been installed.</span><br><span class=\"line\">Adding the vim installation directory to PATH …</span><br><span class=\"line\">PATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...</span><br><span class=\"line\">  vim may be able to be automatically uninstalled.</span><br><span class=\"line\">Environment Vars (like PATH) have changed. Close/reopen your shell to</span><br><span class=\"line\"> see the changes (or in powershell/cmd.exe just type `refreshenv`).</span><br><span class=\"line\"> The install of vim was successful.</span><br><span class=\"line\">  Software installed as &apos;exe&apos;, install location is likely default.</span><br><span class=\"line\"></span><br><span class=\"line\">Chocolatey installed 1/1 packages.</span><br><span class=\"line\"> See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).</span><br></pre></td></tr></table></figure>\r\n<p>虽然 <code>choco</code> 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加… <code>refreshenv</code> 之后也无效… Vim 安装路径在第八行提示, 手动将这个路径添加进PATH.</p>\r\n<p>……</p>\r\n<p>发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.</p>\r\n<blockquote>\r\n<p>重启之后就行了, Why?</p>\r\n</blockquote>\r\n<h1 id=\"powershell-gallay-中的-chocolatey-module\">PowerShell Gallay 中的 chocolatey Module</h1>\r\n<p>发现在 PowerShell 中使用 <code>Find-Module chocolatey</code> 发现能找到该模块. 于是直接安装下来(需要管理员权限):</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS&gt; Install-Module chocolatey</span><br><span class=\"line\"></span><br><span class=\"line\">不受信任的存储库</span><br><span class=\"line\">你正在从不受信任的存储库安装模块. 如果你信任该存储库, 请通过运行 Set-PSRepository cmdlet 更改其 InstallationPolicy</span><br><span class=\"line\">值. 是否确实要从<span class=\"string\">\"PSGallery\"</span>安装模块?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为<span class=\"string\">\"N\"</span>):</span><br></pre></td></tr></table></figure>\r\n<p>安装完成后使用 <code>Import-Module chocolatey</code> 加载模块, 然后使用 <code>Get-Command *choco*</code> 查看可用的命令列表.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS&gt; <span class=\"built_in\">Get-Command</span> *choco*</span><br><span class=\"line\"></span><br><span class=\"line\">CommandType     Name                                               Version    Source</span><br><span class=\"line\">-----------     ----                                               -------    ------</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Disable-ChocolateyFeature                          <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Disable-ChocolateySource                           <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Enable-ChocolateyFeature                           <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Enable-ChocolateySource                            <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyDefaultArgument                      <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyFeature                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyPackage                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateySetting                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateySource                               <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Get-ChocolateyVersion                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Install-ChocolateyPackage                          <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Install-ChocolateySoftware                         <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Register-ChocolateySource                          <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Set-ChocolateySetting                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateyFeature                             <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateyInstall                             <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateyPackageIsInstalled                  <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateySetting                             <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Test-ChocolateySource                              <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Uninstall-Chocolatey                               <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Uninstall-ChocolateyPackage                        <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Unregister-ChocolateySource                        <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br><span class=\"line\"><span class=\"keyword\">Function</span>        Update-ChocolateyPackage                           <span class=\"number\">0.0</span>.<span class=\"number\">50</span>     chocolatey</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Hello World","date":"2018-07-23T14:12:38.000Z","mathjax":true,"_content":"\n# Hello World!\n\n今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.\n\n我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想. \n\n首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.\n\n另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.\n\n最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄\n\n## 感谢指导我搭建博客的几篇博文\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 `npm install hexo` 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径... 所以在安装的时候, 请注意切换到一个合适的路径吧.\n\n顺便在这里记录一下 Hexo 的常用操作\n\n|简写指令|完整指令|作用|\n|-|-|-|\n|`hexo n \"标题\"`|`hexo new`|创建一个 标题.md 文档在 /source/_posts 目录下|\n|`hexo clean`||清楚缓存|\n|`hexo g`|`hexo generate`|生成 public 下的文件|\n|`hexo s`|`hexo server`|启动 hexo 服务器, 默认在 localhost 下的 :4000 端口|\n|`hexo d`|`hexo deploy`|部署到远程服务器, 依据 _config.yml 的设置|\n\n## 接下来打算干的事\n\n准备在该博客上发布一些好玩的东西和学习笔记.\n\n0. [x] 更换主题, 感觉 [Next主题](https://github.com/iissnan/hexo-theme-next) 比较好看.\n    - 更换主题, 将下载的主题包解压到 `/theme/` 目录下, 然后在 `/_config.yml` 中配置 `theme: landscape` 项(默认主题是 landscape) 为 `theme: 主题文件夹名` 即可.\n0. [ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\n    - 选择了 [Gitalk](https://github.com/gitalk/gitalk)\n    - [Gitalk 配置过程]()\n0. [x] {2018.7.24更新}GitHub Page 只能显示一页?\n    - 哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\n        - 问题解决了.","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-07-23 22:12:38\nmathjax: true\ntags:\n  - Hexo\n---\n\n# Hello World!\n\n今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.\n\n我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想. \n\n首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.\n\n另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.\n\n最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄\n\n## 感谢指导我搭建博客的几篇博文\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 `npm install hexo` 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径... 所以在安装的时候, 请注意切换到一个合适的路径吧.\n\n顺便在这里记录一下 Hexo 的常用操作\n\n|简写指令|完整指令|作用|\n|-|-|-|\n|`hexo n \"标题\"`|`hexo new`|创建一个 标题.md 文档在 /source/_posts 目录下|\n|`hexo clean`||清楚缓存|\n|`hexo g`|`hexo generate`|生成 public 下的文件|\n|`hexo s`|`hexo server`|启动 hexo 服务器, 默认在 localhost 下的 :4000 端口|\n|`hexo d`|`hexo deploy`|部署到远程服务器, 依据 _config.yml 的设置|\n\n## 接下来打算干的事\n\n准备在该博客上发布一些好玩的东西和学习笔记.\n\n0. [x] 更换主题, 感觉 [Next主题](https://github.com/iissnan/hexo-theme-next) 比较好看.\n    - 更换主题, 将下载的主题包解压到 `/theme/` 目录下, 然后在 `/_config.yml` 中配置 `theme: landscape` 项(默认主题是 landscape) 为 `theme: 主题文件夹名` 即可.\n0. [ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\n    - 选择了 [Gitalk](https://github.com/gitalk/gitalk)\n    - [Gitalk 配置过程]()\n0. [x] {2018.7.24更新}GitHub Page 只能显示一页?\n    - 哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\n        - 问题解决了.","slug":"hello-world","published":1,"updated":"2018-08-02T09:21:41.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqm8000r10lktpln9opa","content":"<h1 id=\"hello-world\">Hello World!</h1>\r\n<p>今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.</p>\r\n<p>我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想.</p>\r\n<p>首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.</p>\r\n<p>另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.</p>\r\n<p>最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄</p>\r\n<h2 id=\"感谢指导我搭建博客的几篇博文\">感谢指导我搭建博客的几篇博文</h2>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 <code>npm install hexo</code> 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径… 所以在安装的时候, 请注意切换到一个合适的路径吧.</p>\r\n<p>顺便在这里记录一下 Hexo 的常用操作</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>简写指令</th>\r\n<th>完整指令</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>hexo n &quot;标题&quot;</code></td>\r\n<td><code>hexo new</code></td>\r\n<td>创建一个 标题.md 文档在 /source/_posts 目录下</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo clean</code></td>\r\n<td></td>\r\n<td>清楚缓存</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo g</code></td>\r\n<td><code>hexo generate</code></td>\r\n<td>生成 public 下的文件</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo s</code></td>\r\n<td><code>hexo server</code></td>\r\n<td>启动 hexo 服务器, 默认在 localhost 下的 :4000 端口</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo d</code></td>\r\n<td><code>hexo deploy</code></td>\r\n<td>部署到远程服务器, 依据 _config.yml 的设置</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"接下来打算干的事\">接下来打算干的事</h2>\r\n<p>准备在该博客上发布一些好玩的东西和学习笔记.</p>\r\n<ol start=\"0\" type=\"1\">\r\n<li>[x] 更换主题, 感觉 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next主题</a> 比较好看.\r\n<ul>\r\n<li>更换主题, 将下载的主题包解压到 <code>/theme/</code> 目录下, 然后在 <code>/_config.yml</code> 中配置 <code>theme: landscape</code> 项(默认主题是 landscape) 为 <code>theme: 主题文件夹名</code> 即可.</li>\r\n</ul></li>\r\n<li>[ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\r\n<ul>\r\n<li>选择了 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">Gitalk</a></li>\r\n<li><a href=\"\">Gitalk 配置过程</a></li>\r\n</ul></li>\r\n<li>[x] {2018.7.24更新}GitHub Page 只能显示一页?\r\n<ul>\r\n<li>哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\r\n<ul>\r\n<li>问题解决了.</li>\r\n</ul></li>\r\n</ul></li>\r\n</ol>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hello-world\">Hello World!</h1>\r\n<p>今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.</p>\r\n<p>我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想.</p>\r\n<p>首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.</p>\r\n<p>另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.</p>\r\n<p>最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄</p>\r\n<h2 id=\"感谢指导我搭建博客的几篇博文\">感谢指导我搭建博客的几篇博文</h2>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 <code>npm install hexo</code> 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径… 所以在安装的时候, 请注意切换到一个合适的路径吧.</p>\r\n<p>顺便在这里记录一下 Hexo 的常用操作</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>简写指令</th>\r\n<th>完整指令</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>hexo n &quot;标题&quot;</code></td>\r\n<td><code>hexo new</code></td>\r\n<td>创建一个 标题.md 文档在 /source/_posts 目录下</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo clean</code></td>\r\n<td></td>\r\n<td>清楚缓存</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo g</code></td>\r\n<td><code>hexo generate</code></td>\r\n<td>生成 public 下的文件</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo s</code></td>\r\n<td><code>hexo server</code></td>\r\n<td>启动 hexo 服务器, 默认在 localhost 下的 :4000 端口</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo d</code></td>\r\n<td><code>hexo deploy</code></td>\r\n<td>部署到远程服务器, 依据 _config.yml 的设置</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"接下来打算干的事\">接下来打算干的事</h2>\r\n<p>准备在该博客上发布一些好玩的东西和学习笔记.</p>\r\n<ol start=\"0\" type=\"1\">\r\n<li>[x] 更换主题, 感觉 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next主题</a> 比较好看.\r\n<ul>\r\n<li>更换主题, 将下载的主题包解压到 <code>/theme/</code> 目录下, 然后在 <code>/_config.yml</code> 中配置 <code>theme: landscape</code> 项(默认主题是 landscape) 为 <code>theme: 主题文件夹名</code> 即可.</li>\r\n</ul></li>\r\n<li>[ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\r\n<ul>\r\n<li>选择了 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">Gitalk</a></li>\r\n<li><a href=\"\">Gitalk 配置过程</a></li>\r\n</ul></li>\r\n<li>[x] {2018.7.24更新}GitHub Page 只能显示一页?\r\n<ul>\r\n<li>哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\r\n<ul>\r\n<li>问题解决了.</li>\r\n</ul></li>\r\n</ul></li>\r\n</ol>\r\n"},{"title":"Hexo配置过程","date":"2018-07-25T13:30:45.000Z","mathjax":true,"_content":"# Hexo 配置过程\n\n## 配置目标\n\n**一期目标**\n\n- [x] 启用 `tag`, `category` 等页面.\n- [x] 使用 `MathJax` 渲染 LaTeX 公式.\n- [ ] 使用 `Gitalk` 作为评论系统.\n  - [ ] 使用 [MD5](https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1) 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.\n\n**二期目标**\n\n- [ ] 在网站内保存图片等文件, 而非使用第三方图床.\n\n## 步骤\n\n### 开始使用 Hexo\n\n这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.\n\n补充说一点, 我使用的是 [NexT 主题](https://hexo.io/zh-cn/) . 在配置网站语言为简体中文的时候, 应在 Hexo 的 `_config.yml` 里配置 `language:` 为 `language: zh-CN`. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件...\n\n## 启用 \"tags\" 页面\n\n要使用 tags 页面, 先得确保 **主题** 的 _config.yml 文件里 `menu:` 项中 `tags` 选项被启用. 例如\n\n```yml\nmenu:\n  home: / || home\n  #about: /about/ || user\n  tags: /tags/ || tags\n  #categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n\n`||` 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.\n\n然后, 需要创建一个 \"Page\" 类型的页面.\n\n```sh\nhexo new page \"tags\"\n```\n\n之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:\n\n```markdown\n---\ntitle: tags\ndate: 2018-07-25 21:21:00\n---\n```\n\n需要稍微修改一下, \n\n```markdown\n---\ntitle: 标签\ndate: 2018-07-25 21:21:00\ntype: \"tags\"\ncomments: false\n---\n```\n\n`conmments: false` 表示在此页面禁用评论功能.\n\n在发布的博文的 front-matter 中使用\n\n```yml\n---\ntags:\n  - tagname1\n  - tagname2\n  ...\n---\n```\n\n来给文章添加标签.\n\n其他同理.\n\n### 启用 MathJax \n\n根据 NexT 提供的 [文档](https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md)\n\n$$ Hello \\; MathJax $$\n\n### 启用 Gitalk\n\nTODO:\n\n## 参考资料\n\n[NexT 已适配MathJax](https://theme-next.iissnan.com/third-party-services.html#mathjax)\n\n[NexT 添加Gitalk](https://github.com/gitalk/gitalk/blob/master/readme-cn.md)\n\n[NexT 官网](https://hexo.io/zh-cn/)\n\n[NexT 使用文档](https://theme-next.iissnan.com/)\n\n[Gitalk 官网](https://gitalk.github.io/)\n","source":"_posts/hexo配置过程.md","raw":"---\ntitle: Hexo配置过程\ndate: 2018-07-25 21:30:45\nmathjax: true\ntags:\n  - Hexo\ncategories:\n  - 网站\n---\n# Hexo 配置过程\n\n## 配置目标\n\n**一期目标**\n\n- [x] 启用 `tag`, `category` 等页面.\n- [x] 使用 `MathJax` 渲染 LaTeX 公式.\n- [ ] 使用 `Gitalk` 作为评论系统.\n  - [ ] 使用 [MD5](https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1) 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.\n\n**二期目标**\n\n- [ ] 在网站内保存图片等文件, 而非使用第三方图床.\n\n## 步骤\n\n### 开始使用 Hexo\n\n这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.\n\n补充说一点, 我使用的是 [NexT 主题](https://hexo.io/zh-cn/) . 在配置网站语言为简体中文的时候, 应在 Hexo 的 `_config.yml` 里配置 `language:` 为 `language: zh-CN`. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件...\n\n## 启用 \"tags\" 页面\n\n要使用 tags 页面, 先得确保 **主题** 的 _config.yml 文件里 `menu:` 项中 `tags` 选项被启用. 例如\n\n```yml\nmenu:\n  home: / || home\n  #about: /about/ || user\n  tags: /tags/ || tags\n  #categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n\n`||` 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.\n\n然后, 需要创建一个 \"Page\" 类型的页面.\n\n```sh\nhexo new page \"tags\"\n```\n\n之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:\n\n```markdown\n---\ntitle: tags\ndate: 2018-07-25 21:21:00\n---\n```\n\n需要稍微修改一下, \n\n```markdown\n---\ntitle: 标签\ndate: 2018-07-25 21:21:00\ntype: \"tags\"\ncomments: false\n---\n```\n\n`conmments: false` 表示在此页面禁用评论功能.\n\n在发布的博文的 front-matter 中使用\n\n```yml\n---\ntags:\n  - tagname1\n  - tagname2\n  ...\n---\n```\n\n来给文章添加标签.\n\n其他同理.\n\n### 启用 MathJax \n\n根据 NexT 提供的 [文档](https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md)\n\n$$ Hello \\; MathJax $$\n\n### 启用 Gitalk\n\nTODO:\n\n## 参考资料\n\n[NexT 已适配MathJax](https://theme-next.iissnan.com/third-party-services.html#mathjax)\n\n[NexT 添加Gitalk](https://github.com/gitalk/gitalk/blob/master/readme-cn.md)\n\n[NexT 官网](https://hexo.io/zh-cn/)\n\n[NexT 使用文档](https://theme-next.iissnan.com/)\n\n[Gitalk 官网](https://gitalk.github.io/)\n","slug":"hexo配置过程","published":1,"updated":"2018-08-19T14:59:29.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqma000t10lk0knoez13","content":"<h1 id=\"hexo-配置过程\">Hexo 配置过程</h1>\r\n<h2 id=\"配置目标\">配置目标</h2>\r\n<p><strong>一期目标</strong></p>\r\n<ul>\r\n<li>[x] 启用 <code>tag</code>, <code>category</code> 等页面.</li>\r\n<li>[x] 使用 <code>MathJax</code> 渲染 LaTeX 公式.</li>\r\n<li>[ ] 使用 <code>Gitalk</code> 作为评论系统.\r\n<ul>\r\n<li>[ ] 使用 <a href=\"https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1\" target=\"_blank\" rel=\"noopener\">MD5</a> 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.</li>\r\n</ul></li>\r\n</ul>\r\n<p><strong>二期目标</strong></p>\r\n<ul>\r\n<li>[ ] 在网站内保存图片等文件, 而非使用第三方图床.</li>\r\n</ul>\r\n<h2 id=\"步骤\">步骤</h2>\r\n<h3 id=\"开始使用-hexo\">开始使用 Hexo</h3>\r\n<p>这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:</p>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.</p>\r\n<p>补充说一点, 我使用的是 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 主题</a> . 在配置网站语言为简体中文的时候, 应在 Hexo 的 <code>_config.yml</code> 里配置 <code>language:</code> 为 <code>language: zh-CN</code>. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件…</p>\r\n<h2 id=\"启用-tags-页面\">启用 “tags” 页面</h2>\r\n<p>要使用 tags 页面, 先得确保 <strong>主题</strong> 的 _config.yml 文件里 <code>menu:</code> 项中 <code>tags</code> 选项被启用. 例如</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\r\n<p><code>||</code> 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.</p>\r\n<p>然后, 需要创建一个 “Page” 类型的页面.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure>\r\n<p>之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p>需要稍微修改一下,</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p><code>conmments: false</code> 表示在此页面禁用评论功能.</p>\r\n<p>在发布的博文的 front-matter 中使用</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname1</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname2</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\r\n<p>来给文章添加标签.</p>\r\n<p>其他同理.</p>\r\n<h3 id=\"启用-mathjax\">启用 MathJax</h3>\r\n<p>根据 NexT 提供的 <a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md\" target=\"_blank\" rel=\"noopener\">文档</a></p>\r\n<p><span class=\"math display\">\\[ Hello \\; MathJax \\]</span></p>\r\n<h3 id=\"启用-gitalk\">启用 Gitalk</h3>\r\n<p>TODO:</p>\r\n<h2 id=\"参考资料\">参考资料</h2>\r\n<p><a href=\"https://theme-next.iissnan.com/third-party-services.html#mathjax\" target=\"_blank\" rel=\"noopener\">NexT 已适配MathJax</a></p>\r\n<p><a href=\"https://github.com/gitalk/gitalk/blob/master/readme-cn.md\" target=\"_blank\" rel=\"noopener\">NexT 添加Gitalk</a></p>\r\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 官网</a></p>\r\n<p><a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a></p>\r\n<p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk 官网</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hexo-配置过程\">Hexo 配置过程</h1>\r\n<h2 id=\"配置目标\">配置目标</h2>\r\n<p><strong>一期目标</strong></p>\r\n<ul>\r\n<li>[x] 启用 <code>tag</code>, <code>category</code> 等页面.</li>\r\n<li>[x] 使用 <code>MathJax</code> 渲染 LaTeX 公式.</li>\r\n<li>[ ] 使用 <code>Gitalk</code> 作为评论系统.\r\n<ul>\r\n<li>[ ] 使用 <a href=\"https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1\" target=\"_blank\" rel=\"noopener\">MD5</a> 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.</li>\r\n</ul></li>\r\n</ul>\r\n<p><strong>二期目标</strong></p>\r\n<ul>\r\n<li>[ ] 在网站内保存图片等文件, 而非使用第三方图床.</li>\r\n</ul>\r\n<h2 id=\"步骤\">步骤</h2>\r\n<h3 id=\"开始使用-hexo\">开始使用 Hexo</h3>\r\n<p>这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:</p>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.</p>\r\n<p>补充说一点, 我使用的是 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 主题</a> . 在配置网站语言为简体中文的时候, 应在 Hexo 的 <code>_config.yml</code> 里配置 <code>language:</code> 为 <code>language: zh-CN</code>. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件…</p>\r\n<h2 id=\"启用-tags-页面\">启用 “tags” 页面</h2>\r\n<p>要使用 tags 页面, 先得确保 <strong>主题</strong> 的 _config.yml 文件里 <code>menu:</code> 项中 <code>tags</code> 选项被启用. 例如</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\r\n<p><code>||</code> 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.</p>\r\n<p>然后, 需要创建一个 “Page” 类型的页面.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure>\r\n<p>之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p>需要稍微修改一下,</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p><code>conmments: false</code> 表示在此页面禁用评论功能.</p>\r\n<p>在发布的博文的 front-matter 中使用</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname1</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname2</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\r\n<p>来给文章添加标签.</p>\r\n<p>其他同理.</p>\r\n<h3 id=\"启用-mathjax\">启用 MathJax</h3>\r\n<p>根据 NexT 提供的 <a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md\" target=\"_blank\" rel=\"noopener\">文档</a></p>\r\n<p><span class=\"math display\">\\[ Hello \\; MathJax \\]</span></p>\r\n<h3 id=\"启用-gitalk\">启用 Gitalk</h3>\r\n<p>TODO:</p>\r\n<h2 id=\"参考资料\">参考资料</h2>\r\n<p><a href=\"https://theme-next.iissnan.com/third-party-services.html#mathjax\" target=\"_blank\" rel=\"noopener\">NexT 已适配MathJax</a></p>\r\n<p><a href=\"https://github.com/gitalk/gitalk/blob/master/readme-cn.md\" target=\"_blank\" rel=\"noopener\">NexT 添加Gitalk</a></p>\r\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 官网</a></p>\r\n<p><a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a></p>\r\n<p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk 官网</a></p>\r\n"},{"title":"PowerShell创建链接文件","date":"2018-07-24T13:01:59.000Z","_content":"# PowerShell 创建链接文件\n\nLinux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 \"快捷方式\" 了?\n\n事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.\n\nWindows 下链接文件的格式可以有:\n\n- 软连接 SymbolicLink\n- 硬链接 HardLink\n- \"Junction\"\n\n## 创建链接文件的 PowerShell 命令\n\n**创建链接文件需要管理员权限** .\n\n创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target #创建符号链接 D:\\Link -> D:\\Target\nNew-Item -ItemType HardLink -Path D:\\Link -Value D:\\Target #创建硬链接 D:\\Link -> D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录\nNew-Item -ItemType Junction -Path D:\\Link -Value D:\\Target #创建 Junction D:\\Link -> D:\\Target\n```\n\n在创建链接时, 可以使用 `-Force` 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 \"NewItemError, resource exists\", 并不会创建该链接. 那么, 就得使用 `-Force` 参数强行创建, 覆盖已经存在的文件或子目录.\n\n## 移除/修改链接文件\n\n我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我\"将删除其下所有子项, 是否继续?\". 吓得我赶紧按下 N + 回车, 逃之夭夭.\n\n我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡\n\n幸好经 [StackOverflow 上的这个回答](https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows) 提示, 我想到了一个变通方案.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value 'D:\\$Recycle.Bin' -Force\n```\n\n我将该链接重新指向了一个空目录, 然后把它 `Remove-Item` 掉了, 之后重新创建了一个新的链接.\n\n刚才在知乎提了一个问, [轮子哥回答](https://www.zhihu.com/question/286730188/answer/451072733) 说可以用 cmd 的 `rmdir` 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.\n\nPowerShell 到底有没有此功能? 在 [PowerShell在GitHub上的一个issue](https://github.com/powershell/powershell/issues/621) 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务...\n\n```powershell\nPS D:\\> Remove-Item .\\LinkTest\\\n\n确认\nD:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。\n所在位置 行:1 字符: 1\n+ Remove-Item .\\LinkTest\\\n+ ~~~~~~~~~~~~~~\n    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove\n   -Item], IOException\n    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.\n   RemoveItemCommand\n\nPS D:\\> Remove-Item .\\LinkTest -Force\n\n确认\nD:\\LinkTest 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : 请求中指定的标记与重分析点中存在的标记不匹配。\n所在位置 行:1 字符: 1\n+ rm .\\LinkTest -Force\n+ ~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception\n    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P\n   owerShell.Commands.RemoveItemCommand\n```\n\n出现了 \"请求中指定的标记与重分析点中存在的标记不匹配\" 的问题... 等我搞明白这句话用英语怎么说就去 [GitHub](https://github.com/powershell/powershell/issues) 提 issue 去...\n\n知乎上 [Gee Law的回答](https://www.zhihu.com/question/286730188/answer/451095023) 提出的方法:\n\n```powershell\n(Get-Item D:\\LinkDir).Delete($false) # 无参数也行\n```\n\n调用 `DirectotyInfo.Delete()` 方法进行删除. 实测有效.\n\n## 创建链接的用处\n\n0. 区分对待同一根目录下的不同子目录使用 OneDrive 的策略.\n    OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.\n\n## 小结\n\n0. 使用 `New-Item -ItemType xxx -Path Link -Value Target` 创建链接.\n0. 使用 `-Force` 参数使创建的链接覆盖同名文件/目录.\n0. 使用 `(Get-Item .\\Link).Delete()` 方法删除链接, 而不影响被链接的文件.","source":"_posts/powershell创建链接文件.md","raw":"---\ntitle: PowerShell创建链接文件\ndate: 2018-07-24 21:01:59\ntags:\n  - PowerShell\ncategories:\n  - 日常\n---\n# PowerShell 创建链接文件\n\nLinux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 \"快捷方式\" 了?\n\n事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.\n\nWindows 下链接文件的格式可以有:\n\n- 软连接 SymbolicLink\n- 硬链接 HardLink\n- \"Junction\"\n\n## 创建链接文件的 PowerShell 命令\n\n**创建链接文件需要管理员权限** .\n\n创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target #创建符号链接 D:\\Link -> D:\\Target\nNew-Item -ItemType HardLink -Path D:\\Link -Value D:\\Target #创建硬链接 D:\\Link -> D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录\nNew-Item -ItemType Junction -Path D:\\Link -Value D:\\Target #创建 Junction D:\\Link -> D:\\Target\n```\n\n在创建链接时, 可以使用 `-Force` 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 \"NewItemError, resource exists\", 并不会创建该链接. 那么, 就得使用 `-Force` 参数强行创建, 覆盖已经存在的文件或子目录.\n\n## 移除/修改链接文件\n\n我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我\"将删除其下所有子项, 是否继续?\". 吓得我赶紧按下 N + 回车, 逃之夭夭.\n\n我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡\n\n幸好经 [StackOverflow 上的这个回答](https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows) 提示, 我想到了一个变通方案.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value 'D:\\$Recycle.Bin' -Force\n```\n\n我将该链接重新指向了一个空目录, 然后把它 `Remove-Item` 掉了, 之后重新创建了一个新的链接.\n\n刚才在知乎提了一个问, [轮子哥回答](https://www.zhihu.com/question/286730188/answer/451072733) 说可以用 cmd 的 `rmdir` 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.\n\nPowerShell 到底有没有此功能? 在 [PowerShell在GitHub上的一个issue](https://github.com/powershell/powershell/issues/621) 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务...\n\n```powershell\nPS D:\\> Remove-Item .\\LinkTest\\\n\n确认\nD:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。\n所在位置 行:1 字符: 1\n+ Remove-Item .\\LinkTest\\\n+ ~~~~~~~~~~~~~~\n    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove\n   -Item], IOException\n    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.\n   RemoveItemCommand\n\nPS D:\\> Remove-Item .\\LinkTest -Force\n\n确认\nD:\\LinkTest 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : 请求中指定的标记与重分析点中存在的标记不匹配。\n所在位置 行:1 字符: 1\n+ rm .\\LinkTest -Force\n+ ~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception\n    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P\n   owerShell.Commands.RemoveItemCommand\n```\n\n出现了 \"请求中指定的标记与重分析点中存在的标记不匹配\" 的问题... 等我搞明白这句话用英语怎么说就去 [GitHub](https://github.com/powershell/powershell/issues) 提 issue 去...\n\n知乎上 [Gee Law的回答](https://www.zhihu.com/question/286730188/answer/451095023) 提出的方法:\n\n```powershell\n(Get-Item D:\\LinkDir).Delete($false) # 无参数也行\n```\n\n调用 `DirectotyInfo.Delete()` 方法进行删除. 实测有效.\n\n## 创建链接的用处\n\n0. 区分对待同一根目录下的不同子目录使用 OneDrive 的策略.\n    OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.\n\n## 小结\n\n0. 使用 `New-Item -ItemType xxx -Path Link -Value Target` 创建链接.\n0. 使用 `-Force` 参数使创建的链接覆盖同名文件/目录.\n0. 使用 `(Get-Item .\\Link).Delete()` 方法删除链接, 而不影响被链接的文件.","slug":"powershell创建链接文件","published":1,"updated":"2018-07-26T07:27:08.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqmb000w10lkzvwoi1vh","content":"<h1 id=\"powershell-创建链接文件\">PowerShell 创建链接文件</h1>\r\n<p>Linux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 “快捷方式” 了?</p>\r\n<p>事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.</p>\r\n<p>Windows 下链接文件的格式可以有:</p>\r\n<ul>\r\n<li>软连接 SymbolicLink</li>\r\n<li>硬链接 HardLink</li>\r\n<li>“Junction”</li>\r\n</ul>\r\n<h2 id=\"创建链接文件的-powershell-命令\">创建链接文件的 PowerShell 命令</h2>\r\n<p><strong>创建链接文件需要管理员权限</strong> .</p>\r\n<p>创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建符号链接 D:\\Link -&gt; D:\\Target</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType HardLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建硬链接 D:\\Link -&gt; D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType Junction -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建 Junction D:\\Link -&gt; D:\\Target</span></span><br></pre></td></tr></table></figure>\r\n<p>在创建链接时, 可以使用 <code>-Force</code> 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 “NewItemError, resource exists”, 并不会创建该链接. 那么, 就得使用 <code>-Force</code> 参数强行创建, 覆盖已经存在的文件或子目录.</p>\r\n<h2 id=\"移除修改链接文件\">移除/修改链接文件</h2>\r\n<p>我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我“将删除其下所有子项, 是否继续?”. 吓得我赶紧按下 N + 回车, 逃之夭夭.</p>\r\n<p>我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡</p>\r\n<p>幸好经 <a href=\"https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows\" target=\"_blank\" rel=\"noopener\">StackOverflow 上的这个回答</a> 提示, 我想到了一个变通方案.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value <span class=\"string\">'D:\\$Recycle.Bin'</span> -Force</span><br></pre></td></tr></table></figure>\r\n<p>我将该链接重新指向了一个空目录, 然后把它 <code>Remove-Item</code> 掉了, 之后重新创建了一个新的链接.</p>\r\n<p>刚才在知乎提了一个问, <a href=\"https://www.zhihu.com/question/286730188/answer/451072733\" target=\"_blank\" rel=\"noopener\">轮子哥回答</a> 说可以用 cmd 的 <code>rmdir</code> 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.</p>\r\n<p>PowerShell 到底有没有此功能? 在 <a href=\"https://github.com/powershell/powershell/issues/621\" target=\"_blank\" rel=\"noopener\">PowerShell在GitHub上的一个issue</a> 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务…</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove</span><br><span class=\"line\">   -Item], IOException</span><br><span class=\"line\">    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.</span><br><span class=\"line\">   RemoveItemCommand</span><br><span class=\"line\"></span><br><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest -Force</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : 请求中指定的标记与重分析点中存在的标记不匹配。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ rm .\\LinkTest -Force</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception</span><br><span class=\"line\">    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P</span><br><span class=\"line\">   owerShell.Commands.RemoveItemCommand</span><br></pre></td></tr></table></figure>\r\n<p>出现了 “请求中指定的标记与重分析点中存在的标记不匹配” 的问题… 等我搞明白这句话用英语怎么说就去 <a href=\"https://github.com/powershell/powershell/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a> 提 issue 去…</p>\r\n<p>知乎上 <a href=\"https://www.zhihu.com/question/286730188/answer/451095023\" target=\"_blank\" rel=\"noopener\">Gee Law的回答</a> 提出的方法:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">Get-Item</span> D:\\LinkDir).Delete(<span class=\"literal\">$false</span>) <span class=\"comment\"># 无参数也行</span></span><br></pre></td></tr></table></figure>\r\n<p>调用 <code>DirectotyInfo.Delete()</code> 方法进行删除. 实测有效.</p>\r\n<h2 id=\"创建链接的用处\">创建链接的用处</h2>\r\n<ol start=\"0\" type=\"1\">\r\n<li>区分对待同一根目录下的不同子目录使用 OneDrive 的策略. OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.</li>\r\n</ol>\r\n<h2 id=\"小结\">小结</h2>\r\n<ol start=\"0\" type=\"1\">\r\n<li>使用 <code>New-Item -ItemType xxx -Path Link -Value Target</code> 创建链接.</li>\r\n<li>使用 <code>-Force</code> 参数使创建的链接覆盖同名文件/目录.</li>\r\n<li>使用 <code>(Get-Item .\\Link).Delete()</code> 方法删除链接, 而不影响被链接的文件.</li>\r\n</ol>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"powershell-创建链接文件\">PowerShell 创建链接文件</h1>\r\n<p>Linux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 “快捷方式” 了?</p>\r\n<p>事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.</p>\r\n<p>Windows 下链接文件的格式可以有:</p>\r\n<ul>\r\n<li>软连接 SymbolicLink</li>\r\n<li>硬链接 HardLink</li>\r\n<li>“Junction”</li>\r\n</ul>\r\n<h2 id=\"创建链接文件的-powershell-命令\">创建链接文件的 PowerShell 命令</h2>\r\n<p><strong>创建链接文件需要管理员权限</strong> .</p>\r\n<p>创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建符号链接 D:\\Link -&gt; D:\\Target</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType HardLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建硬链接 D:\\Link -&gt; D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType Junction -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建 Junction D:\\Link -&gt; D:\\Target</span></span><br></pre></td></tr></table></figure>\r\n<p>在创建链接时, 可以使用 <code>-Force</code> 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 “NewItemError, resource exists”, 并不会创建该链接. 那么, 就得使用 <code>-Force</code> 参数强行创建, 覆盖已经存在的文件或子目录.</p>\r\n<h2 id=\"移除修改链接文件\">移除/修改链接文件</h2>\r\n<p>我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我“将删除其下所有子项, 是否继续?”. 吓得我赶紧按下 N + 回车, 逃之夭夭.</p>\r\n<p>我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡</p>\r\n<p>幸好经 <a href=\"https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows\" target=\"_blank\" rel=\"noopener\">StackOverflow 上的这个回答</a> 提示, 我想到了一个变通方案.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value <span class=\"string\">'D:\\$Recycle.Bin'</span> -Force</span><br></pre></td></tr></table></figure>\r\n<p>我将该链接重新指向了一个空目录, 然后把它 <code>Remove-Item</code> 掉了, 之后重新创建了一个新的链接.</p>\r\n<p>刚才在知乎提了一个问, <a href=\"https://www.zhihu.com/question/286730188/answer/451072733\" target=\"_blank\" rel=\"noopener\">轮子哥回答</a> 说可以用 cmd 的 <code>rmdir</code> 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.</p>\r\n<p>PowerShell 到底有没有此功能? 在 <a href=\"https://github.com/powershell/powershell/issues/621\" target=\"_blank\" rel=\"noopener\">PowerShell在GitHub上的一个issue</a> 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务…</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove</span><br><span class=\"line\">   -Item], IOException</span><br><span class=\"line\">    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.</span><br><span class=\"line\">   RemoveItemCommand</span><br><span class=\"line\"></span><br><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest -Force</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : 请求中指定的标记与重分析点中存在的标记不匹配。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ rm .\\LinkTest -Force</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception</span><br><span class=\"line\">    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P</span><br><span class=\"line\">   owerShell.Commands.RemoveItemCommand</span><br></pre></td></tr></table></figure>\r\n<p>出现了 “请求中指定的标记与重分析点中存在的标记不匹配” 的问题… 等我搞明白这句话用英语怎么说就去 <a href=\"https://github.com/powershell/powershell/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a> 提 issue 去…</p>\r\n<p>知乎上 <a href=\"https://www.zhihu.com/question/286730188/answer/451095023\" target=\"_blank\" rel=\"noopener\">Gee Law的回答</a> 提出的方法:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">Get-Item</span> D:\\LinkDir).Delete(<span class=\"literal\">$false</span>) <span class=\"comment\"># 无参数也行</span></span><br></pre></td></tr></table></figure>\r\n<p>调用 <code>DirectotyInfo.Delete()</code> 方法进行删除. 实测有效.</p>\r\n<h2 id=\"创建链接的用处\">创建链接的用处</h2>\r\n<ol start=\"0\" type=\"1\">\r\n<li>区分对待同一根目录下的不同子目录使用 OneDrive 的策略. OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.</li>\r\n</ol>\r\n<h2 id=\"小结\">小结</h2>\r\n<ol start=\"0\" type=\"1\">\r\n<li>使用 <code>New-Item -ItemType xxx -Path Link -Value Target</code> 创建链接.</li>\r\n<li>使用 <code>-Force</code> 参数使创建的链接覆盖同名文件/目录.</li>\r\n<li>使用 <code>(Get-Item .\\Link).Delete()</code> 方法删除链接, 而不影响被链接的文件.</li>\r\n</ol>\r\n"},{"title":"[PyNote]-0-Python基础认识","mathjax":false,"date":"2018-07-26T07:29:44.000Z","_content":"\n# Python 基础认识\n\n## 配置 Python 开发环境\n\n先来了解一下怎么安装 Python 吧.\n\n对于 Windows 系统, 安装 Python 可以去 [Python 官网](http://www.python.org/) 下载官方提供的 `Windows x86-64 executable installer` 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .\n\n下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 `C:\\Python` . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题...\n\n安装时选择 \"add Python to PATH\" 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. `C:\\Python` 和 `C:\\Python\\Scripts` 都需要添加到环境变量 `PATH` 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.\n\n安装之后, 可以使用\n\n```powershell\npython -V # 或 python --version\npip -v\n```\n\n来确认一下 `C:\\Python` 和 `C:\\Python\\Scripts` 是否已经配置好了.\n\n之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度...\n\n依照着 [清华大学镜像的帮助文档](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/) 将 pip 的软件源更换为清华镜像. \n\n> **设为默认**\n> 修改 %APPDATA%\\\\pip\\\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如\n> ```ini\n> [global]\n> index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n> ```\n> pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。\n\n不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 `%AppData%\\Roaming\\pip\\pip.ini` \n\n配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.\n\n- 下载 [pylint](https://www.pylint.org/#install)\n- 下载 [autopep8](https://github.com/hhatto/autopep8) , 该程序会按照 [pep8](https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html) 代码规范格式化文档.\n  - 另一种代码格式化程序的选择是 [yapf](https://github.com/google/yapf) , 按 [Google 的标准](http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/) .\n\n```powershell\npython -m pip install pylint\npython -m pip install autopep8\n```\n\n搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.\n\n## Python 的脚本模式和交互式模式\n\nPython 安装好了之后, 可以用两种方式使用 Python\n\n0. 交互式\n  要进入这种模式, 只需要在终端中输入 `Python` 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 `print()` 函数. 要退出此环境, 需要执行 `exit()` 函数.\n0. 脚本模式\n  这个模式就是编写一个 Python 脚本, 文件需要以 `.py` 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 `print()` 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 `exit()` 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 `exit(xxx)` 函数.\n\n## Python 脚本的源代码是怎样的\n\n编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好.\n下面以一个 \"Hello World\" 程序介绍一下 Python 的源代码一般长什么样吧.\n\n```py\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n\"\"\"\n这是一条行间注释\n可以换行, 写很多行\n一般会用于写文档, \n比如在一个自定义函数下面说明函数的功能和参数的含义\n\"\"\"\nimport os\nfor i in range(1,10):\n    print(\"Hello World\") # 使用 Python 内建函数 print()\nos.system(\"echo Hello World\") # 使用 os 模块的 system() 函数调用外部命令 echo Hello World.\n```\n- Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:\n  - 第一行: `#! /usr/bin/python3` 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 `#! /bin/bash`. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 `./filename` 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 `python .\\filename.py`.\n  - 第二行: `# -*- coding: utf-8 -*-` 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧...\n- Python 用 `\"\"\" 多行注释 \"\"\"` 和 `# 单行注释` 注释.\n- Python 可以用 import 语句导入一个模块, 比如这里导入的 `os` 模块. 导入之后, 使用 `.` 对象运算符从模块中使用该模块定义的 `system()` 函数.\n- Python 的控制结构后面会用 `:` 冒号.\n- Python 以相同的 **缩进** 标识一个语句块.\n\n## 小结\n\n安装 Python:\n\n- 下载安装包并安装  ->\n- 配置环境变量      ->\n- 配置 pip 软件源   ->\n- 通过 pip 安装 pylint 和 代码格式化程序\n\nPython 代码的基本结构:\n\n- (可选) 特殊注释, 前两行\n- 语句\n\n了解了 Python 的基本概念之后, 就先学习一下 Python 的 [运算符](/2018/07/pynote-python运算符/) 和 [控制结构](/2018/07/pynote-python控制结构) 吧. 先把 Python 用起来.\n\n- 数据结构\n  - 数字\n    - 整数\n    - 浮点数\n    - 复数\n  - 字符串\n  - 集合\n    - 列表\n    - 元组\n    - 字典\n- 运算符\n  - 算术运算符\n  - 关系运算符\n  - 赋值运算符\n  - 逻辑运算符\n  - 位运算符\n  - 成员运算符\n  - 身份运算符\n- 控制结构\n  - 分支\n  - 循环","source":"_posts/pynote-0-python基本认识.md","raw":"---\ntitle: '[PyNote]-0-Python基础认识'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-26 15:29:44\n---\n\n# Python 基础认识\n\n## 配置 Python 开发环境\n\n先来了解一下怎么安装 Python 吧.\n\n对于 Windows 系统, 安装 Python 可以去 [Python 官网](http://www.python.org/) 下载官方提供的 `Windows x86-64 executable installer` 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .\n\n下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 `C:\\Python` . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题...\n\n安装时选择 \"add Python to PATH\" 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. `C:\\Python` 和 `C:\\Python\\Scripts` 都需要添加到环境变量 `PATH` 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.\n\n安装之后, 可以使用\n\n```powershell\npython -V # 或 python --version\npip -v\n```\n\n来确认一下 `C:\\Python` 和 `C:\\Python\\Scripts` 是否已经配置好了.\n\n之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度...\n\n依照着 [清华大学镜像的帮助文档](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/) 将 pip 的软件源更换为清华镜像. \n\n> **设为默认**\n> 修改 %APPDATA%\\\\pip\\\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如\n> ```ini\n> [global]\n> index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n> ```\n> pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。\n\n不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 `%AppData%\\Roaming\\pip\\pip.ini` \n\n配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.\n\n- 下载 [pylint](https://www.pylint.org/#install)\n- 下载 [autopep8](https://github.com/hhatto/autopep8) , 该程序会按照 [pep8](https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html) 代码规范格式化文档.\n  - 另一种代码格式化程序的选择是 [yapf](https://github.com/google/yapf) , 按 [Google 的标准](http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/) .\n\n```powershell\npython -m pip install pylint\npython -m pip install autopep8\n```\n\n搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.\n\n## Python 的脚本模式和交互式模式\n\nPython 安装好了之后, 可以用两种方式使用 Python\n\n0. 交互式\n  要进入这种模式, 只需要在终端中输入 `Python` 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 `print()` 函数. 要退出此环境, 需要执行 `exit()` 函数.\n0. 脚本模式\n  这个模式就是编写一个 Python 脚本, 文件需要以 `.py` 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 `print()` 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 `exit()` 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 `exit(xxx)` 函数.\n\n## Python 脚本的源代码是怎样的\n\n编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好.\n下面以一个 \"Hello World\" 程序介绍一下 Python 的源代码一般长什么样吧.\n\n```py\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n\"\"\"\n这是一条行间注释\n可以换行, 写很多行\n一般会用于写文档, \n比如在一个自定义函数下面说明函数的功能和参数的含义\n\"\"\"\nimport os\nfor i in range(1,10):\n    print(\"Hello World\") # 使用 Python 内建函数 print()\nos.system(\"echo Hello World\") # 使用 os 模块的 system() 函数调用外部命令 echo Hello World.\n```\n- Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:\n  - 第一行: `#! /usr/bin/python3` 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 `#! /bin/bash`. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 `./filename` 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 `python .\\filename.py`.\n  - 第二行: `# -*- coding: utf-8 -*-` 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧...\n- Python 用 `\"\"\" 多行注释 \"\"\"` 和 `# 单行注释` 注释.\n- Python 可以用 import 语句导入一个模块, 比如这里导入的 `os` 模块. 导入之后, 使用 `.` 对象运算符从模块中使用该模块定义的 `system()` 函数.\n- Python 的控制结构后面会用 `:` 冒号.\n- Python 以相同的 **缩进** 标识一个语句块.\n\n## 小结\n\n安装 Python:\n\n- 下载安装包并安装  ->\n- 配置环境变量      ->\n- 配置 pip 软件源   ->\n- 通过 pip 安装 pylint 和 代码格式化程序\n\nPython 代码的基本结构:\n\n- (可选) 特殊注释, 前两行\n- 语句\n\n了解了 Python 的基本概念之后, 就先学习一下 Python 的 [运算符](/2018/07/pynote-python运算符/) 和 [控制结构](/2018/07/pynote-python控制结构) 吧. 先把 Python 用起来.\n\n- 数据结构\n  - 数字\n    - 整数\n    - 浮点数\n    - 复数\n  - 字符串\n  - 集合\n    - 列表\n    - 元组\n    - 字典\n- 运算符\n  - 算术运算符\n  - 关系运算符\n  - 赋值运算符\n  - 逻辑运算符\n  - 位运算符\n  - 成员运算符\n  - 身份运算符\n- 控制结构\n  - 分支\n  - 循环","slug":"pynote-0-python基本认识","published":1,"updated":"2018-08-19T14:56:24.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqmd000z10lkx4twuvlk","content":"<h1 id=\"python-基础认识\">Python 基础认识</h1>\r\n<h2 id=\"配置-python-开发环境\">配置 Python 开发环境</h2>\r\n<p>先来了解一下怎么安装 Python 吧.</p>\r\n<p>对于 Windows 系统, 安装 Python 可以去 <a href=\"http://www.python.org/\" target=\"_blank\" rel=\"noopener\">Python 官网</a> 下载官方提供的 <code>Windows x86-64 executable installer</code> 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .</p>\r\n<p>下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 <code>C:\\Python</code> . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题…</p>\r\n<p>安装时选择 “add Python to PATH” 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 都需要添加到环境变量 <code>PATH</code> 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.</p>\r\n<p>安装之后, 可以使用</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V <span class=\"comment\"># 或 python --version</span></span><br><span class=\"line\">pip -v</span><br></pre></td></tr></table></figure>\r\n<p>来确认一下 <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 是否已经配置好了.</p>\r\n<p>之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度…</p>\r\n<p>依照着 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\" target=\"_blank\" rel=\"noopener\">清华大学镜像的帮助文档</a> 将 pip 的软件源更换为清华镜像.</p>\r\n<blockquote>\r\n<p><strong>设为默认</strong> 修改 %APPDATA%\\pip\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如 <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [global]</span><br><span class=\"line\">&gt; index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\r\n</blockquote>\r\n<blockquote>\r\n<p>pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。</p>\r\n</blockquote>\r\n<p>不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 <code>%AppData%\\Roaming\\pip\\pip.ini</code></p>\r\n<p>配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.</p>\r\n<ul>\r\n<li>下载 <a href=\"https://www.pylint.org/#install\" target=\"_blank\" rel=\"noopener\">pylint</a></li>\r\n<li>下载 <a href=\"https://github.com/hhatto/autopep8\" target=\"_blank\" rel=\"noopener\">autopep8</a> , 该程序会按照 <a href=\"https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html\" target=\"_blank\" rel=\"noopener\">pep8</a> 代码规范格式化文档.\r\n<ul>\r\n<li>另一种代码格式化程序的选择是 <a href=\"https://github.com/google/yapf\" target=\"_blank\" rel=\"noopener\">yapf</a> , 按 <a href=\"http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/\" target=\"_blank\" rel=\"noopener\">Google 的标准</a> .</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install pylint</span><br><span class=\"line\">python -m pip install autopep8</span><br></pre></td></tr></table></figure>\r\n<p>搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.</p>\r\n<h2 id=\"python-的脚本模式和交互式模式\">Python 的脚本模式和交互式模式</h2>\r\n<p>Python 安装好了之后, 可以用两种方式使用 Python</p>\r\n<ol start=\"0\" type=\"1\">\r\n<li>交互式 要进入这种模式, 只需要在终端中输入 <code>Python</code> 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 <code>print()</code> 函数. 要退出此环境, 需要执行 <code>exit()</code> 函数.</li>\r\n<li>脚本模式 这个模式就是编写一个 Python 脚本, 文件需要以 <code>.py</code> 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 <code>print()</code> 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 <code>exit()</code> 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 <code>exit(xxx)</code> 函数.</li>\r\n</ol>\r\n<h2 id=\"python-脚本的源代码是怎样的\">Python 脚本的源代码是怎样的</h2>\r\n<p>编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好. 下面以一个 “Hello World” 程序介绍一下 Python 的源代码一般长什么样吧.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">这是一条行间注释</span></span><br><span class=\"line\"><span class=\"string\">可以换行, 写很多行</span></span><br><span class=\"line\"><span class=\"string\">一般会用于写文档, </span></span><br><span class=\"line\"><span class=\"string\">比如在一个自定义函数下面说明函数的功能和参数的含义</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"Hello World\"</span>) <span class=\"comment\"># 使用 Python 内建函数 print()</span></span><br><span class=\"line\">os.system(<span class=\"string\">\"echo Hello World\"</span>) <span class=\"comment\"># 使用 os 模块的 system() 函数调用外部命令 echo Hello World.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:\r\n<ul>\r\n<li>第一行: <code>#! /usr/bin/python3</code> 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 <code>#! /bin/bash</code>. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 <code>./filename</code> 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 <code>python .\\filename.py</code>.</li>\r\n<li>第二行: <code># -*- coding: utf-8 -*-</code> 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧…</li>\r\n</ul></li>\r\n<li>Python 用 <code>&quot;&quot;&quot; 多行注释 &quot;&quot;&quot;</code> 和 <code># 单行注释</code> 注释.</li>\r\n<li>Python 可以用 import 语句导入一个模块, 比如这里导入的 <code>os</code> 模块. 导入之后, 使用 <code>.</code> 对象运算符从模块中使用该模块定义的 <code>system()</code> 函数.</li>\r\n<li>Python 的控制结构后面会用 <code>:</code> 冒号.</li>\r\n<li>Python 以相同的 <strong>缩进</strong> 标识一个语句块.</li>\r\n</ul>\r\n<h2 id=\"小结\">小结</h2>\r\n<p>安装 Python:</p>\r\n<ul>\r\n<li>下载安装包并安装 -&gt;</li>\r\n<li>配置环境变量 -&gt;</li>\r\n<li>配置 pip 软件源 -&gt;</li>\r\n<li>通过 pip 安装 pylint 和 代码格式化程序</li>\r\n</ul>\r\n<p>Python 代码的基本结构:</p>\r\n<ul>\r\n<li>(可选) 特殊注释, 前两行</li>\r\n<li>语句</li>\r\n</ul>\r\n<p>了解了 Python 的基本概念之后, 就先学习一下 Python 的 <a href=\"/2018/07/pynote-python运算符/\">运算符</a> 和 <a href=\"/2018/07/pynote-python控制结构\">控制结构</a> 吧. 先把 Python 用起来.</p>\r\n<ul>\r\n<li>数据结构\r\n<ul>\r\n<li>数字\r\n<ul>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n</ul></li>\r\n<li>字符串</li>\r\n<li>集合\r\n<ul>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>运算符\r\n<ul>\r\n<li>算术运算符</li>\r\n<li>关系运算符</li>\r\n<li>赋值运算符</li>\r\n<li>逻辑运算符</li>\r\n<li>位运算符</li>\r\n<li>成员运算符</li>\r\n<li>身份运算符</li>\r\n</ul></li>\r\n<li>控制结构\r\n<ul>\r\n<li>分支</li>\r\n<li>循环</li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-基础认识\">Python 基础认识</h1>\r\n<h2 id=\"配置-python-开发环境\">配置 Python 开发环境</h2>\r\n<p>先来了解一下怎么安装 Python 吧.</p>\r\n<p>对于 Windows 系统, 安装 Python 可以去 <a href=\"http://www.python.org/\" target=\"_blank\" rel=\"noopener\">Python 官网</a> 下载官方提供的 <code>Windows x86-64 executable installer</code> 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .</p>\r\n<p>下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 <code>C:\\Python</code> . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题…</p>\r\n<p>安装时选择 “add Python to PATH” 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 都需要添加到环境变量 <code>PATH</code> 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.</p>\r\n<p>安装之后, 可以使用</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V <span class=\"comment\"># 或 python --version</span></span><br><span class=\"line\">pip -v</span><br></pre></td></tr></table></figure>\r\n<p>来确认一下 <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 是否已经配置好了.</p>\r\n<p>之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度…</p>\r\n<p>依照着 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\" target=\"_blank\" rel=\"noopener\">清华大学镜像的帮助文档</a> 将 pip 的软件源更换为清华镜像.</p>\r\n<blockquote>\r\n<p><strong>设为默认</strong> 修改 %APPDATA%\\pip\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如 <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [global]</span><br><span class=\"line\">&gt; index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\r\n</blockquote>\r\n<blockquote>\r\n<p>pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。</p>\r\n</blockquote>\r\n<p>不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 <code>%AppData%\\Roaming\\pip\\pip.ini</code></p>\r\n<p>配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.</p>\r\n<ul>\r\n<li>下载 <a href=\"https://www.pylint.org/#install\" target=\"_blank\" rel=\"noopener\">pylint</a></li>\r\n<li>下载 <a href=\"https://github.com/hhatto/autopep8\" target=\"_blank\" rel=\"noopener\">autopep8</a> , 该程序会按照 <a href=\"https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html\" target=\"_blank\" rel=\"noopener\">pep8</a> 代码规范格式化文档.\r\n<ul>\r\n<li>另一种代码格式化程序的选择是 <a href=\"https://github.com/google/yapf\" target=\"_blank\" rel=\"noopener\">yapf</a> , 按 <a href=\"http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/\" target=\"_blank\" rel=\"noopener\">Google 的标准</a> .</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install pylint</span><br><span class=\"line\">python -m pip install autopep8</span><br></pre></td></tr></table></figure>\r\n<p>搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.</p>\r\n<h2 id=\"python-的脚本模式和交互式模式\">Python 的脚本模式和交互式模式</h2>\r\n<p>Python 安装好了之后, 可以用两种方式使用 Python</p>\r\n<ol start=\"0\" type=\"1\">\r\n<li>交互式 要进入这种模式, 只需要在终端中输入 <code>Python</code> 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 <code>print()</code> 函数. 要退出此环境, 需要执行 <code>exit()</code> 函数.</li>\r\n<li>脚本模式 这个模式就是编写一个 Python 脚本, 文件需要以 <code>.py</code> 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 <code>print()</code> 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 <code>exit()</code> 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 <code>exit(xxx)</code> 函数.</li>\r\n</ol>\r\n<h2 id=\"python-脚本的源代码是怎样的\">Python 脚本的源代码是怎样的</h2>\r\n<p>编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好. 下面以一个 “Hello World” 程序介绍一下 Python 的源代码一般长什么样吧.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">这是一条行间注释</span></span><br><span class=\"line\"><span class=\"string\">可以换行, 写很多行</span></span><br><span class=\"line\"><span class=\"string\">一般会用于写文档, </span></span><br><span class=\"line\"><span class=\"string\">比如在一个自定义函数下面说明函数的功能和参数的含义</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"Hello World\"</span>) <span class=\"comment\"># 使用 Python 内建函数 print()</span></span><br><span class=\"line\">os.system(<span class=\"string\">\"echo Hello World\"</span>) <span class=\"comment\"># 使用 os 模块的 system() 函数调用外部命令 echo Hello World.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:\r\n<ul>\r\n<li>第一行: <code>#! /usr/bin/python3</code> 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 <code>#! /bin/bash</code>. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 <code>./filename</code> 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 <code>python .\\filename.py</code>.</li>\r\n<li>第二行: <code># -*- coding: utf-8 -*-</code> 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧…</li>\r\n</ul></li>\r\n<li>Python 用 <code>&quot;&quot;&quot; 多行注释 &quot;&quot;&quot;</code> 和 <code># 单行注释</code> 注释.</li>\r\n<li>Python 可以用 import 语句导入一个模块, 比如这里导入的 <code>os</code> 模块. 导入之后, 使用 <code>.</code> 对象运算符从模块中使用该模块定义的 <code>system()</code> 函数.</li>\r\n<li>Python 的控制结构后面会用 <code>:</code> 冒号.</li>\r\n<li>Python 以相同的 <strong>缩进</strong> 标识一个语句块.</li>\r\n</ul>\r\n<h2 id=\"小结\">小结</h2>\r\n<p>安装 Python:</p>\r\n<ul>\r\n<li>下载安装包并安装 -&gt;</li>\r\n<li>配置环境变量 -&gt;</li>\r\n<li>配置 pip 软件源 -&gt;</li>\r\n<li>通过 pip 安装 pylint 和 代码格式化程序</li>\r\n</ul>\r\n<p>Python 代码的基本结构:</p>\r\n<ul>\r\n<li>(可选) 特殊注释, 前两行</li>\r\n<li>语句</li>\r\n</ul>\r\n<p>了解了 Python 的基本概念之后, 就先学习一下 Python 的 <a href=\"/2018/07/pynote-python运算符/\">运算符</a> 和 <a href=\"/2018/07/pynote-python控制结构\">控制结构</a> 吧. 先把 Python 用起来.</p>\r\n<ul>\r\n<li>数据结构\r\n<ul>\r\n<li>数字\r\n<ul>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n</ul></li>\r\n<li>字符串</li>\r\n<li>集合\r\n<ul>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>运算符\r\n<ul>\r\n<li>算术运算符</li>\r\n<li>关系运算符</li>\r\n<li>赋值运算符</li>\r\n<li>逻辑运算符</li>\r\n<li>位运算符</li>\r\n<li>成员运算符</li>\r\n<li>身份运算符</li>\r\n</ul></li>\r\n<li>控制结构\r\n<ul>\r\n<li>分支</li>\r\n<li>循环</li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"[PyNote]-3.1-Python中的数字与字符串","mathjax":false,"date":"2018-07-28T13:37:09.000Z","_content":"\n- 数字\n  - 整数\n  - 浮点数\n  - 复数\n- 字符串\n\n> 可以使用 Python 内建函数 `type()` 来查看一个数据的类型\n\n# 基本数据类型\n\n## 整数-int\n\nPython 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.\n\n整数的相关信息可以从 `sys.int_info` 获得\n\n```py\nimport sys\nprint(sys.int_info)\n\n# 以下是经过整理的输出信息\n\nsys.int_info(           # 长整数是普通整数的组合\n  bits_per_digit=30,    # 每个整数占用 30 个 bit. \n  sizeof_digit=4        # 每个整数占用 4 个 byte (32 bit) 的内存空间.\n  )\n```\n\nTODO: 为啥差 2 bit 呢?\n\n### 布尔数-bool\n\n布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 `0`, `1` (二进制).\n在 Python 中, 还可以用 `True`(1) `False`(0) 来表示它们.\n\n## 浮点数-float\n\n所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.\n\n- 首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.\n- 其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\\\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.\n  - 这里随便尝试了一下:\n\n```py\n>>> a = 1.0000000000000006\n>>> print(a)\n1.0000000000000007\n>>>\n>>> a = 1.00000000000000006\n>>> print(a)\n1.0\n```\n\n浮点数的相关信息可以从 `sys.float_info` 对象获得.\n\n[Python 官方文档 对 sys.float_info 的解释](https://docs.python.org/3/library/sys.html#sys.float_info)\n\n```py\nimport sys\nprint(sys.float_info)\n\n# 以下是经过整理的输出信息\n\nsys.float_info(         # 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.\n  max=1.7976931348623157e+308,  # 可表示的最大正数\n  max_exp=1024,                 # < 2**1024\n  max_10_exp=308,               # 十进制时可正常处理的最大指数\n  min=2.2250738585072014e-308,  # 可表示的最小正数\n  min_exp=-1021,                # > 2**-1021\n  min_10_exp=-307,              # 十进制时可正常处理的最小指数\n  dig=15,                       # 十进制下可正常处理的最大小数位数\n  mant_dig=53,                  # 浮动精度, 二进制下表示有效数字的 bit 位数.\n  epsilon=2.220446049250313e-16,# 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)\n  radix=2,                      # \"基数\" 即指数部分的 \"底数\".\n  rounds=1                      # 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节\n  )\n```\n\n对于一个\n\n## 复数-complex\n\n- 复数的概念与数学上的一致, 由 `实部+虚部j` 表示. 但是这里虚数单位的表示法是 `j` 不是 `i` , 需要注意别搞混淆了.\n- 复数的实部与虚部都是浮点数.\n- 可以使用 `complex.real` 和 `complex.imag` 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)\n\n```py\ntest = 1.0 + 89.0j\nprint(str(test), end='=')\nprint(str(test.real), end='+')\nprint(str(test.imag)+'j')\n```\n\n输出为\n\n```py\n(1+89j)=1.0+89.0j\n```\n\n## 字符串-str\n\n- Python 字符串用 `\"字符串\"` 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 `\\` 反斜杠转义 `\\\"`. \n  - 如果需要在字符串中表示反斜杠, 可以使用 `\\\\` 对反斜杠转义, 也可以使用 `r\"不用\\转义的原始字符串\"` 在引号外使用字母 `r`.\n  - 如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 `u`. `u\"这是一个\\u0020字符\"` (\\u0020是空格).\n  - 如果要将字符串转化为 `byte-like` 对象, 在引号外使用字母 `b`.\n- Python 的字符串也可以使用成对的三引号`\"\"\"超级多的字符\"\"\"`. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.\n\n```py\nstring = \"\"\"测试三引号\n包裹的字符\n    是啥样的?\n\"\"\"\nprint(repr(string))\n```\n\n输出了 `'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'` 可以看到, 特殊字符被识别并转换为对应的转义字符了.\n\n- Python 没有单独的 \"字符\" 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.\n- Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.\n- Python 可用 `%` 符号表示格式化字符串. **其右侧本质上是一个元组(tuple)**\n\n### 格式化字符串\n\n|格式符|含义|\n|-|-|\n|`%c`|字符及其 ASCII 码|\n|`%s`|字符串|\n|`%d`|整数|\n|`%o`|八进制整数|\n|`%x`|十六进制整数|\n|`%X`|十六进制整数(字母大写)|\n|`%f`|小数表示的浮点数|\n|`%e`|科学记数法表示的浮点数|\n|`%E`|科学记数法表示的浮点数(字母大写)|\n|`%g`|从 `%e` 和 `%f` 中选择输出短的|\n|`%G`|从 `%E` 和 `%F` 中选择输出短的|\n\n  - 传递多个格式化字符串需要使用 `()` 圆括号将参数括起来. 然后在内部用 `,` 逗号划分各参数. **元组**\n\n```py\ntest1 = \"hello\"\ntest2 = \"HELLO\"\ntest3 = \"WoRlD\"\nprint(\"%s(%s) %s!\"%(test1,test2,test3))\n```\n\n输出:\n\n```\nhello(HELLO) WoRlD!\n```\n\n  - 另一种格式化方法为 `\"{}{}\".format(a,b)`\n\n```py\ntest1 = 1\ntest2 = 3.14\ntest3 = '哈哈哈'\n# 按顺序\nprint(\"按顺序:{},{},{}\".format(test1,test2,test3))\n# 按索引号\nprint(\"按索引号:{2},{1},{0}\".format(test1,test2,test3))\n# 按参数名\nprint(\"按参数名:{a},{c},{b}\".format(a=test1, b=test2, c=test3))\n```\n\n对格式化字符可以使用修饰符\n\n|修饰符|含义|\n|-|-|\n|`#`|十六进制前添`0x`, 八进制前添`0`|\n|`+`|在数字前添加正负号|\n|`m.n`| `m`表示显示数字的总位数(整数部分+小数部分); `n` 表示保留小数点的位数, 若 `m` 的条件已达到, 则 `n` 将被忽略.|\n|`0`|数字前填0, 默认空格|\n|`-`|左对齐, 默认右对齐|\n\n### 字符串的截取与分段\n\n一个字符串变量, 实质上可以视作一个由字符拼接起来的 \"元组\", 可以在变量名后用 `[index]` 提取其中的一个元素, 或者使用 `[index1:index2]` 提取其中一段, 注意有一个 **要头不要腚** 的规则.\n\n> 我突然想到用这个字符串来做例子也许会更形象...\n> \n> ```py\n> \"_(:з」∠)_\"    # 要头不要腚\n> ```\n\n```py\nstr = \"abcdefg\"\nfor i in range(7) # i = 0,1,2,3,4,5,6\n    print(str[i], end=':index(%d)|'%(i))\nprint() # 换行\nprint(str[0:2]) # 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).\n```\n\nindex 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.\n\n```\nstr     a  b  c  d  e  f  g\n+       0  1  2  3  4  5  6\n-      -7 -6 -5 -4 -3 -2 -1\n```\n\nindex 可以留空一个, 表示从另一个开始一直取到末尾(或头部).\n\n```py\nprint(str[2:]) # 打印 'cdefg\\n' 从c开始向末尾\nprint(str[:4]) # 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)\n```\n\n无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.\n\n```py\n# 对照着上面那个表看\nprint(str[1:6])\nprint(str[-6:6])\nprint(str[1:-1])\n# 都打印 'bcdef\\n'\n\nprint(str[0:5])\nprint(str[:5])\nprint(str[:-2])\n# 都打印 'abcde\\n'\n# ... 以此类推\n```\n\n### 字符串的\"运算\"\n\nPython 中的字符串参与运算:\n\n- `\"str1\" + \"str2\"` 拼接一个新的字符串 `\"str1str2\"`.\n- `\"str\"*int` 重复一个字符串 `int` 次. 例如 `\"str\"*3` == `\"strstrstr\"` \n\n# 数据类型转换\n\n## `int()`\n\n`help(int())`:\n\n```py\nclass int(object)\n |  int([x]) -> integer\n |  int(x, base=10) -> integer\n |\n |  Convert a number or string to an integer, or return 0 if no arguments\n |  are given.  If x is a number, return x.__int__().  For floating point\n |  numbers, this truncates towards zero.\n |\n |  If x is not a number or if base is given, then x must be a string,\n |  bytes, or bytearray instance representing an integer literal in the\n |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n |  Base 0 means to interpret the base from the string as an integer literal.\n```\n\n- `int()` 可接受的参数有:\n  - `x` 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.\n  - `base` 表示转换时依据的进制基数, 默认 10 进制.\n- 若 `x` 是一个整数, 返回其自身.\n- 若 `x` 是一个浮点数, 其小数部分会被砍掉.\n- 若 `x` 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符. \n  - 默认基数为 `base=10`, 可接受的基数值为 0 或 从 2 到 36. \n    - 就是说 10 进制下只能有 `0123456789`, 十六进制下可以有 `0123456789abcdef`, 最高可以在 36 进制下用 `z` 表示 `35`.\n    - `base=0` 的情况下, 根据字符串内容猜测进制. 但适用情况较少:\n      - `0x10` 会被识别为 16 进制的 `16`.\n      - `f`    会被识别为 16 进制的 `15`.\n      - `0o10` 会被识别为 8 进制的 `8`. (零后面是小写的字母O)\n      - `29134` 会被识别为 10 进制.\n      - `01423` 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 `0`.\n      - 只能从 `16` `8` `10` 中猜测.\n  - 字符串中可以在前面有 `+ -` 正负号. 也可以在两侧有空格.\n  - **规定了基数 `base` 时, 必须输入字符串.**\n\n## `float()`\n\n`help(float())`:\n\n```py\nclass float(object)\n |  float(x=0, /)\n |\n |  Convert a string or number to a floating point number, if possible.\n```\n\nTODO: 文档说得这么简洁, 我也没啥好说的... 只能用多了再来说说感受了...\n\n- `float.hex()` 返回一个用 16 进制表示的浮点数.\n- `float.fromhex()` 从字符串转换一个 16 进制的浮点数. 形式为 `0xf.fp+1` 用 `p` 表示 16 为底的指数.\n\n## `complex()`\n\n`help(complex())`:\n\n```py\nclass complex(object)\n |  complex(real=0, imag=0)\n |\n |  Create a complex number from a real part and an optional imaginary part.\n |\n |  This is equivalent to (real + imag*1j) where imag defaults to 0.\n```\n\n## `str()`\n\n```py\nclass str(object)\n |  str(object='') -> str\n |  str(bytes_or_buffer[, encoding[, errors]]) -> str\n |  \n |  Create a new string object from the given object. If encoding or\n |  errors is specified, then the object must expose a data buffer\n |  that will be decoded using the given encoding and error handler.\n |  Otherwise, returns the result of object.__str__() (if defined)\n |  or repr(object).\n |  encoding defaults to sys.getdefaultencoding().\n |  errors defaults to 'strict'.\n```\n\n大意是说:\n\n- 从给定对象创建一个新的字符串对象. 如果指定了 `encoding` 或 `errors`, 则必须公开 `bytes_or_buffer` 来编码字符串和处理错误信息.\n- `str()` 可接受的参数有:\n  - `object` 被转换的对象.\n  - `bytes_or_buffer` 字节或缓冲区.\n  - `encoding` 字符编码, 默认值由 `sys.getdefaultencoding()` 获得, 一般为 `utf-8`\n  - `errors` 错误策略. 默认为 `strict`.\n\n## 其他\n\n- `hex()` 将整数转换为其 16 进制形式的字符串.\n- `oct()` 将整数转换未其  8 进制形式的字符串.\n- `chr()` 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 `0<=i<=0x10ffff`.\n- `ord()` 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .\n- `repr()` 类似 `str()` 但返回的是一个字符串表达式.\n\n```py\n>>> repr('string')\n\"'string'\"\n>>> str('string')\n'string'\n```","source":"_posts/pynote-python中的数字与字符串.md","raw":"---\ntitle: '[PyNote]-3.1-Python中的数字与字符串'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-28 21:37:09\n---\n\n- 数字\n  - 整数\n  - 浮点数\n  - 复数\n- 字符串\n\n> 可以使用 Python 内建函数 `type()` 来查看一个数据的类型\n\n# 基本数据类型\n\n## 整数-int\n\nPython 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.\n\n整数的相关信息可以从 `sys.int_info` 获得\n\n```py\nimport sys\nprint(sys.int_info)\n\n# 以下是经过整理的输出信息\n\nsys.int_info(           # 长整数是普通整数的组合\n  bits_per_digit=30,    # 每个整数占用 30 个 bit. \n  sizeof_digit=4        # 每个整数占用 4 个 byte (32 bit) 的内存空间.\n  )\n```\n\nTODO: 为啥差 2 bit 呢?\n\n### 布尔数-bool\n\n布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 `0`, `1` (二进制).\n在 Python 中, 还可以用 `True`(1) `False`(0) 来表示它们.\n\n## 浮点数-float\n\n所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.\n\n- 首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.\n- 其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\\\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.\n  - 这里随便尝试了一下:\n\n```py\n>>> a = 1.0000000000000006\n>>> print(a)\n1.0000000000000007\n>>>\n>>> a = 1.00000000000000006\n>>> print(a)\n1.0\n```\n\n浮点数的相关信息可以从 `sys.float_info` 对象获得.\n\n[Python 官方文档 对 sys.float_info 的解释](https://docs.python.org/3/library/sys.html#sys.float_info)\n\n```py\nimport sys\nprint(sys.float_info)\n\n# 以下是经过整理的输出信息\n\nsys.float_info(         # 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.\n  max=1.7976931348623157e+308,  # 可表示的最大正数\n  max_exp=1024,                 # < 2**1024\n  max_10_exp=308,               # 十进制时可正常处理的最大指数\n  min=2.2250738585072014e-308,  # 可表示的最小正数\n  min_exp=-1021,                # > 2**-1021\n  min_10_exp=-307,              # 十进制时可正常处理的最小指数\n  dig=15,                       # 十进制下可正常处理的最大小数位数\n  mant_dig=53,                  # 浮动精度, 二进制下表示有效数字的 bit 位数.\n  epsilon=2.220446049250313e-16,# 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)\n  radix=2,                      # \"基数\" 即指数部分的 \"底数\".\n  rounds=1                      # 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节\n  )\n```\n\n对于一个\n\n## 复数-complex\n\n- 复数的概念与数学上的一致, 由 `实部+虚部j` 表示. 但是这里虚数单位的表示法是 `j` 不是 `i` , 需要注意别搞混淆了.\n- 复数的实部与虚部都是浮点数.\n- 可以使用 `complex.real` 和 `complex.imag` 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)\n\n```py\ntest = 1.0 + 89.0j\nprint(str(test), end='=')\nprint(str(test.real), end='+')\nprint(str(test.imag)+'j')\n```\n\n输出为\n\n```py\n(1+89j)=1.0+89.0j\n```\n\n## 字符串-str\n\n- Python 字符串用 `\"字符串\"` 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 `\\` 反斜杠转义 `\\\"`. \n  - 如果需要在字符串中表示反斜杠, 可以使用 `\\\\` 对反斜杠转义, 也可以使用 `r\"不用\\转义的原始字符串\"` 在引号外使用字母 `r`.\n  - 如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 `u`. `u\"这是一个\\u0020字符\"` (\\u0020是空格).\n  - 如果要将字符串转化为 `byte-like` 对象, 在引号外使用字母 `b`.\n- Python 的字符串也可以使用成对的三引号`\"\"\"超级多的字符\"\"\"`. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.\n\n```py\nstring = \"\"\"测试三引号\n包裹的字符\n    是啥样的?\n\"\"\"\nprint(repr(string))\n```\n\n输出了 `'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'` 可以看到, 特殊字符被识别并转换为对应的转义字符了.\n\n- Python 没有单独的 \"字符\" 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.\n- Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.\n- Python 可用 `%` 符号表示格式化字符串. **其右侧本质上是一个元组(tuple)**\n\n### 格式化字符串\n\n|格式符|含义|\n|-|-|\n|`%c`|字符及其 ASCII 码|\n|`%s`|字符串|\n|`%d`|整数|\n|`%o`|八进制整数|\n|`%x`|十六进制整数|\n|`%X`|十六进制整数(字母大写)|\n|`%f`|小数表示的浮点数|\n|`%e`|科学记数法表示的浮点数|\n|`%E`|科学记数法表示的浮点数(字母大写)|\n|`%g`|从 `%e` 和 `%f` 中选择输出短的|\n|`%G`|从 `%E` 和 `%F` 中选择输出短的|\n\n  - 传递多个格式化字符串需要使用 `()` 圆括号将参数括起来. 然后在内部用 `,` 逗号划分各参数. **元组**\n\n```py\ntest1 = \"hello\"\ntest2 = \"HELLO\"\ntest3 = \"WoRlD\"\nprint(\"%s(%s) %s!\"%(test1,test2,test3))\n```\n\n输出:\n\n```\nhello(HELLO) WoRlD!\n```\n\n  - 另一种格式化方法为 `\"{}{}\".format(a,b)`\n\n```py\ntest1 = 1\ntest2 = 3.14\ntest3 = '哈哈哈'\n# 按顺序\nprint(\"按顺序:{},{},{}\".format(test1,test2,test3))\n# 按索引号\nprint(\"按索引号:{2},{1},{0}\".format(test1,test2,test3))\n# 按参数名\nprint(\"按参数名:{a},{c},{b}\".format(a=test1, b=test2, c=test3))\n```\n\n对格式化字符可以使用修饰符\n\n|修饰符|含义|\n|-|-|\n|`#`|十六进制前添`0x`, 八进制前添`0`|\n|`+`|在数字前添加正负号|\n|`m.n`| `m`表示显示数字的总位数(整数部分+小数部分); `n` 表示保留小数点的位数, 若 `m` 的条件已达到, 则 `n` 将被忽略.|\n|`0`|数字前填0, 默认空格|\n|`-`|左对齐, 默认右对齐|\n\n### 字符串的截取与分段\n\n一个字符串变量, 实质上可以视作一个由字符拼接起来的 \"元组\", 可以在变量名后用 `[index]` 提取其中的一个元素, 或者使用 `[index1:index2]` 提取其中一段, 注意有一个 **要头不要腚** 的规则.\n\n> 我突然想到用这个字符串来做例子也许会更形象...\n> \n> ```py\n> \"_(:з」∠)_\"    # 要头不要腚\n> ```\n\n```py\nstr = \"abcdefg\"\nfor i in range(7) # i = 0,1,2,3,4,5,6\n    print(str[i], end=':index(%d)|'%(i))\nprint() # 换行\nprint(str[0:2]) # 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).\n```\n\nindex 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.\n\n```\nstr     a  b  c  d  e  f  g\n+       0  1  2  3  4  5  6\n-      -7 -6 -5 -4 -3 -2 -1\n```\n\nindex 可以留空一个, 表示从另一个开始一直取到末尾(或头部).\n\n```py\nprint(str[2:]) # 打印 'cdefg\\n' 从c开始向末尾\nprint(str[:4]) # 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)\n```\n\n无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.\n\n```py\n# 对照着上面那个表看\nprint(str[1:6])\nprint(str[-6:6])\nprint(str[1:-1])\n# 都打印 'bcdef\\n'\n\nprint(str[0:5])\nprint(str[:5])\nprint(str[:-2])\n# 都打印 'abcde\\n'\n# ... 以此类推\n```\n\n### 字符串的\"运算\"\n\nPython 中的字符串参与运算:\n\n- `\"str1\" + \"str2\"` 拼接一个新的字符串 `\"str1str2\"`.\n- `\"str\"*int` 重复一个字符串 `int` 次. 例如 `\"str\"*3` == `\"strstrstr\"` \n\n# 数据类型转换\n\n## `int()`\n\n`help(int())`:\n\n```py\nclass int(object)\n |  int([x]) -> integer\n |  int(x, base=10) -> integer\n |\n |  Convert a number or string to an integer, or return 0 if no arguments\n |  are given.  If x is a number, return x.__int__().  For floating point\n |  numbers, this truncates towards zero.\n |\n |  If x is not a number or if base is given, then x must be a string,\n |  bytes, or bytearray instance representing an integer literal in the\n |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n |  Base 0 means to interpret the base from the string as an integer literal.\n```\n\n- `int()` 可接受的参数有:\n  - `x` 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.\n  - `base` 表示转换时依据的进制基数, 默认 10 进制.\n- 若 `x` 是一个整数, 返回其自身.\n- 若 `x` 是一个浮点数, 其小数部分会被砍掉.\n- 若 `x` 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符. \n  - 默认基数为 `base=10`, 可接受的基数值为 0 或 从 2 到 36. \n    - 就是说 10 进制下只能有 `0123456789`, 十六进制下可以有 `0123456789abcdef`, 最高可以在 36 进制下用 `z` 表示 `35`.\n    - `base=0` 的情况下, 根据字符串内容猜测进制. 但适用情况较少:\n      - `0x10` 会被识别为 16 进制的 `16`.\n      - `f`    会被识别为 16 进制的 `15`.\n      - `0o10` 会被识别为 8 进制的 `8`. (零后面是小写的字母O)\n      - `29134` 会被识别为 10 进制.\n      - `01423` 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 `0`.\n      - 只能从 `16` `8` `10` 中猜测.\n  - 字符串中可以在前面有 `+ -` 正负号. 也可以在两侧有空格.\n  - **规定了基数 `base` 时, 必须输入字符串.**\n\n## `float()`\n\n`help(float())`:\n\n```py\nclass float(object)\n |  float(x=0, /)\n |\n |  Convert a string or number to a floating point number, if possible.\n```\n\nTODO: 文档说得这么简洁, 我也没啥好说的... 只能用多了再来说说感受了...\n\n- `float.hex()` 返回一个用 16 进制表示的浮点数.\n- `float.fromhex()` 从字符串转换一个 16 进制的浮点数. 形式为 `0xf.fp+1` 用 `p` 表示 16 为底的指数.\n\n## `complex()`\n\n`help(complex())`:\n\n```py\nclass complex(object)\n |  complex(real=0, imag=0)\n |\n |  Create a complex number from a real part and an optional imaginary part.\n |\n |  This is equivalent to (real + imag*1j) where imag defaults to 0.\n```\n\n## `str()`\n\n```py\nclass str(object)\n |  str(object='') -> str\n |  str(bytes_or_buffer[, encoding[, errors]]) -> str\n |  \n |  Create a new string object from the given object. If encoding or\n |  errors is specified, then the object must expose a data buffer\n |  that will be decoded using the given encoding and error handler.\n |  Otherwise, returns the result of object.__str__() (if defined)\n |  or repr(object).\n |  encoding defaults to sys.getdefaultencoding().\n |  errors defaults to 'strict'.\n```\n\n大意是说:\n\n- 从给定对象创建一个新的字符串对象. 如果指定了 `encoding` 或 `errors`, 则必须公开 `bytes_or_buffer` 来编码字符串和处理错误信息.\n- `str()` 可接受的参数有:\n  - `object` 被转换的对象.\n  - `bytes_or_buffer` 字节或缓冲区.\n  - `encoding` 字符编码, 默认值由 `sys.getdefaultencoding()` 获得, 一般为 `utf-8`\n  - `errors` 错误策略. 默认为 `strict`.\n\n## 其他\n\n- `hex()` 将整数转换为其 16 进制形式的字符串.\n- `oct()` 将整数转换未其  8 进制形式的字符串.\n- `chr()` 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 `0<=i<=0x10ffff`.\n- `ord()` 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .\n- `repr()` 类似 `str()` 但返回的是一个字符串表达式.\n\n```py\n>>> repr('string')\n\"'string'\"\n>>> str('string')\n'string'\n```","slug":"pynote-python中的数字与字符串","published":1,"updated":"2018-08-15T16:36:31.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqme001010lkfkdxdh1t","content":"<ul>\r\n<li>数字\r\n<ul>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n</ul></li>\r\n<li>字符串</li>\r\n</ul>\r\n<blockquote>\r\n<p>可以使用 Python 内建函数 <code>type()</code> 来查看一个数据的类型</p>\r\n</blockquote>\r\n<h1 id=\"基本数据类型\">基本数据类型</h1>\r\n<h2 id=\"整数-int\">整数-int</h2>\r\n<p>Python 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.</p>\r\n<p>整数的相关信息可以从 <code>sys.int_info</code> 获得</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.int_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.int_info(           <span class=\"comment\"># 长整数是普通整数的组合</span></span><br><span class=\"line\">  bits_per_digit=<span class=\"number\">30</span>,    <span class=\"comment\"># 每个整数占用 30 个 bit. </span></span><br><span class=\"line\">  sizeof_digit=<span class=\"number\">4</span>        <span class=\"comment\"># 每个整数占用 4 个 byte (32 bit) 的内存空间.</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 为啥差 2 bit 呢?</p>\r\n<h3 id=\"布尔数-bool\">布尔数-bool</h3>\r\n<p>布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 <code>0</code>, <code>1</code> (二进制). 在 Python 中, 还可以用 <code>True</code>(1) <code>False</code>(0) 来表示它们.</p>\r\n<h2 id=\"浮点数-float\">浮点数-float</h2>\r\n<p>所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.</p>\r\n<ul>\r\n<li>首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.</li>\r\n<li>其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.\r\n<ul>\r\n<li>这里随便尝试了一下:</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.0000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0000000000000007</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.00000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\r\n<p>浮点数的相关信息可以从 <code>sys.float_info</code> 对象获得.</p>\r\n<p><a href=\"https://docs.python.org/3/library/sys.html#sys.float_info\" target=\"_blank\" rel=\"noopener\">Python 官方文档 对 sys.float_info 的解释</a></p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.float_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.float_info(         <span class=\"comment\"># 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.</span></span><br><span class=\"line\">  max=<span class=\"number\">1.7976931348623157e+308</span>,  <span class=\"comment\"># 可表示的最大正数</span></span><br><span class=\"line\">  max_exp=<span class=\"number\">1024</span>,                 <span class=\"comment\"># &lt; 2**1024</span></span><br><span class=\"line\">  max_10_exp=<span class=\"number\">308</span>,               <span class=\"comment\"># 十进制时可正常处理的最大指数</span></span><br><span class=\"line\">  min=<span class=\"number\">2.2250738585072014e-308</span>,  <span class=\"comment\"># 可表示的最小正数</span></span><br><span class=\"line\">  min_exp=<span class=\"number\">-1021</span>,                <span class=\"comment\"># &gt; 2**-1021</span></span><br><span class=\"line\">  min_10_exp=<span class=\"number\">-307</span>,              <span class=\"comment\"># 十进制时可正常处理的最小指数</span></span><br><span class=\"line\">  dig=<span class=\"number\">15</span>,                       <span class=\"comment\"># 十进制下可正常处理的最大小数位数</span></span><br><span class=\"line\">  mant_dig=<span class=\"number\">53</span>,                  <span class=\"comment\"># 浮动精度, 二进制下表示有效数字的 bit 位数.</span></span><br><span class=\"line\">  epsilon=<span class=\"number\">2.220446049250313e-16</span>,<span class=\"comment\"># 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)</span></span><br><span class=\"line\">  radix=<span class=\"number\">2</span>,                      <span class=\"comment\"># \"基数\" 即指数部分的 \"底数\".</span></span><br><span class=\"line\">  rounds=<span class=\"number\">1</span>                      <span class=\"comment\"># 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>对于一个</p>\r\n<h2 id=\"复数-complex\">复数-complex</h2>\r\n<ul>\r\n<li>复数的概念与数学上的一致, 由 <code>实部+虚部j</code> 表示. 但是这里虚数单位的表示法是 <code>j</code> 不是 <code>i</code> , 需要注意别搞混淆了.</li>\r\n<li>复数的实部与虚部都是浮点数.</li>\r\n<li>可以使用 <code>complex.real</code> 和 <code>complex.imag</code> 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test = <span class=\"number\">1.0</span> + <span class=\"number\">89.0j</span></span><br><span class=\"line\">print(str(test), end=<span class=\"string\">'='</span>)</span><br><span class=\"line\">print(str(test.real), end=<span class=\"string\">'+'</span>)</span><br><span class=\"line\">print(str(test.imag)+<span class=\"string\">'j'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>输出为</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">89j</span>)=<span class=\"number\">1.0</span>+<span class=\"number\">89.0j</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"字符串-str\">字符串-str</h2>\r\n<ul>\r\n<li>Python 字符串用 <code>&quot;字符串&quot;</code> 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 <code>\\</code> 反斜杠转义 <code>\\&quot;</code>.\r\n<ul>\r\n<li>如果需要在字符串中表示反斜杠, 可以使用 <code>\\\\</code> 对反斜杠转义, 也可以使用 <code>r&quot;不用\\转义的原始字符串&quot;</code> 在引号外使用字母 <code>r</code>.</li>\r\n<li>如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 <code>u</code>. <code>u&quot;这是一个\\u0020字符&quot;</code> (</li>\r\n<li>如果要将字符串转化为 <code>byte-like</code> 对象, 在引号外使用字母 <code>b</code>.</li>\r\n</ul></li>\r\n<li>Python 的字符串也可以使用成对的三引号<code>&quot;&quot;&quot;超级多的字符&quot;&quot;&quot;</code>. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"\"\"测试三引号</span></span><br><span class=\"line\"><span class=\"string\">包裹的字符</span></span><br><span class=\"line\"><span class=\"string\">    是啥样的?</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(repr(string))</span><br></pre></td></tr></table></figure>\r\n<p>输出了 <code>'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'</code> 可以看到, 特殊字符被识别并转换为对应的转义字符了.</p>\r\n<ul>\r\n<li>Python 没有单独的 “字符” 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.</li>\r\n<li>Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.</li>\r\n<li>Python 可用 <code>%</code> 符号表示格式化字符串. <strong>其右侧本质上是一个元组(tuple)</strong></li>\r\n</ul>\r\n<h3 id=\"格式化字符串\">格式化字符串</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>格式符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>%c</code></td>\r\n<td>字符及其 ASCII 码</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%s</code></td>\r\n<td>字符串</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%d</code></td>\r\n<td>整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%o</code></td>\r\n<td>八进制整数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%x</code></td>\r\n<td>十六进制整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%X</code></td>\r\n<td>十六进制整数(字母大写)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%f</code></td>\r\n<td>小数表示的浮点数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%e</code></td>\r\n<td>科学记数法表示的浮点数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%E</code></td>\r\n<td>科学记数法表示的浮点数(字母大写)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%g</code></td>\r\n<td>从 <code>%e</code> 和 <code>%f</code> 中选择输出短的</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%G</code></td>\r\n<td>从 <code>%E</code> 和 <code>%F</code> 中选择输出短的</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>传递多个格式化字符串需要使用 <code>()</code> 圆括号将参数括起来. 然后在内部用 <code>,</code> 逗号划分各参数. <strong>元组</strong></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">test2 = <span class=\"string\">\"HELLO\"</span></span><br><span class=\"line\">test3 = <span class=\"string\">\"WoRlD\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"%s(%s) %s!\"</span>%(test1,test2,test3))</span><br></pre></td></tr></table></figure>\r\n<p>输出:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(HELLO) WoRlD!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>另一种格式化方法为 <code>&quot;{}{}&quot;.format(a,b)</code></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"number\">1</span></span><br><span class=\"line\">test2 = <span class=\"number\">3.14</span></span><br><span class=\"line\">test3 = <span class=\"string\">'哈哈哈'</span></span><br><span class=\"line\"><span class=\"comment\"># 按顺序</span></span><br><span class=\"line\">print(<span class=\"string\">\"按顺序:&#123;&#125;,&#123;&#125;,&#123;&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按索引号</span></span><br><span class=\"line\">print(<span class=\"string\">\"按索引号:&#123;2&#125;,&#123;1&#125;,&#123;0&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按参数名</span></span><br><span class=\"line\">print(<span class=\"string\">\"按参数名:&#123;a&#125;,&#123;c&#125;,&#123;b&#125;\"</span>.format(a=test1, b=test2, c=test3))</span><br></pre></td></tr></table></figure>\r\n<p>对格式化字符可以使用修饰符</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>修饰符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>#</code></td>\r\n<td>十六进制前添<code>0x</code>, 八进制前添<code>0</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>+</code></td>\r\n<td>在数字前添加正负号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>m.n</code></td>\r\n<td><code>m</code>表示显示数字的总位数(整数部分+小数部分); <code>n</code> 表示保留小数点的位数, 若 <code>m</code> 的条件已达到, 则 <code>n</code> 将被忽略.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>0</code></td>\r\n<td>数字前填0, 默认空格</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>-</code></td>\r\n<td>左对齐, 默认右对齐</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"字符串的截取与分段\">字符串的截取与分段</h3>\r\n<p>一个字符串变量, 实质上可以视作一个由字符拼接起来的 “元组”, 可以在变量名后用 <code>[index]</code> 提取其中的一个元素, 或者使用 <code>[index1:index2]</code> 提取其中一段, 注意有一个 <strong>要头不要腚</strong> 的规则.</p>\r\n<blockquote>\r\n<p>我突然想到用这个字符串来做例子也许会更形象…</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">\"_(:з」∠)_\"</span>    <span class=\"comment\"># 要头不要腚</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\r\n</blockquote>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"abcdefg\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>) <span class=\"comment\"># i = 0,1,2,3,4,5,6</span></span><br><span class=\"line\">    print(str[i], end=<span class=\"string\">':index(%d)|'</span>%(i))</span><br><span class=\"line\">print() <span class=\"comment\"># 换行</span></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">2</span>]) <span class=\"comment\"># 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).</span></span><br></pre></td></tr></table></figure>\r\n<p>index 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str     a  b  c  d  e  f  g</span><br><span class=\"line\">+       0  1  2  3  4  5  6</span><br><span class=\"line\">-      -7 -6 -5 -4 -3 -2 -1</span><br></pre></td></tr></table></figure>\r\n<p>index 可以留空一个, 表示从另一个开始一直取到末尾(或头部).</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(str[<span class=\"number\">2</span>:]) <span class=\"comment\"># 打印 'cdefg\\n' 从c开始向末尾</span></span><br><span class=\"line\">print(str[:<span class=\"number\">4</span>]) <span class=\"comment\"># 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)</span></span><br></pre></td></tr></table></figure>\r\n<p>无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对照着上面那个表看</span></span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">-6</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'bcdef\\n'</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">-2</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'abcde\\n'</span></span><br><span class=\"line\"><span class=\"comment\"># ... 以此类推</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"字符串的运算\">字符串的“运算”</h3>\r\n<p>Python 中的字符串参与运算:</p>\r\n<ul>\r\n<li><code>&quot;str1&quot; + &quot;str2&quot;</code> 拼接一个新的字符串 <code>&quot;str1str2&quot;</code>.</li>\r\n<li><code>&quot;str&quot;*int</code> 重复一个字符串 <code>int</code> 次. 例如 <code>&quot;str&quot;*3</code> == <code>&quot;strstrstr&quot;</code></li>\r\n</ul>\r\n<h1 id=\"数据类型转换\">数据类型转换</h1>\r\n<h2 id=\"int\"><code>int()</code></h2>\r\n<p><code>help(int())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">int</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">int</span><span class=\"params\">([x])</span> -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |  int(x, base=10) -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  Convert a number or string to an integer, or return 0 if no arguments</span></span><br><span class=\"line\"><span class=\"class\"> |  are given.  If x is a number, return x.__int__().  For floating point</span></span><br><span class=\"line\"><span class=\"class\"> |  numbers, this truncates towards zero.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  If x is not a number or if base is given, then x must be a string,</span></span><br><span class=\"line\"><span class=\"class\"> |  bytes, or bytearray instance representing an integer literal in the</span></span><br><span class=\"line\"><span class=\"class\"> |  given base.  The literal can be preceded by '+' or '-' and be surrounded</span></span><br><span class=\"line\"><span class=\"class\"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span></span><br><span class=\"line\"><span class=\"class\"> |  Base 0 means to interpret the base from the string as an integer literal.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>int()</code> 可接受的参数有:\r\n<ul>\r\n<li><code>x</code> 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.</li>\r\n<li><code>base</code> 表示转换时依据的进制基数, 默认 10 进制.</li>\r\n</ul></li>\r\n<li>若 <code>x</code> 是一个整数, 返回其自身.</li>\r\n<li>若 <code>x</code> 是一个浮点数, 其小数部分会被砍掉.</li>\r\n<li>若 <code>x</code> 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符.\r\n<ul>\r\n<li>默认基数为 <code>base=10</code>, 可接受的基数值为 0 或 从 2 到 36.\r\n<ul>\r\n<li>就是说 10 进制下只能有 <code>0123456789</code>, 十六进制下可以有 <code>0123456789abcdef</code>, 最高可以在 36 进制下用 <code>z</code> 表示 <code>35</code>.</li>\r\n<li><code>base=0</code> 的情况下, 根据字符串内容猜测进制. 但适用情况较少:\r\n<ul>\r\n<li><code>0x10</code> 会被识别为 16 进制的 <code>16</code>.</li>\r\n<li><code>f</code> 会被识别为 16 进制的 <code>15</code>.</li>\r\n<li><code>0o10</code> 会被识别为 8 进制的 <code>8</code>. (零后面是小写的字母O)</li>\r\n<li><code>29134</code> 会被识别为 10 进制.</li>\r\n<li><code>01423</code> 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 <code>0</code>.</li>\r\n<li>只能从 <code>16</code> <code>8</code> <code>10</code> 中猜测.</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>字符串中可以在前面有 <code>+ -</code> 正负号. 也可以在两侧有空格.</li>\r\n<li><strong>规定了基数 <code>base</code> 时, 必须输入字符串.</strong></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"float\"><code>float()</code></h2>\r\n<p><code>help(float())</code>:</p>\r\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">float</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">float</span><span class=\"params\">(x=<span class=\"number\">0</span>, /)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"> |  Convert a string or number to a floating point number, if possible.</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 文档说得这么简洁, 我也没啥好说的… 只能用多了再来说说感受了…</p>\r\n<ul>\r\n<li><code>float.hex()</code> 返回一个用 16 进制表示的浮点数.</li>\r\n<li><code>float.fromhex()</code> 从字符串转换一个 16 进制的浮点数. 形式为 <code>0xf.fp+1</code> 用 <code>p</code> 表示 16 为底的指数.</li>\r\n</ul>\r\n<h2 id=\"complex\"><code>complex()</code></h2>\r\n<p><code>help(complex())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">complex</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">complex</span><span class=\"params\">(real=<span class=\"number\">0</span>, imag=<span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">Create</span> <span class=\"title\">a</span> <span class=\"title\">complex</span> <span class=\"title\">number</span> <span class=\"title\">from</span> <span class=\"title\">a</span> <span class=\"title\">real</span> <span class=\"title\">part</span> <span class=\"title\">and</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">imaginary</span> <span class=\"title\">part</span>.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">This</span> <span class=\"title\">is</span> <span class=\"title\">equivalent</span> <span class=\"title\">to</span> <span class=\"params\">(real + imag*<span class=\"number\">1j</span>)</span> <span class=\"title\">where</span> <span class=\"title\">imag</span> <span class=\"title\">defaults</span> <span class=\"title\">to</span> 0.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"str\"><code>str()</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">str</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">str</span><span class=\"params\">(object=<span class=\"string\">''</span>)</span> -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  </span></span><br><span class=\"line\"><span class=\"class\"> |  Create a new string object from the given object. If encoding or</span></span><br><span class=\"line\"><span class=\"class\"> |  errors is specified, then the object must expose a data buffer</span></span><br><span class=\"line\"><span class=\"class\"> |  that will be decoded using the given encoding and error handler.</span></span><br><span class=\"line\"><span class=\"class\"> |  Otherwise, returns the result of object.__str__() (if defined)</span></span><br><span class=\"line\"><span class=\"class\"> |  or repr(object).</span></span><br><span class=\"line\"><span class=\"class\"> |  encoding defaults to sys.getdefaultencoding().</span></span><br><span class=\"line\"><span class=\"class\"> |  errors defaults to 'strict'.</span></span><br></pre></td></tr></table></figure>\r\n<p>大意是说:</p>\r\n<ul>\r\n<li>从给定对象创建一个新的字符串对象. 如果指定了 <code>encoding</code> 或 <code>errors</code>, 则必须公开 <code>bytes_or_buffer</code> 来编码字符串和处理错误信息.</li>\r\n<li><code>str()</code> 可接受的参数有:\r\n<ul>\r\n<li><code>object</code> 被转换的对象.</li>\r\n<li><code>bytes_or_buffer</code> 字节或缓冲区.</li>\r\n<li><code>encoding</code> 字符编码, 默认值由 <code>sys.getdefaultencoding()</code> 获得, 一般为 <code>utf-8</code></li>\r\n<li><code>errors</code> 错误策略. 默认为 <code>strict</code>.</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"其他\">其他</h2>\r\n<ul>\r\n<li><code>hex()</code> 将整数转换为其 16 进制形式的字符串.</li>\r\n<li><code>oct()</code> 将整数转换未其 8 进制形式的字符串.</li>\r\n<li><code>chr()</code> 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 <code>0&lt;=i&lt;=0x10ffff</code>.</li>\r\n<li><code>ord()</code> 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .</li>\r\n<li><code>repr()</code> 类似 <code>str()</code> 但返回的是一个字符串表达式.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>repr(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">\"'string'\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>数字\r\n<ul>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n</ul></li>\r\n<li>字符串</li>\r\n</ul>\r\n<blockquote>\r\n<p>可以使用 Python 内建函数 <code>type()</code> 来查看一个数据的类型</p>\r\n</blockquote>\r\n<h1 id=\"基本数据类型\">基本数据类型</h1>\r\n<h2 id=\"整数-int\">整数-int</h2>\r\n<p>Python 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.</p>\r\n<p>整数的相关信息可以从 <code>sys.int_info</code> 获得</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.int_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.int_info(           <span class=\"comment\"># 长整数是普通整数的组合</span></span><br><span class=\"line\">  bits_per_digit=<span class=\"number\">30</span>,    <span class=\"comment\"># 每个整数占用 30 个 bit. </span></span><br><span class=\"line\">  sizeof_digit=<span class=\"number\">4</span>        <span class=\"comment\"># 每个整数占用 4 个 byte (32 bit) 的内存空间.</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 为啥差 2 bit 呢?</p>\r\n<h3 id=\"布尔数-bool\">布尔数-bool</h3>\r\n<p>布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 <code>0</code>, <code>1</code> (二进制). 在 Python 中, 还可以用 <code>True</code>(1) <code>False</code>(0) 来表示它们.</p>\r\n<h2 id=\"浮点数-float\">浮点数-float</h2>\r\n<p>所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.</p>\r\n<ul>\r\n<li>首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.</li>\r\n<li>其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.\r\n<ul>\r\n<li>这里随便尝试了一下:</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.0000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0000000000000007</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.00000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\r\n<p>浮点数的相关信息可以从 <code>sys.float_info</code> 对象获得.</p>\r\n<p><a href=\"https://docs.python.org/3/library/sys.html#sys.float_info\" target=\"_blank\" rel=\"noopener\">Python 官方文档 对 sys.float_info 的解释</a></p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.float_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.float_info(         <span class=\"comment\"># 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.</span></span><br><span class=\"line\">  max=<span class=\"number\">1.7976931348623157e+308</span>,  <span class=\"comment\"># 可表示的最大正数</span></span><br><span class=\"line\">  max_exp=<span class=\"number\">1024</span>,                 <span class=\"comment\"># &lt; 2**1024</span></span><br><span class=\"line\">  max_10_exp=<span class=\"number\">308</span>,               <span class=\"comment\"># 十进制时可正常处理的最大指数</span></span><br><span class=\"line\">  min=<span class=\"number\">2.2250738585072014e-308</span>,  <span class=\"comment\"># 可表示的最小正数</span></span><br><span class=\"line\">  min_exp=<span class=\"number\">-1021</span>,                <span class=\"comment\"># &gt; 2**-1021</span></span><br><span class=\"line\">  min_10_exp=<span class=\"number\">-307</span>,              <span class=\"comment\"># 十进制时可正常处理的最小指数</span></span><br><span class=\"line\">  dig=<span class=\"number\">15</span>,                       <span class=\"comment\"># 十进制下可正常处理的最大小数位数</span></span><br><span class=\"line\">  mant_dig=<span class=\"number\">53</span>,                  <span class=\"comment\"># 浮动精度, 二进制下表示有效数字的 bit 位数.</span></span><br><span class=\"line\">  epsilon=<span class=\"number\">2.220446049250313e-16</span>,<span class=\"comment\"># 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)</span></span><br><span class=\"line\">  radix=<span class=\"number\">2</span>,                      <span class=\"comment\"># \"基数\" 即指数部分的 \"底数\".</span></span><br><span class=\"line\">  rounds=<span class=\"number\">1</span>                      <span class=\"comment\"># 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>对于一个</p>\r\n<h2 id=\"复数-complex\">复数-complex</h2>\r\n<ul>\r\n<li>复数的概念与数学上的一致, 由 <code>实部+虚部j</code> 表示. 但是这里虚数单位的表示法是 <code>j</code> 不是 <code>i</code> , 需要注意别搞混淆了.</li>\r\n<li>复数的实部与虚部都是浮点数.</li>\r\n<li>可以使用 <code>complex.real</code> 和 <code>complex.imag</code> 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test = <span class=\"number\">1.0</span> + <span class=\"number\">89.0j</span></span><br><span class=\"line\">print(str(test), end=<span class=\"string\">'='</span>)</span><br><span class=\"line\">print(str(test.real), end=<span class=\"string\">'+'</span>)</span><br><span class=\"line\">print(str(test.imag)+<span class=\"string\">'j'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>输出为</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">89j</span>)=<span class=\"number\">1.0</span>+<span class=\"number\">89.0j</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"字符串-str\">字符串-str</h2>\r\n<ul>\r\n<li>Python 字符串用 <code>&quot;字符串&quot;</code> 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 <code>\\</code> 反斜杠转义 <code>\\&quot;</code>.\r\n<ul>\r\n<li>如果需要在字符串中表示反斜杠, 可以使用 <code>\\\\</code> 对反斜杠转义, 也可以使用 <code>r&quot;不用\\转义的原始字符串&quot;</code> 在引号外使用字母 <code>r</code>.</li>\r\n<li>如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 <code>u</code>. <code>u&quot;这是一个\\u0020字符&quot;</code> (</li>\r\n<li>如果要将字符串转化为 <code>byte-like</code> 对象, 在引号外使用字母 <code>b</code>.</li>\r\n</ul></li>\r\n<li>Python 的字符串也可以使用成对的三引号<code>&quot;&quot;&quot;超级多的字符&quot;&quot;&quot;</code>. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"\"\"测试三引号</span></span><br><span class=\"line\"><span class=\"string\">包裹的字符</span></span><br><span class=\"line\"><span class=\"string\">    是啥样的?</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(repr(string))</span><br></pre></td></tr></table></figure>\r\n<p>输出了 <code>'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'</code> 可以看到, 特殊字符被识别并转换为对应的转义字符了.</p>\r\n<ul>\r\n<li>Python 没有单独的 “字符” 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.</li>\r\n<li>Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.</li>\r\n<li>Python 可用 <code>%</code> 符号表示格式化字符串. <strong>其右侧本质上是一个元组(tuple)</strong></li>\r\n</ul>\r\n<h3 id=\"格式化字符串\">格式化字符串</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>格式符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>%c</code></td>\r\n<td>字符及其 ASCII 码</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%s</code></td>\r\n<td>字符串</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%d</code></td>\r\n<td>整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%o</code></td>\r\n<td>八进制整数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%x</code></td>\r\n<td>十六进制整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%X</code></td>\r\n<td>十六进制整数(字母大写)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%f</code></td>\r\n<td>小数表示的浮点数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%e</code></td>\r\n<td>科学记数法表示的浮点数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%E</code></td>\r\n<td>科学记数法表示的浮点数(字母大写)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%g</code></td>\r\n<td>从 <code>%e</code> 和 <code>%f</code> 中选择输出短的</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%G</code></td>\r\n<td>从 <code>%E</code> 和 <code>%F</code> 中选择输出短的</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>传递多个格式化字符串需要使用 <code>()</code> 圆括号将参数括起来. 然后在内部用 <code>,</code> 逗号划分各参数. <strong>元组</strong></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">test2 = <span class=\"string\">\"HELLO\"</span></span><br><span class=\"line\">test3 = <span class=\"string\">\"WoRlD\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"%s(%s) %s!\"</span>%(test1,test2,test3))</span><br></pre></td></tr></table></figure>\r\n<p>输出:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(HELLO) WoRlD!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>另一种格式化方法为 <code>&quot;{}{}&quot;.format(a,b)</code></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"number\">1</span></span><br><span class=\"line\">test2 = <span class=\"number\">3.14</span></span><br><span class=\"line\">test3 = <span class=\"string\">'哈哈哈'</span></span><br><span class=\"line\"><span class=\"comment\"># 按顺序</span></span><br><span class=\"line\">print(<span class=\"string\">\"按顺序:&#123;&#125;,&#123;&#125;,&#123;&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按索引号</span></span><br><span class=\"line\">print(<span class=\"string\">\"按索引号:&#123;2&#125;,&#123;1&#125;,&#123;0&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按参数名</span></span><br><span class=\"line\">print(<span class=\"string\">\"按参数名:&#123;a&#125;,&#123;c&#125;,&#123;b&#125;\"</span>.format(a=test1, b=test2, c=test3))</span><br></pre></td></tr></table></figure>\r\n<p>对格式化字符可以使用修饰符</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>修饰符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>#</code></td>\r\n<td>十六进制前添<code>0x</code>, 八进制前添<code>0</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>+</code></td>\r\n<td>在数字前添加正负号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>m.n</code></td>\r\n<td><code>m</code>表示显示数字的总位数(整数部分+小数部分); <code>n</code> 表示保留小数点的位数, 若 <code>m</code> 的条件已达到, 则 <code>n</code> 将被忽略.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>0</code></td>\r\n<td>数字前填0, 默认空格</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>-</code></td>\r\n<td>左对齐, 默认右对齐</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"字符串的截取与分段\">字符串的截取与分段</h3>\r\n<p>一个字符串变量, 实质上可以视作一个由字符拼接起来的 “元组”, 可以在变量名后用 <code>[index]</code> 提取其中的一个元素, 或者使用 <code>[index1:index2]</code> 提取其中一段, 注意有一个 <strong>要头不要腚</strong> 的规则.</p>\r\n<blockquote>\r\n<p>我突然想到用这个字符串来做例子也许会更形象…</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">\"_(:з」∠)_\"</span>    <span class=\"comment\"># 要头不要腚</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\r\n</blockquote>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"abcdefg\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>) <span class=\"comment\"># i = 0,1,2,3,4,5,6</span></span><br><span class=\"line\">    print(str[i], end=<span class=\"string\">':index(%d)|'</span>%(i))</span><br><span class=\"line\">print() <span class=\"comment\"># 换行</span></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">2</span>]) <span class=\"comment\"># 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).</span></span><br></pre></td></tr></table></figure>\r\n<p>index 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str     a  b  c  d  e  f  g</span><br><span class=\"line\">+       0  1  2  3  4  5  6</span><br><span class=\"line\">-      -7 -6 -5 -4 -3 -2 -1</span><br></pre></td></tr></table></figure>\r\n<p>index 可以留空一个, 表示从另一个开始一直取到末尾(或头部).</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(str[<span class=\"number\">2</span>:]) <span class=\"comment\"># 打印 'cdefg\\n' 从c开始向末尾</span></span><br><span class=\"line\">print(str[:<span class=\"number\">4</span>]) <span class=\"comment\"># 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)</span></span><br></pre></td></tr></table></figure>\r\n<p>无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对照着上面那个表看</span></span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">-6</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'bcdef\\n'</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">-2</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'abcde\\n'</span></span><br><span class=\"line\"><span class=\"comment\"># ... 以此类推</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"字符串的运算\">字符串的“运算”</h3>\r\n<p>Python 中的字符串参与运算:</p>\r\n<ul>\r\n<li><code>&quot;str1&quot; + &quot;str2&quot;</code> 拼接一个新的字符串 <code>&quot;str1str2&quot;</code>.</li>\r\n<li><code>&quot;str&quot;*int</code> 重复一个字符串 <code>int</code> 次. 例如 <code>&quot;str&quot;*3</code> == <code>&quot;strstrstr&quot;</code></li>\r\n</ul>\r\n<h1 id=\"数据类型转换\">数据类型转换</h1>\r\n<h2 id=\"int\"><code>int()</code></h2>\r\n<p><code>help(int())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">int</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">int</span><span class=\"params\">([x])</span> -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |  int(x, base=10) -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  Convert a number or string to an integer, or return 0 if no arguments</span></span><br><span class=\"line\"><span class=\"class\"> |  are given.  If x is a number, return x.__int__().  For floating point</span></span><br><span class=\"line\"><span class=\"class\"> |  numbers, this truncates towards zero.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  If x is not a number or if base is given, then x must be a string,</span></span><br><span class=\"line\"><span class=\"class\"> |  bytes, or bytearray instance representing an integer literal in the</span></span><br><span class=\"line\"><span class=\"class\"> |  given base.  The literal can be preceded by '+' or '-' and be surrounded</span></span><br><span class=\"line\"><span class=\"class\"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span></span><br><span class=\"line\"><span class=\"class\"> |  Base 0 means to interpret the base from the string as an integer literal.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>int()</code> 可接受的参数有:\r\n<ul>\r\n<li><code>x</code> 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.</li>\r\n<li><code>base</code> 表示转换时依据的进制基数, 默认 10 进制.</li>\r\n</ul></li>\r\n<li>若 <code>x</code> 是一个整数, 返回其自身.</li>\r\n<li>若 <code>x</code> 是一个浮点数, 其小数部分会被砍掉.</li>\r\n<li>若 <code>x</code> 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符.\r\n<ul>\r\n<li>默认基数为 <code>base=10</code>, 可接受的基数值为 0 或 从 2 到 36.\r\n<ul>\r\n<li>就是说 10 进制下只能有 <code>0123456789</code>, 十六进制下可以有 <code>0123456789abcdef</code>, 最高可以在 36 进制下用 <code>z</code> 表示 <code>35</code>.</li>\r\n<li><code>base=0</code> 的情况下, 根据字符串内容猜测进制. 但适用情况较少:\r\n<ul>\r\n<li><code>0x10</code> 会被识别为 16 进制的 <code>16</code>.</li>\r\n<li><code>f</code> 会被识别为 16 进制的 <code>15</code>.</li>\r\n<li><code>0o10</code> 会被识别为 8 进制的 <code>8</code>. (零后面是小写的字母O)</li>\r\n<li><code>29134</code> 会被识别为 10 进制.</li>\r\n<li><code>01423</code> 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 <code>0</code>.</li>\r\n<li>只能从 <code>16</code> <code>8</code> <code>10</code> 中猜测.</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>字符串中可以在前面有 <code>+ -</code> 正负号. 也可以在两侧有空格.</li>\r\n<li><strong>规定了基数 <code>base</code> 时, 必须输入字符串.</strong></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"float\"><code>float()</code></h2>\r\n<p><code>help(float())</code>:</p>\r\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">float</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">float</span><span class=\"params\">(x=<span class=\"number\">0</span>, /)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"> |  Convert a string or number to a floating point number, if possible.</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 文档说得这么简洁, 我也没啥好说的… 只能用多了再来说说感受了…</p>\r\n<ul>\r\n<li><code>float.hex()</code> 返回一个用 16 进制表示的浮点数.</li>\r\n<li><code>float.fromhex()</code> 从字符串转换一个 16 进制的浮点数. 形式为 <code>0xf.fp+1</code> 用 <code>p</code> 表示 16 为底的指数.</li>\r\n</ul>\r\n<h2 id=\"complex\"><code>complex()</code></h2>\r\n<p><code>help(complex())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">complex</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">complex</span><span class=\"params\">(real=<span class=\"number\">0</span>, imag=<span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">Create</span> <span class=\"title\">a</span> <span class=\"title\">complex</span> <span class=\"title\">number</span> <span class=\"title\">from</span> <span class=\"title\">a</span> <span class=\"title\">real</span> <span class=\"title\">part</span> <span class=\"title\">and</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">imaginary</span> <span class=\"title\">part</span>.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">This</span> <span class=\"title\">is</span> <span class=\"title\">equivalent</span> <span class=\"title\">to</span> <span class=\"params\">(real + imag*<span class=\"number\">1j</span>)</span> <span class=\"title\">where</span> <span class=\"title\">imag</span> <span class=\"title\">defaults</span> <span class=\"title\">to</span> 0.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"str\"><code>str()</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">str</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">str</span><span class=\"params\">(object=<span class=\"string\">''</span>)</span> -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  </span></span><br><span class=\"line\"><span class=\"class\"> |  Create a new string object from the given object. If encoding or</span></span><br><span class=\"line\"><span class=\"class\"> |  errors is specified, then the object must expose a data buffer</span></span><br><span class=\"line\"><span class=\"class\"> |  that will be decoded using the given encoding and error handler.</span></span><br><span class=\"line\"><span class=\"class\"> |  Otherwise, returns the result of object.__str__() (if defined)</span></span><br><span class=\"line\"><span class=\"class\"> |  or repr(object).</span></span><br><span class=\"line\"><span class=\"class\"> |  encoding defaults to sys.getdefaultencoding().</span></span><br><span class=\"line\"><span class=\"class\"> |  errors defaults to 'strict'.</span></span><br></pre></td></tr></table></figure>\r\n<p>大意是说:</p>\r\n<ul>\r\n<li>从给定对象创建一个新的字符串对象. 如果指定了 <code>encoding</code> 或 <code>errors</code>, 则必须公开 <code>bytes_or_buffer</code> 来编码字符串和处理错误信息.</li>\r\n<li><code>str()</code> 可接受的参数有:\r\n<ul>\r\n<li><code>object</code> 被转换的对象.</li>\r\n<li><code>bytes_or_buffer</code> 字节或缓冲区.</li>\r\n<li><code>encoding</code> 字符编码, 默认值由 <code>sys.getdefaultencoding()</code> 获得, 一般为 <code>utf-8</code></li>\r\n<li><code>errors</code> 错误策略. 默认为 <code>strict</code>.</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"其他\">其他</h2>\r\n<ul>\r\n<li><code>hex()</code> 将整数转换为其 16 进制形式的字符串.</li>\r\n<li><code>oct()</code> 将整数转换未其 8 进制形式的字符串.</li>\r\n<li><code>chr()</code> 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 <code>0&lt;=i&lt;=0x10ffff</code>.</li>\r\n<li><code>ord()</code> 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .</li>\r\n<li><code>repr()</code> 类似 <code>str()</code> 但返回的是一个字符串表达式.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>repr(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">\"'string'\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>\r\n"},{"title":"[PyNote]-2-Python控制结构","mathjax":false,"date":"2018-07-27T14:05:51.000Z","_content":"\n### 条件分支\n\n#### 单分支结构\n\n##### `if` 判断结构\n\n```py\nif condition:\n\tsentence1\n\tsentence2\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:` !\n\n#### 多分支结构\n\n##### `if ... else` 判断结构\n\n```py\nif condition:\n    True_block\nelse:\n    False_block\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 `else` 后的语句块.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:`!\n\n##### `if ... elif ... else` 判断结构\n\n```py\nif condition1:\n\tblock 1\nelif condition2:\n\tblock 2\nelif condition3:\n\tblock 3\n\t.\n\t.\nelse:\n\tdefault_block\n```\n\n- Python 检查 conditionX ( X = 1, 2, 3, ...) 的值, 若为 True 则执行 blockX, **执行该分支之后, 退出整个分支结构** (注意此处与 C 语言的 `switch` 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 `else` 为止.\n\n### 循环结构\n\n#### `while` 循环\n\n```py\nwhile condition:\n\tblock\n```\n\n#### `for` 循环\n\n```py\nfor element in list:\n\tblock\n```\n\n- `for` 循环会遍历每一个处于 list 中的元素, 执行语句块.\n\n#### 循环中起控制作用的关键字\n\n|关键字|作用|\n|:---:|:---|\n|`break`|结束当前循环|\n|`continue`|跳过后面语句, 进入下一次循环|\n|`else`|在循环执行完毕之后执行|\n\n- `else` 在循环中的使用举例:\n\n```py\na = 0\nwhile a < 10:\n\ta = a + 1\nelse:\n\tprint(\"The all done\")\n```","source":"_posts/pynote-python控制结构.md","raw":"---\ntitle: '[PyNote]-2-Python控制结构'\nmathjax: False\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-27 22:05:51\n---\n\n### 条件分支\n\n#### 单分支结构\n\n##### `if` 判断结构\n\n```py\nif condition:\n\tsentence1\n\tsentence2\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:` !\n\n#### 多分支结构\n\n##### `if ... else` 判断结构\n\n```py\nif condition:\n    True_block\nelse:\n    False_block\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 `else` 后的语句块.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:`!\n\n##### `if ... elif ... else` 判断结构\n\n```py\nif condition1:\n\tblock 1\nelif condition2:\n\tblock 2\nelif condition3:\n\tblock 3\n\t.\n\t.\nelse:\n\tdefault_block\n```\n\n- Python 检查 conditionX ( X = 1, 2, 3, ...) 的值, 若为 True 则执行 blockX, **执行该分支之后, 退出整个分支结构** (注意此处与 C 语言的 `switch` 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 `else` 为止.\n\n### 循环结构\n\n#### `while` 循环\n\n```py\nwhile condition:\n\tblock\n```\n\n#### `for` 循环\n\n```py\nfor element in list:\n\tblock\n```\n\n- `for` 循环会遍历每一个处于 list 中的元素, 执行语句块.\n\n#### 循环中起控制作用的关键字\n\n|关键字|作用|\n|:---:|:---|\n|`break`|结束当前循环|\n|`continue`|跳过后面语句, 进入下一次循环|\n|`else`|在循环执行完毕之后执行|\n\n- `else` 在循环中的使用举例:\n\n```py\na = 0\nwhile a < 10:\n\ta = a + 1\nelse:\n\tprint(\"The all done\")\n```","slug":"pynote-python控制结构","published":1,"updated":"2018-08-15T16:36:36.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqmf001510lk2y0s1s97","content":"<h3 id=\"条件分支\">条件分支</h3>\r\n<h4 id=\"单分支结构\">单分支结构</h4>\r\n<h5 id=\"if-判断结构\"><code>if</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">\tsentence1</span><br><span class=\"line\">\tsentence2</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code> !</li>\r\n</ul>\r\n<h4 id=\"多分支结构\">多分支结构</h4>\r\n<h5 id=\"if-...-else-判断结构\"><code>if ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">    True_block</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    False_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 <code>else</code> 后的语句块.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code>!</li>\r\n</ul>\r\n<h5 id=\"if-...-elif-...-else-判断结构\"><code>if ... elif ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition1:</span><br><span class=\"line\">\tblock <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition2:</span><br><span class=\"line\">\tblock <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition3:</span><br><span class=\"line\">\tblock <span class=\"number\">3</span></span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tdefault_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 检查 conditionX ( X = 1, 2, 3, …) 的值, 若为 True 则执行 blockX, <strong>执行该分支之后, 退出整个分支结构</strong> (注意此处与 C 语言的 <code>switch</code> 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 <code>else</code> 为止.</li>\r\n</ul>\r\n<h3 id=\"循环结构\">循环结构</h3>\r\n<h4 id=\"while-循环\"><code>while</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> condition:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"for-循环\"><code>for</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>for</code> 循环会遍历每一个处于 list 中的元素, 执行语句块.</li>\r\n</ul>\r\n<h4 id=\"循环中起控制作用的关键字\">循环中起控制作用的关键字</h4>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">关键字</th>\r\n<th style=\"text-align: left;\">作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>break</code></td>\r\n<td style=\"text-align: left;\">结束当前循环</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>continue</code></td>\r\n<td style=\"text-align: left;\">跳过后面语句, 进入下一次循环</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>else</code></td>\r\n<td style=\"text-align: left;\">在循环执行完毕之后执行</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><code>else</code> 在循环中的使用举例:</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">\ta = a + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">\"The all done\"</span>)</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"条件分支\">条件分支</h3>\r\n<h4 id=\"单分支结构\">单分支结构</h4>\r\n<h5 id=\"if-判断结构\"><code>if</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">\tsentence1</span><br><span class=\"line\">\tsentence2</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code> !</li>\r\n</ul>\r\n<h4 id=\"多分支结构\">多分支结构</h4>\r\n<h5 id=\"if-...-else-判断结构\"><code>if ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">    True_block</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    False_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 <code>else</code> 后的语句块.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code>!</li>\r\n</ul>\r\n<h5 id=\"if-...-elif-...-else-判断结构\"><code>if ... elif ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition1:</span><br><span class=\"line\">\tblock <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition2:</span><br><span class=\"line\">\tblock <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition3:</span><br><span class=\"line\">\tblock <span class=\"number\">3</span></span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tdefault_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 检查 conditionX ( X = 1, 2, 3, …) 的值, 若为 True 则执行 blockX, <strong>执行该分支之后, 退出整个分支结构</strong> (注意此处与 C 语言的 <code>switch</code> 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 <code>else</code> 为止.</li>\r\n</ul>\r\n<h3 id=\"循环结构\">循环结构</h3>\r\n<h4 id=\"while-循环\"><code>while</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> condition:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"for-循环\"><code>for</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>for</code> 循环会遍历每一个处于 list 中的元素, 执行语句块.</li>\r\n</ul>\r\n<h4 id=\"循环中起控制作用的关键字\">循环中起控制作用的关键字</h4>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">关键字</th>\r\n<th style=\"text-align: left;\">作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>break</code></td>\r\n<td style=\"text-align: left;\">结束当前循环</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>continue</code></td>\r\n<td style=\"text-align: left;\">跳过后面语句, 进入下一次循环</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>else</code></td>\r\n<td style=\"text-align: left;\">在循环执行完毕之后执行</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><code>else</code> 在循环中的使用举例:</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">\ta = a + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">\"The all done\"</span>)</span><br></pre></td></tr></table></figure>\r\n"},{"title":"[PyNote]-Python模块","_content":"\n# Python 模块的目录结构\n\n```\nModule_root/            # 模块的根目录\n├── __init__.py         # 每一个模块中必须要有 __init__.py 文件\n├── childdir/           # 模块的一个子目录, 被称为包\n│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件\n│   ├── script1.py\n│   └── scriptn.py\n├── childdirn/\n│   ├── __init__.py\n│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.\n|   |   └──script.py\n│   ├── script1.py\n│   └── scriptn.py\n├── script1.py\n├── script2.py\n└── scriptn.py\n```\n\n- 每一个模块中可以含有无数个 `.py` 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(`package`).\n- 模块, 包, `.py` 文件都是 `模块-子模块` 的关系, 本质上都是模块, 可以引用其中任意一级.\n- 一个有效的模块或者包中必须含有 `__init__.py` 文件. \n- `__init__.py` 文件中可以有代码, 也可以是一个空文件. 因为 `__init__.py` 在模块中代表该目录自身.\n\n\n# 在 Python 中引用模块或包\n\n```py\nimport Module_root                      # 引用整个模块\nimport Module_root.childdirn            # 引用模块中的一个包\nimport Module_root.childdir.script1     # 引用模块中的一个包的文件\nfrom . import *                         # 引用当前目录中所有模块\n```\n\n## 引用模块时, Python 解释器做了什么\n\n以以下目录结构为例:\n\n具体文件已打包 [module.example.zip](/assert/repos/python/module.example.zip)\n\n```\nmain/\n    - subdir/\n        - __init__.py\n        - test.py\n    - invalidir/\n        - test.py\n    - __init__.py\n    - echo.py\n    - echo_imported.py\n```\n\n其中,\n\n- `/main/echo_imported.py` 在 `/main/__init__.py` 中引用, 而 `echo.py` 没有.\n- `/main/subdir/__init__.py` 是个空文件\n\n0. 首先, 运行模块下的 `__init__.py` 文件.\n    - 同目录下的其他文件不会被执行.\n    - \n0. 创建一个和模块名一致的变量, 将模块对象赋值给此变量.\n    - 模块对象是模块类的一个实例.\n\n注意:\n\n- 当 Python 解释器直接解释执行 `.py` 文件时, 会将一个特殊变量 `__name__` 赋值为 `\"__main__\"`, 因此, 许多模块中都会有判断结构 `if __name__ == \"__main__\": test()` 方便测试.\n\n# 编写自己的 Python 模块\n\n# 常用系统模块(标准库)\n\n所有系统模块都在 [Python安装目录/Lib/](file:///C:/Python37/Lib/) 中.\n\n- `platform`    获取操作系统平台信息.\n- `sys`         操作 Python 解释器.\n- `os`          操作系统接口.\n- `subprocess`  子进程.\n- `getopt`      解析命令行参数.\n- `re`          正则表达式.\n- `urllib`      网络爬虫.\n- `glob`        模块提供了一个 `glob()` 函数用于用通配符搜索当前目录, 生成文件列表.\n- `random`      生成随机数.","source":"_posts/pynote-python模块.md","raw":"---\ntitle: '[PyNote]-Python模块'\ntags:\n    - Python\n    - Note\ncategories:\n    - Python\n---\n\n# Python 模块的目录结构\n\n```\nModule_root/            # 模块的根目录\n├── __init__.py         # 每一个模块中必须要有 __init__.py 文件\n├── childdir/           # 模块的一个子目录, 被称为包\n│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件\n│   ├── script1.py\n│   └── scriptn.py\n├── childdirn/\n│   ├── __init__.py\n│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.\n|   |   └──script.py\n│   ├── script1.py\n│   └── scriptn.py\n├── script1.py\n├── script2.py\n└── scriptn.py\n```\n\n- 每一个模块中可以含有无数个 `.py` 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(`package`).\n- 模块, 包, `.py` 文件都是 `模块-子模块` 的关系, 本质上都是模块, 可以引用其中任意一级.\n- 一个有效的模块或者包中必须含有 `__init__.py` 文件. \n- `__init__.py` 文件中可以有代码, 也可以是一个空文件. 因为 `__init__.py` 在模块中代表该目录自身.\n\n\n# 在 Python 中引用模块或包\n\n```py\nimport Module_root                      # 引用整个模块\nimport Module_root.childdirn            # 引用模块中的一个包\nimport Module_root.childdir.script1     # 引用模块中的一个包的文件\nfrom . import *                         # 引用当前目录中所有模块\n```\n\n## 引用模块时, Python 解释器做了什么\n\n以以下目录结构为例:\n\n具体文件已打包 [module.example.zip](/assert/repos/python/module.example.zip)\n\n```\nmain/\n    - subdir/\n        - __init__.py\n        - test.py\n    - invalidir/\n        - test.py\n    - __init__.py\n    - echo.py\n    - echo_imported.py\n```\n\n其中,\n\n- `/main/echo_imported.py` 在 `/main/__init__.py` 中引用, 而 `echo.py` 没有.\n- `/main/subdir/__init__.py` 是个空文件\n\n0. 首先, 运行模块下的 `__init__.py` 文件.\n    - 同目录下的其他文件不会被执行.\n    - \n0. 创建一个和模块名一致的变量, 将模块对象赋值给此变量.\n    - 模块对象是模块类的一个实例.\n\n注意:\n\n- 当 Python 解释器直接解释执行 `.py` 文件时, 会将一个特殊变量 `__name__` 赋值为 `\"__main__\"`, 因此, 许多模块中都会有判断结构 `if __name__ == \"__main__\": test()` 方便测试.\n\n# 编写自己的 Python 模块\n\n# 常用系统模块(标准库)\n\n所有系统模块都在 [Python安装目录/Lib/](file:///C:/Python37/Lib/) 中.\n\n- `platform`    获取操作系统平台信息.\n- `sys`         操作 Python 解释器.\n- `os`          操作系统接口.\n- `subprocess`  子进程.\n- `getopt`      解析命令行参数.\n- `re`          正则表达式.\n- `urllib`      网络爬虫.\n- `glob`        模块提供了一个 `glob()` 函数用于用通配符搜索当前目录, 生成文件列表.\n- `random`      生成随机数.","slug":"pynote-python模块","published":1,"date":"2018-08-19T12:03:06.055Z","updated":"2018-08-19T14:43:58.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqmh001810lkfpffz2wf","content":"<h1 id=\"python-模块的目录结构\">Python 模块的目录结构</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module_root/            # 模块的根目录</span><br><span class=\"line\">├── __init__.py         # 每一个模块中必须要有 __init__.py 文件</span><br><span class=\"line\">├── childdir/           # 模块的一个子目录, 被称为包</span><br><span class=\"line\">│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── childdirn/</span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.</span><br><span class=\"line\">|   |   └──script.py</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── script1.py</span><br><span class=\"line\">├── script2.py</span><br><span class=\"line\">└── scriptn.py</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>每一个模块中可以含有无数个 <code>.py</code> 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(<code>package</code>).</li>\r\n<li>模块, 包, <code>.py</code> 文件都是 <code>模块-子模块</code> 的关系, 本质上都是模块, 可以引用其中任意一级.</li>\r\n<li>一个有效的模块或者包中必须含有 <code>__init__.py</code> 文件.</li>\r\n<li><code>__init__.py</code> 文件中可以有代码, 也可以是一个空文件. 因为 <code>__init__.py</code> 在模块中代表该目录自身.</li>\r\n</ul>\r\n<h1 id=\"在-python-中引用模块或包\">在 Python 中引用模块或包</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Module_root                      <span class=\"comment\"># 引用整个模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdirn            <span class=\"comment\"># 引用模块中的一个包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdir.script1     <span class=\"comment\"># 引用模块中的一个包的文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> *                         <span class=\"comment\"># 引用当前目录中所有模块</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"引用模块时-python-解释器做了什么\">引用模块时, Python 解释器做了什么</h2>\r\n<p>以以下目录结构为例:</p>\r\n<p>具体文件已打包 <a href=\"/assert/repos/python/module.example.zip\">module.example.zip</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main/</span><br><span class=\"line\">    - subdir/</span><br><span class=\"line\">        - __init__.py</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - invalidir/</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - __init__.py</span><br><span class=\"line\">    - echo.py</span><br><span class=\"line\">    - echo_imported.py</span><br></pre></td></tr></table></figure>\r\n<p>其中,</p>\r\n<ul>\r\n<li><code>/main/echo_imported.py</code> 在 <code>/main/__init__.py</code> 中引用, 而 <code>echo.py</code> 没有.</li>\r\n<li><code>/main/subdir/__init__.py</code> 是个空文件</li>\r\n</ul>\r\n<ol start=\"0\" type=\"1\">\r\n<li>首先, 运行模块下的 <code>__init__.py</code> 文件.\r\n<ul>\r\n<li>同目录下的其他文件不会被执行.</li>\r\n<li></li>\r\n</ul></li>\r\n<li>创建一个和模块名一致的变量, 将模块对象赋值给此变量.\r\n<ul>\r\n<li>模块对象是模块类的一个实例.</li>\r\n</ul></li>\r\n</ol>\r\n<p>注意:</p>\r\n<ul>\r\n<li>当 Python 解释器直接解释执行 <code>.py</code> 文件时, 会将一个特殊变量 <code>__name__</code> 赋值为 <code>&quot;__main__&quot;</code>, 因此, 许多模块中都会有判断结构 <code>if __name__ == &quot;__main__&quot;: test()</code> 方便测试.</li>\r\n</ul>\r\n<h1 id=\"编写自己的-python-模块\">编写自己的 Python 模块</h1>\r\n<h1 id=\"常用系统模块标准库\">常用系统模块(标准库)</h1>\r\n<p>所有系统模块都在 <a href=\"file:///C:/Python37/Lib/\" target=\"_blank\" rel=\"noopener\">Python安装目录/Lib/</a> 中.</p>\r\n<ul>\r\n<li><code>platform</code> 获取操作系统平台信息.</li>\r\n<li><code>sys</code> 操作 Python 解释器.</li>\r\n<li><code>os</code> 操作系统接口.</li>\r\n<li><code>subprocess</code> 子进程.</li>\r\n<li><code>getopt</code> 解析命令行参数.</li>\r\n<li><code>re</code> 正则表达式.</li>\r\n<li><code>urllib</code> 网络爬虫.</li>\r\n<li><code>glob</code> 模块提供了一个 <code>glob()</code> 函数用于用通配符搜索当前目录, 生成文件列表.</li>\r\n<li><code>random</code> 生成随机数.</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-模块的目录结构\">Python 模块的目录结构</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module_root/            # 模块的根目录</span><br><span class=\"line\">├── __init__.py         # 每一个模块中必须要有 __init__.py 文件</span><br><span class=\"line\">├── childdir/           # 模块的一个子目录, 被称为包</span><br><span class=\"line\">│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── childdirn/</span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.</span><br><span class=\"line\">|   |   └──script.py</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── script1.py</span><br><span class=\"line\">├── script2.py</span><br><span class=\"line\">└── scriptn.py</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>每一个模块中可以含有无数个 <code>.py</code> 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(<code>package</code>).</li>\r\n<li>模块, 包, <code>.py</code> 文件都是 <code>模块-子模块</code> 的关系, 本质上都是模块, 可以引用其中任意一级.</li>\r\n<li>一个有效的模块或者包中必须含有 <code>__init__.py</code> 文件.</li>\r\n<li><code>__init__.py</code> 文件中可以有代码, 也可以是一个空文件. 因为 <code>__init__.py</code> 在模块中代表该目录自身.</li>\r\n</ul>\r\n<h1 id=\"在-python-中引用模块或包\">在 Python 中引用模块或包</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Module_root                      <span class=\"comment\"># 引用整个模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdirn            <span class=\"comment\"># 引用模块中的一个包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdir.script1     <span class=\"comment\"># 引用模块中的一个包的文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> *                         <span class=\"comment\"># 引用当前目录中所有模块</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"引用模块时-python-解释器做了什么\">引用模块时, Python 解释器做了什么</h2>\r\n<p>以以下目录结构为例:</p>\r\n<p>具体文件已打包 <a href=\"/assert/repos/python/module.example.zip\">module.example.zip</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main/</span><br><span class=\"line\">    - subdir/</span><br><span class=\"line\">        - __init__.py</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - invalidir/</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - __init__.py</span><br><span class=\"line\">    - echo.py</span><br><span class=\"line\">    - echo_imported.py</span><br></pre></td></tr></table></figure>\r\n<p>其中,</p>\r\n<ul>\r\n<li><code>/main/echo_imported.py</code> 在 <code>/main/__init__.py</code> 中引用, 而 <code>echo.py</code> 没有.</li>\r\n<li><code>/main/subdir/__init__.py</code> 是个空文件</li>\r\n</ul>\r\n<ol start=\"0\" type=\"1\">\r\n<li>首先, 运行模块下的 <code>__init__.py</code> 文件.\r\n<ul>\r\n<li>同目录下的其他文件不会被执行.</li>\r\n<li></li>\r\n</ul></li>\r\n<li>创建一个和模块名一致的变量, 将模块对象赋值给此变量.\r\n<ul>\r\n<li>模块对象是模块类的一个实例.</li>\r\n</ul></li>\r\n</ol>\r\n<p>注意:</p>\r\n<ul>\r\n<li>当 Python 解释器直接解释执行 <code>.py</code> 文件时, 会将一个特殊变量 <code>__name__</code> 赋值为 <code>&quot;__main__&quot;</code>, 因此, 许多模块中都会有判断结构 <code>if __name__ == &quot;__main__&quot;: test()</code> 方便测试.</li>\r\n</ul>\r\n<h1 id=\"编写自己的-python-模块\">编写自己的 Python 模块</h1>\r\n<h1 id=\"常用系统模块标准库\">常用系统模块(标准库)</h1>\r\n<p>所有系统模块都在 <a href=\"file:///C:/Python37/Lib/\" target=\"_blank\" rel=\"noopener\">Python安装目录/Lib/</a> 中.</p>\r\n<ul>\r\n<li><code>platform</code> 获取操作系统平台信息.</li>\r\n<li><code>sys</code> 操作 Python 解释器.</li>\r\n<li><code>os</code> 操作系统接口.</li>\r\n<li><code>subprocess</code> 子进程.</li>\r\n<li><code>getopt</code> 解析命令行参数.</li>\r\n<li><code>re</code> 正则表达式.</li>\r\n<li><code>urllib</code> 网络爬虫.</li>\r\n<li><code>glob</code> 模块提供了一个 <code>glob()</code> 函数用于用通配符搜索当前目录, 生成文件列表.</li>\r\n<li><code>random</code> 生成随机数.</li>\r\n</ul>\r\n"},{"title":"[PyNote]-1-Python运算符","mathjax":true,"date":"2018-07-27T14:01:59.000Z","_content":"\n### 算术运算\n\n|运算符|功能|\n|:---:|:--:|\n|`+,-,*,/`|与四则运算作用相同|\n|`**`|求幂, `a**b` == $ a^b $|\n|`//`|整除, $ a \\\\div b = (a//b) \\\\cdots (a \\\\% b) $|\n|`%`|取模, $ a \\\\div b = n \\\\cdots ( a \\\\% b) $|\n\n### 赋值运算符\n\nPython 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面.\n例如, `a += (exp)` 等价于 `a = a + (exp)`\n\n|运算符|作用|\n|:-:|-|\n|`=`|`a=b` 将变量 b 的值赋给变量 a|\n|`+=`|`a += exp` 等价于 `a = a + (exp)`|\n|`-=`|`a -= exp` 等价于 `a = a - (exp)`|\n|`*=`|`a *= exp` 等价于 `a = a * (exp)`|\n|`/=`|`a /= exp` 等价于 `a = a / (exp)`|\n|`%=`|`a %= exp` 等价于 `a = a % (exp)`|\n|`**=`|`a **= exp` 等价于 `a = a ** (exp)`|\n|`//=`|`a //= exp` 等价于 `a = a // (exp)`|\n\n### 关系运算\n\n|运算符|功能|\n|:---:|:--:|\n|`>`,`<`|大于, 小于|\n|`>=`,`<=`|大于等于, 小于等于|\n|`==`|等于, 不等于|\n|`!=`,`<>`|不等于|\n\n### 逻辑运算\n\n|运算符|作用|\n|:-:|-|\n|`and`|与, `x and y`, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值|\n|`or`|或, `x or y`, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值|\n|`not`|非, `not x`, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True|\n\n- 注意, 一切非零非空的值都为 `True`, 反之则为 `False`.\n\n### 成员运算符\n\n|运算符|作用|\n|:-:|-|\n|`in`|`element in list` 判断 `element` 是否在 `list` 中, 若是, 则返回 True|\n|`not in`|`element in list` 判断 `element` 是否在 `list` 中, 若不是, 则返回 True|\n\n### 身份运算符\n\n身份运算符用于比较两个对象的存储单元\n\n|运算符|作用|\n|:-:|-|\n|`is`|判断两个标识符是否是同一对象, 若是, 则返回 True|\n|`is not`|判断两个标识符是否是同一对象, 若是, 则返回 False|\n\n- 该运算符判断两个变量是否相同, 等同于 `id(x) == id(y)`\n\n### 位运算符\n\n以 `a = 00110011`, `b = 11001010` 为例\n\n|运算符|作用|\n|:-:|-|\n|`<<`|左移, 将二进制位左移 X 位, `a << 1` 为 `01100110`|\n|`>>`|右移, 将二进制位右移 X 位, `a >> 1` 为 `00011001`|\n|`&`|按位与, 二进制同时为 1, 输出为 1, `a & b` 为 `00000010`|\n|`|`|按位或, 二进制一方为 1, 输出为 1, `a | b` 为 `11111011`|\n|`^`|按位异或, 二进制相异为 1, 相同为 0, `a ^ b` 为 `11111001`|\n|`~`|按位非, 二进制数取反, `~a` 为 `11001100`|\n\n### 运算符优先级\n\n|运算符|描述|\n|:-:|-|\n|`**`|指数 (最高优先级)|\n|`~`,`+`,`-`|按位翻转, 一元加号和减号|\n|`*`,`/`,`%`,`//`|乘，除，取模和取整除|\n|`+`,`-`|加法减法|\n|`>>`,`<<`|右移，左移|\n|`&`|位 'AND'|\n|`^`,`|`|位运算符|\n|`<=`,`<`,`>`,`>=`|比较运算符|\n|`<>`,`==`,`!=`|比较运算符|\n|`=`,`%=`,`/=`,`//=`,`-=`,`+=`,`*=`,`**=`|赋值运算符|\n|`is`,`is not`|身份运算符|\n|`in`,`not in`|成员运算符|\n|`not`,`or`,`and`|逻辑运算符|","source":"_posts/pynote-python运算符.md","raw":"---\ntitle: '[PyNote]-1-Python运算符'\nmathjax: True\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-27 22:01:59\n---\n\n### 算术运算\n\n|运算符|功能|\n|:---:|:--:|\n|`+,-,*,/`|与四则运算作用相同|\n|`**`|求幂, `a**b` == $ a^b $|\n|`//`|整除, $ a \\\\div b = (a//b) \\\\cdots (a \\\\% b) $|\n|`%`|取模, $ a \\\\div b = n \\\\cdots ( a \\\\% b) $|\n\n### 赋值运算符\n\nPython 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面.\n例如, `a += (exp)` 等价于 `a = a + (exp)`\n\n|运算符|作用|\n|:-:|-|\n|`=`|`a=b` 将变量 b 的值赋给变量 a|\n|`+=`|`a += exp` 等价于 `a = a + (exp)`|\n|`-=`|`a -= exp` 等价于 `a = a - (exp)`|\n|`*=`|`a *= exp` 等价于 `a = a * (exp)`|\n|`/=`|`a /= exp` 等价于 `a = a / (exp)`|\n|`%=`|`a %= exp` 等价于 `a = a % (exp)`|\n|`**=`|`a **= exp` 等价于 `a = a ** (exp)`|\n|`//=`|`a //= exp` 等价于 `a = a // (exp)`|\n\n### 关系运算\n\n|运算符|功能|\n|:---:|:--:|\n|`>`,`<`|大于, 小于|\n|`>=`,`<=`|大于等于, 小于等于|\n|`==`|等于, 不等于|\n|`!=`,`<>`|不等于|\n\n### 逻辑运算\n\n|运算符|作用|\n|:-:|-|\n|`and`|与, `x and y`, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值|\n|`or`|或, `x or y`, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值|\n|`not`|非, `not x`, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True|\n\n- 注意, 一切非零非空的值都为 `True`, 反之则为 `False`.\n\n### 成员运算符\n\n|运算符|作用|\n|:-:|-|\n|`in`|`element in list` 判断 `element` 是否在 `list` 中, 若是, 则返回 True|\n|`not in`|`element in list` 判断 `element` 是否在 `list` 中, 若不是, 则返回 True|\n\n### 身份运算符\n\n身份运算符用于比较两个对象的存储单元\n\n|运算符|作用|\n|:-:|-|\n|`is`|判断两个标识符是否是同一对象, 若是, 则返回 True|\n|`is not`|判断两个标识符是否是同一对象, 若是, 则返回 False|\n\n- 该运算符判断两个变量是否相同, 等同于 `id(x) == id(y)`\n\n### 位运算符\n\n以 `a = 00110011`, `b = 11001010` 为例\n\n|运算符|作用|\n|:-:|-|\n|`<<`|左移, 将二进制位左移 X 位, `a << 1` 为 `01100110`|\n|`>>`|右移, 将二进制位右移 X 位, `a >> 1` 为 `00011001`|\n|`&`|按位与, 二进制同时为 1, 输出为 1, `a & b` 为 `00000010`|\n|`|`|按位或, 二进制一方为 1, 输出为 1, `a | b` 为 `11111011`|\n|`^`|按位异或, 二进制相异为 1, 相同为 0, `a ^ b` 为 `11111001`|\n|`~`|按位非, 二进制数取反, `~a` 为 `11001100`|\n\n### 运算符优先级\n\n|运算符|描述|\n|:-:|-|\n|`**`|指数 (最高优先级)|\n|`~`,`+`,`-`|按位翻转, 一元加号和减号|\n|`*`,`/`,`%`,`//`|乘，除，取模和取整除|\n|`+`,`-`|加法减法|\n|`>>`,`<<`|右移，左移|\n|`&`|位 'AND'|\n|`^`,`|`|位运算符|\n|`<=`,`<`,`>`,`>=`|比较运算符|\n|`<>`,`==`,`!=`|比较运算符|\n|`=`,`%=`,`/=`,`//=`,`-=`,`+=`,`*=`,`**=`|赋值运算符|\n|`is`,`is not`|身份运算符|\n|`in`,`not in`|成员运算符|\n|`not`,`or`,`and`|逻辑运算符|","slug":"pynote-python运算符","published":1,"updated":"2018-08-15T16:36:45.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqmi001c10lknph5sfe2","content":"<h3 id=\"算术运算\">算术运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th style=\"text-align: center;\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>+,-,*,/</code></td>\r\n<td style=\"text-align: center;\">与四则运算作用相同</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>**</code></td>\r\n<td style=\"text-align: center;\">求幂, <code>a**b</code> == $ a^b $</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>//</code></td>\r\n<td style=\"text-align: center;\">整除, $ a \\div b = (a//b) \\cdots (a \\% b) $</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>%</code></td>\r\n<td style=\"text-align: center;\">取模, $ a \\div b = n \\cdots ( a \\% b) $</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"赋值运算符\">赋值运算符</h3>\r\n<p>Python 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面. 例如, <code>a += (exp)</code> 等价于 <code>a = a + (exp)</code></p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>=</code></td>\r\n<td><code>a=b</code> 将变量 b 的值赋给变量 a</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>+=</code></td>\r\n<td><code>a += exp</code> 等价于 <code>a = a + (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>-=</code></td>\r\n<td><code>a -= exp</code> 等价于 <code>a = a - (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>*=</code></td>\r\n<td><code>a *= exp</code> 等价于 <code>a = a * (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>/=</code></td>\r\n<td><code>a /= exp</code> 等价于 <code>a = a / (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>%=</code></td>\r\n<td><code>a %= exp</code> 等价于 <code>a = a % (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>**=</code></td>\r\n<td><code>a **= exp</code> 等价于 <code>a = a ** (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>//=</code></td>\r\n<td><code>a //= exp</code> 等价于 <code>a = a // (exp)</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"关系运算\">关系运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th style=\"text-align: center;\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&gt;</code>,<code>&lt;</code></td>\r\n<td style=\"text-align: center;\">大于, 小于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&gt;=</code>,<code>&lt;=</code></td>\r\n<td style=\"text-align: center;\">大于等于, 小于等于</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>==</code></td>\r\n<td style=\"text-align: center;\">等于, 不等于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>!=</code>,<code>&lt;&gt;</code></td>\r\n<td style=\"text-align: center;\">不等于</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"逻辑运算\">逻辑运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>and</code></td>\r\n<td>与, <code>x and y</code>, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>or</code></td>\r\n<td>或, <code>x or y</code>, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>not</code></td>\r\n<td>非, <code>not x</code>, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>注意, 一切非零非空的值都为 <code>True</code>, 反之则为 <code>False</code>.</li>\r\n</ul>\r\n<h3 id=\"成员运算符\">成员运算符</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>not in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若不是, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"身份运算符\">身份运算符</h3>\r\n<p>身份运算符用于比较两个对象的存储单元</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>is</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>is not</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 False</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>该运算符判断两个变量是否相同, 等同于 <code>id(x) == id(y)</code></li>\r\n</ul>\r\n<h3 id=\"位运算符\">位运算符</h3>\r\n<p>以 <code>a = 00110011</code>, <code>b = 11001010</code> 为例</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&lt;&lt;</code></td>\r\n<td>左移, 将二进制位左移 X 位, <code>a &lt;&lt; 1</code> 为 <code>01100110</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&gt;&gt;</code></td>\r\n<td>右移, 将二进制位右移 X 位, <code>a &gt;&gt; 1</code> 为 <code>00011001</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&amp;</code></td>\r\n<td>按位与, 二进制同时为 1, 输出为 1, <code>a &amp; b</code> 为 <code>00000010</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>|</code></td>\r\n<td>按位或, 二进制一方为 1, 输出为 1, <code>a | b</code> 为 <code>11111011</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>^</code></td>\r\n<td>按位异或, 二进制相异为 1, 相同为 0, <code>a ^ b</code> 为 <code>11111001</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>~</code></td>\r\n<td>按位非, 二进制数取反, <code>~a</code> 为 <code>11001100</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"运算符优先级\">运算符优先级</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>**</code></td>\r\n<td>指数 (最高优先级)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>~</code>,<code>+</code>,<code>-</code></td>\r\n<td>按位翻转, 一元加号和减号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>*</code>,<code>/</code>,<code>%</code>,<code>//</code></td>\r\n<td>乘，除，取模和取整除</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>+</code>,<code>-</code></td>\r\n<td>加法减法</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&gt;&gt;</code>,<code>&lt;&lt;</code></td>\r\n<td>右移，左移</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&amp;</code></td>\r\n<td>位 ‘AND’</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>^</code>,<code>|</code></td>\r\n<td>位运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&lt;=</code>,<code>&lt;</code>,<code>&gt;</code>,<code>&gt;=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&lt;&gt;</code>,<code>==</code>,<code>!=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>=</code>,<code>%=</code>,<code>/=</code>,<code>//=</code>,<code>-=</code>,<code>+=</code>,<code>*=</code>,<code>**=</code></td>\r\n<td>赋值运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>is</code>,<code>is not</code></td>\r\n<td>身份运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>in</code>,<code>not in</code></td>\r\n<td>成员运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>not</code>,<code>or</code>,<code>and</code></td>\r\n<td>逻辑运算符</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算术运算\">算术运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th style=\"text-align: center;\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>+,-,*,/</code></td>\r\n<td style=\"text-align: center;\">与四则运算作用相同</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>**</code></td>\r\n<td style=\"text-align: center;\">求幂, <code>a**b</code> == $ a^b $</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>//</code></td>\r\n<td style=\"text-align: center;\">整除, $ a \\div b = (a//b) \\cdots (a \\% b) $</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>%</code></td>\r\n<td style=\"text-align: center;\">取模, $ a \\div b = n \\cdots ( a \\% b) $</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"赋值运算符\">赋值运算符</h3>\r\n<p>Python 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面. 例如, <code>a += (exp)</code> 等价于 <code>a = a + (exp)</code></p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>=</code></td>\r\n<td><code>a=b</code> 将变量 b 的值赋给变量 a</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>+=</code></td>\r\n<td><code>a += exp</code> 等价于 <code>a = a + (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>-=</code></td>\r\n<td><code>a -= exp</code> 等价于 <code>a = a - (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>*=</code></td>\r\n<td><code>a *= exp</code> 等价于 <code>a = a * (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>/=</code></td>\r\n<td><code>a /= exp</code> 等价于 <code>a = a / (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>%=</code></td>\r\n<td><code>a %= exp</code> 等价于 <code>a = a % (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>**=</code></td>\r\n<td><code>a **= exp</code> 等价于 <code>a = a ** (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>//=</code></td>\r\n<td><code>a //= exp</code> 等价于 <code>a = a // (exp)</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"关系运算\">关系运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th style=\"text-align: center;\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&gt;</code>,<code>&lt;</code></td>\r\n<td style=\"text-align: center;\">大于, 小于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&gt;=</code>,<code>&lt;=</code></td>\r\n<td style=\"text-align: center;\">大于等于, 小于等于</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>==</code></td>\r\n<td style=\"text-align: center;\">等于, 不等于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>!=</code>,<code>&lt;&gt;</code></td>\r\n<td style=\"text-align: center;\">不等于</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"逻辑运算\">逻辑运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>and</code></td>\r\n<td>与, <code>x and y</code>, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>or</code></td>\r\n<td>或, <code>x or y</code>, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>not</code></td>\r\n<td>非, <code>not x</code>, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>注意, 一切非零非空的值都为 <code>True</code>, 反之则为 <code>False</code>.</li>\r\n</ul>\r\n<h3 id=\"成员运算符\">成员运算符</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>not in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若不是, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"身份运算符\">身份运算符</h3>\r\n<p>身份运算符用于比较两个对象的存储单元</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>is</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>is not</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 False</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>该运算符判断两个变量是否相同, 等同于 <code>id(x) == id(y)</code></li>\r\n</ul>\r\n<h3 id=\"位运算符\">位运算符</h3>\r\n<p>以 <code>a = 00110011</code>, <code>b = 11001010</code> 为例</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&lt;&lt;</code></td>\r\n<td>左移, 将二进制位左移 X 位, <code>a &lt;&lt; 1</code> 为 <code>01100110</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&gt;&gt;</code></td>\r\n<td>右移, 将二进制位右移 X 位, <code>a &gt;&gt; 1</code> 为 <code>00011001</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&amp;</code></td>\r\n<td>按位与, 二进制同时为 1, 输出为 1, <code>a &amp; b</code> 为 <code>00000010</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>|</code></td>\r\n<td>按位或, 二进制一方为 1, 输出为 1, <code>a | b</code> 为 <code>11111011</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>^</code></td>\r\n<td>按位异或, 二进制相异为 1, 相同为 0, <code>a ^ b</code> 为 <code>11111001</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>~</code></td>\r\n<td>按位非, 二进制数取反, <code>~a</code> 为 <code>11001100</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"运算符优先级\">运算符优先级</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">运算符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>**</code></td>\r\n<td>指数 (最高优先级)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>~</code>,<code>+</code>,<code>-</code></td>\r\n<td>按位翻转, 一元加号和减号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>*</code>,<code>/</code>,<code>%</code>,<code>//</code></td>\r\n<td>乘，除，取模和取整除</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>+</code>,<code>-</code></td>\r\n<td>加法减法</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&gt;&gt;</code>,<code>&lt;&lt;</code></td>\r\n<td>右移，左移</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&amp;</code></td>\r\n<td>位 ‘AND’</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>^</code>,<code>|</code></td>\r\n<td>位运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>&lt;=</code>,<code>&lt;</code>,<code>&gt;</code>,<code>&gt;=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>&lt;&gt;</code>,<code>==</code>,<code>!=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>=</code>,<code>%=</code>,<code>/=</code>,<code>//=</code>,<code>-=</code>,<code>+=</code>,<code>*=</code>,<code>**=</code></td>\r\n<td>赋值运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>is</code>,<code>is not</code></td>\r\n<td>身份运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><code>in</code>,<code>not in</code></td>\r\n<td>成员运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><code>not</code>,<code>or</code>,<code>and</code></td>\r\n<td>逻辑运算符</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n"},{"title":"使用Brook翻墙","date":"2018-07-24T10:12:38.000Z","_content":"# 部署翻墙工具 Brook\n\n[Brook@GitHub](https://github.com/txthinking/brook)\n\n## 租赁 VPS\n\n在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.\n\n我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.\n\n[![Vultr-Billing.png](https://i.loli.net/2018/07/24/5b56e6795aa58.png)](https://i.loli.net/2018/07/24/5b56e6795aa58.png)\n\n只是为了翻墙的话, 购买倒数第二 \\$5/mon 五美元每月的套餐即可. 虽然有更便宜的 \\$2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6...\n\n### 测试 VPS 连接稳定性与速度\n\n首先用 `ping` 的方式测试 vultr 各机房的网络状况.\n\nvultr 机房一览:\n\n|地理位置|域名|\n|:--:|:--|\n|Tokyo|[hnd-jp-ping.vultr.com](hnd-jp-ping.vultr.com)|\n|Singapore|[sgp-ping.vultr.com](sgp-ping.vultr.com)|\n|Amsterdam|[ams-nl-ping.vultr.com](ams-nl-ping.vultr.com)|\n|Paris|[par-fr-ping.vultr.com](par-fr-ping.vultr.com)|\n|Frankfurt|[fra-de-ping.vultr.com](fra-de-ping.vultr.com)|\n|London|[lon-gb-ping.vultr.com](lon-gb-ping.vultr.com)|\n|New York|[nj-us-ping.vultr.com](nj-us-ping.vultr.com)|\n|Chicago|[il-us-ping.vultr.com](il-us-ping.vultr.com)|\n|Dallas|[tx-us-ping.vultr.com](tx-us-ping.vultr.com)|\n|Atlanta|[ga-us-ping.vultr.com](ga-us-ping.vultr.com)|\n|Los Angeles|[lax-ca-us-ping.vultr.com](lax-ca-us-ping.vultr.com)|\n|Miami|[fl-us-ping.vultr.com](fl-us-ping.vultr.com)|\n|Seattle|[wa-us-ping.vultr.com](wa-us-ping.vultr.com)|\n|Silicon Valley|[sjo-ca-us-ping.vultr.com](sjo-ca-us-ping.vultr.com)|\n|Sydney|[syd-au-ping.vultr.com](syd-au-ping.vultr.com)|\n\n下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.\n\n- (Windows PowerShell) `Start-Job -ScriptBlock {python3 ./ping-vultr.py >> ./ping-vultr-out.txt}` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口) \n- (Linux) 使用 `nohup python3 ./ping-vultr.py >> ./ping-vultr-out.txt &` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件.\n\t- 注意, 需要将第 15 行的 `os.system(\"ping \" + domains[a] + \" -n 20\")` 改为 `os.system(\"ping \" + domains[a] + \" -c 20\")`\n\n```py\n# !/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport os\n# 创建一个列表, 储存 vultr 各机房的域名.\nnames = [\"Tokyo\", \"Singapore\", \"Amsterdam\", \"Paris\", \"Frankfurt\", \"London\", \"New York\",\n         \"Chicago\", \"Dallas\", \"Atlanta\", \"Los Angeles\", \"Miami\", \"Seattle\", \"Silicon Valley\", \"Sydney\", ]\ndomains = [\"hnd-jp-ping.vultr.com\", \"sgp-ping.vultr.com\", \"ams-nl-ping.vultr.com\", \"par-fr-ping.vultr.com\", \"fra-de-ping.vultr.com\", \"lon-gb-ping.vultr.com\", \"nj-us-ping.vultr.com\",\n           \"il-us-ping.vultr.com\", \"tx-us-ping.vultr.com\", \"ga-us-ping.vultr.com\", \"lax-ca-us-ping.vultr.com\", \"fl-us-ping.vultr.com\", \"wa-us-ping.vultr.com\", \"sjo-ca-us-ping.vultr.com\", \"syd-au-ping.vultr.com\"]\nj = 0\nwhile j < 14:\n    print(\"\\n\\n========================\")\n    print(\"正在 ping 位于 \\\"%s\\\" 的机房\" % names[j], end='\\n')\n    sys.stdout.flush()\n    os.system(\"ping \" + domains[j] + \" -n 20\")\n    j = j + 1\nprint(\"Done\\a\")\n```\n\n从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.\n\n## 部署 Brook 服务\n\nBrook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)\n\n### 安装 Brook\n\n部署 brook 可以先到 Github 项目主页 [txthinking/Brook](https://github.com/txthinking/brook) 下载相关的可执行文件.\n\n64 位桌面 Linux 系统一般下载 arm64 版本\n\n```sh\nwget \"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"\n```\n\n下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 `mv ./brook_linux_amd64 ./brook`\n之后可以将其链接到 `*/bin` 文件夹, 以便在全局使用 `brook` 指令控制 brook 的运行. 否则你必须 `cd` 到 brook 所在的文件夹才能操作.\n注意文件是否有可执行权限, 如果没有, 使用 `chmod +x ./brook` 给它添加可执行权限.\n\n另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.\n\n```sh\nsudo snap install brook\n```\n\n### 运行 Brook\n\nbrook 在安装完成之后, 就可以使用 `brook <args>` 启动运行, 最简单的方法是\n\n```sh\nnohup brook server -l :port -p password &\n```\n\n- `server` 参数, 表示将其作为服务运行\n- `-l :port` 参数将 `brook` 运行到服务器的某个端口, 将 `port` 替换为任意一个空闲端口即可.\n- `-p password` 设置一个密码.\n- `nohup` 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.\n- 命令最末尾的 `&` 符号表示后台运行.\n\nBrook 还有其他的运行模式. 比如 `raw Socks5`, `shadowsocks` 等. 具体可以看[项目Wiki](https://github.com/txthinking/brook/wiki).\n\n根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 [Shadowsocks](https://github.com/shadowsocks/shadowsocks) 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.\n\n### 系统配置: 端口与防火墙\n\n注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.\n\n例如 Ubuntu 使用的防火墙是 `ufw` , 使用以下指令对 `9999` 端口(就是你运行 brook 使用的端口) 放行:\n\n```sh\nsudo ufw allow 9999\nsudo ufw allow 9999/tcp\nsudo ufw allow 9999/udp\n```\n\n## 使用 Brook\n\n### Windows GUI\n\n在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.\n\n解压密码是: 执掌好运的黑黄之王\n\nPS: 我可喜欢这本小说了.😀\n\n[密码: 3dpu](https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A)\n\n该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 `troggle` 可以开关. 不过 GUI 程序没有设计作为服务端的功能.\n\n![Brook Windows GUI 界面](https://i.loli.net/2018/07/13/5b48411dba980.png)\n\n### Android GUI\n\n一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击\"开始\" 就可以用了. \n\n### Linux CLI\n\nBrook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.\n\n```sh\nnohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password >> ./brook.log 2>&1 &\n```\n\n这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 `2>&1` 表示把 stderr 也输出到 stdout 流中.\n\n## 设置 systemd 守护进程\n\n使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.\n\n[TODO:挖坑待填]","source":"_posts/使用Brook翻墙.md","raw":"---\ntitle: 使用Brook翻墙\ndate: 2018-07-24 18:12:38\ntags:\n  - Brook\n  - 翻墙\ncategories:\n  - 日常\n---\n# 部署翻墙工具 Brook\n\n[Brook@GitHub](https://github.com/txthinking/brook)\n\n## 租赁 VPS\n\n在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.\n\n我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.\n\n[![Vultr-Billing.png](https://i.loli.net/2018/07/24/5b56e6795aa58.png)](https://i.loli.net/2018/07/24/5b56e6795aa58.png)\n\n只是为了翻墙的话, 购买倒数第二 \\$5/mon 五美元每月的套餐即可. 虽然有更便宜的 \\$2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6...\n\n### 测试 VPS 连接稳定性与速度\n\n首先用 `ping` 的方式测试 vultr 各机房的网络状况.\n\nvultr 机房一览:\n\n|地理位置|域名|\n|:--:|:--|\n|Tokyo|[hnd-jp-ping.vultr.com](hnd-jp-ping.vultr.com)|\n|Singapore|[sgp-ping.vultr.com](sgp-ping.vultr.com)|\n|Amsterdam|[ams-nl-ping.vultr.com](ams-nl-ping.vultr.com)|\n|Paris|[par-fr-ping.vultr.com](par-fr-ping.vultr.com)|\n|Frankfurt|[fra-de-ping.vultr.com](fra-de-ping.vultr.com)|\n|London|[lon-gb-ping.vultr.com](lon-gb-ping.vultr.com)|\n|New York|[nj-us-ping.vultr.com](nj-us-ping.vultr.com)|\n|Chicago|[il-us-ping.vultr.com](il-us-ping.vultr.com)|\n|Dallas|[tx-us-ping.vultr.com](tx-us-ping.vultr.com)|\n|Atlanta|[ga-us-ping.vultr.com](ga-us-ping.vultr.com)|\n|Los Angeles|[lax-ca-us-ping.vultr.com](lax-ca-us-ping.vultr.com)|\n|Miami|[fl-us-ping.vultr.com](fl-us-ping.vultr.com)|\n|Seattle|[wa-us-ping.vultr.com](wa-us-ping.vultr.com)|\n|Silicon Valley|[sjo-ca-us-ping.vultr.com](sjo-ca-us-ping.vultr.com)|\n|Sydney|[syd-au-ping.vultr.com](syd-au-ping.vultr.com)|\n\n下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.\n\n- (Windows PowerShell) `Start-Job -ScriptBlock {python3 ./ping-vultr.py >> ./ping-vultr-out.txt}` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口) \n- (Linux) 使用 `nohup python3 ./ping-vultr.py >> ./ping-vultr-out.txt &` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件.\n\t- 注意, 需要将第 15 行的 `os.system(\"ping \" + domains[a] + \" -n 20\")` 改为 `os.system(\"ping \" + domains[a] + \" -c 20\")`\n\n```py\n# !/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport os\n# 创建一个列表, 储存 vultr 各机房的域名.\nnames = [\"Tokyo\", \"Singapore\", \"Amsterdam\", \"Paris\", \"Frankfurt\", \"London\", \"New York\",\n         \"Chicago\", \"Dallas\", \"Atlanta\", \"Los Angeles\", \"Miami\", \"Seattle\", \"Silicon Valley\", \"Sydney\", ]\ndomains = [\"hnd-jp-ping.vultr.com\", \"sgp-ping.vultr.com\", \"ams-nl-ping.vultr.com\", \"par-fr-ping.vultr.com\", \"fra-de-ping.vultr.com\", \"lon-gb-ping.vultr.com\", \"nj-us-ping.vultr.com\",\n           \"il-us-ping.vultr.com\", \"tx-us-ping.vultr.com\", \"ga-us-ping.vultr.com\", \"lax-ca-us-ping.vultr.com\", \"fl-us-ping.vultr.com\", \"wa-us-ping.vultr.com\", \"sjo-ca-us-ping.vultr.com\", \"syd-au-ping.vultr.com\"]\nj = 0\nwhile j < 14:\n    print(\"\\n\\n========================\")\n    print(\"正在 ping 位于 \\\"%s\\\" 的机房\" % names[j], end='\\n')\n    sys.stdout.flush()\n    os.system(\"ping \" + domains[j] + \" -n 20\")\n    j = j + 1\nprint(\"Done\\a\")\n```\n\n从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.\n\n## 部署 Brook 服务\n\nBrook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)\n\n### 安装 Brook\n\n部署 brook 可以先到 Github 项目主页 [txthinking/Brook](https://github.com/txthinking/brook) 下载相关的可执行文件.\n\n64 位桌面 Linux 系统一般下载 arm64 版本\n\n```sh\nwget \"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"\n```\n\n下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 `mv ./brook_linux_amd64 ./brook`\n之后可以将其链接到 `*/bin` 文件夹, 以便在全局使用 `brook` 指令控制 brook 的运行. 否则你必须 `cd` 到 brook 所在的文件夹才能操作.\n注意文件是否有可执行权限, 如果没有, 使用 `chmod +x ./brook` 给它添加可执行权限.\n\n另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.\n\n```sh\nsudo snap install brook\n```\n\n### 运行 Brook\n\nbrook 在安装完成之后, 就可以使用 `brook <args>` 启动运行, 最简单的方法是\n\n```sh\nnohup brook server -l :port -p password &\n```\n\n- `server` 参数, 表示将其作为服务运行\n- `-l :port` 参数将 `brook` 运行到服务器的某个端口, 将 `port` 替换为任意一个空闲端口即可.\n- `-p password` 设置一个密码.\n- `nohup` 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.\n- 命令最末尾的 `&` 符号表示后台运行.\n\nBrook 还有其他的运行模式. 比如 `raw Socks5`, `shadowsocks` 等. 具体可以看[项目Wiki](https://github.com/txthinking/brook/wiki).\n\n根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 [Shadowsocks](https://github.com/shadowsocks/shadowsocks) 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.\n\n### 系统配置: 端口与防火墙\n\n注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.\n\n例如 Ubuntu 使用的防火墙是 `ufw` , 使用以下指令对 `9999` 端口(就是你运行 brook 使用的端口) 放行:\n\n```sh\nsudo ufw allow 9999\nsudo ufw allow 9999/tcp\nsudo ufw allow 9999/udp\n```\n\n## 使用 Brook\n\n### Windows GUI\n\n在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.\n\n解压密码是: 执掌好运的黑黄之王\n\nPS: 我可喜欢这本小说了.😀\n\n[密码: 3dpu](https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A)\n\n该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 `troggle` 可以开关. 不过 GUI 程序没有设计作为服务端的功能.\n\n![Brook Windows GUI 界面](https://i.loli.net/2018/07/13/5b48411dba980.png)\n\n### Android GUI\n\n一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击\"开始\" 就可以用了. \n\n### Linux CLI\n\nBrook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.\n\n```sh\nnohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password >> ./brook.log 2>&1 &\n```\n\n这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 `2>&1` 表示把 stderr 也输出到 stdout 流中.\n\n## 设置 systemd 守护进程\n\n使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.\n\n[TODO:挖坑待填]","slug":"使用Brook翻墙","published":1,"updated":"2018-07-27T12:02:48.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqmk001f10lkbfgrwa1s","content":"<h1 id=\"部署翻墙工具-brook\">部署翻墙工具 Brook</h1>\r\n<p><a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">Brook@GitHub</a></p>\r\n<h2 id=\"租赁-vps\">租赁 VPS</h2>\r\n<p>在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.</p>\r\n<p>我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.</p>\r\n<p><a href=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" alt=\"Vultr-Billing.png\"></a></p>\r\n<p>只是为了翻墙的话, 购买倒数第二 $5/mon 五美元每月的套餐即可. 虽然有更便宜的 $2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6…</p>\r\n<h3 id=\"测试-vps-连接稳定性与速度\">测试 VPS 连接稳定性与速度</h3>\r\n<p>首先用 <code>ping</code> 的方式测试 vultr 各机房的网络状况.</p>\r\n<p>vultr 机房一览:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">地理位置</th>\r\n<th style=\"text-align: left;\">域名</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Tokyo</td>\r\n<td style=\"text-align: left;\"><a href=\"hnd-jp-ping.vultr.com\" class=\"uri\">hnd-jp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Singapore</td>\r\n<td style=\"text-align: left;\"><a href=\"sgp-ping.vultr.com\" class=\"uri\">sgp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Amsterdam</td>\r\n<td style=\"text-align: left;\"><a href=\"ams-nl-ping.vultr.com\" class=\"uri\">ams-nl-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Paris</td>\r\n<td style=\"text-align: left;\"><a href=\"par-fr-ping.vultr.com\" class=\"uri\">par-fr-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Frankfurt</td>\r\n<td style=\"text-align: left;\"><a href=\"fra-de-ping.vultr.com\" class=\"uri\">fra-de-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">London</td>\r\n<td style=\"text-align: left;\"><a href=\"lon-gb-ping.vultr.com\" class=\"uri\">lon-gb-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">New York</td>\r\n<td style=\"text-align: left;\"><a href=\"nj-us-ping.vultr.com\" class=\"uri\">nj-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Chicago</td>\r\n<td style=\"text-align: left;\"><a href=\"il-us-ping.vultr.com\" class=\"uri\">il-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Dallas</td>\r\n<td style=\"text-align: left;\"><a href=\"tx-us-ping.vultr.com\" class=\"uri\">tx-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Atlanta</td>\r\n<td style=\"text-align: left;\"><a href=\"ga-us-ping.vultr.com\" class=\"uri\">ga-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Los Angeles</td>\r\n<td style=\"text-align: left;\"><a href=\"lax-ca-us-ping.vultr.com\" class=\"uri\">lax-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Miami</td>\r\n<td style=\"text-align: left;\"><a href=\"fl-us-ping.vultr.com\" class=\"uri\">fl-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Seattle</td>\r\n<td style=\"text-align: left;\"><a href=\"wa-us-ping.vultr.com\" class=\"uri\">wa-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Silicon Valley</td>\r\n<td style=\"text-align: left;\"><a href=\"sjo-ca-us-ping.vultr.com\" class=\"uri\">sjo-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Sydney</td>\r\n<td style=\"text-align: left;\"><a href=\"syd-au-ping.vultr.com\" class=\"uri\">syd-au-ping.vultr.com</a></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.</p>\r\n<ul>\r\n<li>(Windows PowerShell) <code>Start-Job -ScriptBlock {python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt}</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口)</li>\r\n<li>(Linux) 使用 <code>nohup python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt &amp;</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件.\r\n<ul>\r\n<li>注意, 需要将第 15 行的 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -n 20&quot;)</code> 改为 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -c 20&quot;)</code></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># !/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 创建一个列表, 储存 vultr 各机房的域名.</span></span><br><span class=\"line\">names = [<span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"Singapore\"</span>, <span class=\"string\">\"Amsterdam\"</span>, <span class=\"string\">\"Paris\"</span>, <span class=\"string\">\"Frankfurt\"</span>, <span class=\"string\">\"London\"</span>, <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"Chicago\"</span>, <span class=\"string\">\"Dallas\"</span>, <span class=\"string\">\"Atlanta\"</span>, <span class=\"string\">\"Los Angeles\"</span>, <span class=\"string\">\"Miami\"</span>, <span class=\"string\">\"Seattle\"</span>, <span class=\"string\">\"Silicon Valley\"</span>, <span class=\"string\">\"Sydney\"</span>, ]</span><br><span class=\"line\">domains = [<span class=\"string\">\"hnd-jp-ping.vultr.com\"</span>, <span class=\"string\">\"sgp-ping.vultr.com\"</span>, <span class=\"string\">\"ams-nl-ping.vultr.com\"</span>, <span class=\"string\">\"par-fr-ping.vultr.com\"</span>, <span class=\"string\">\"fra-de-ping.vultr.com\"</span>, <span class=\"string\">\"lon-gb-ping.vultr.com\"</span>, <span class=\"string\">\"nj-us-ping.vultr.com\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"il-us-ping.vultr.com\"</span>, <span class=\"string\">\"tx-us-ping.vultr.com\"</span>, <span class=\"string\">\"ga-us-ping.vultr.com\"</span>, <span class=\"string\">\"lax-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"fl-us-ping.vultr.com\"</span>, <span class=\"string\">\"wa-us-ping.vultr.com\"</span>, <span class=\"string\">\"sjo-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"syd-au-ping.vultr.com\"</span>]</span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &lt; <span class=\"number\">14</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"\\n\\n========================\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"正在 ping 位于 \\\"%s\\\" 的机房\"</span> % names[j], end=<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    sys.stdout.flush()</span><br><span class=\"line\">    os.system(<span class=\"string\">\"ping \"</span> + domains[j] + <span class=\"string\">\" -n 20\"</span>)</span><br><span class=\"line\">    j = j + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">\"Done\\a\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.</p>\r\n<h2 id=\"部署-brook-服务\">部署 Brook 服务</h2>\r\n<p>Brook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)</p>\r\n<h3 id=\"安装-brook\">安装 Brook</h3>\r\n<p>部署 brook 可以先到 Github 项目主页 <a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">txthinking/Brook</a> 下载相关的可执行文件.</p>\r\n<p>64 位桌面 Linux 系统一般下载 arm64 版本</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget <span class=\"string\">\"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"</span></span><br></pre></td></tr></table></figure>\r\n<p>下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 <code>mv ./brook_linux_amd64 ./brook</code> 之后可以将其链接到 <code>*/bin</code> 文件夹, 以便在全局使用 <code>brook</code> 指令控制 brook 的运行. 否则你必须 <code>cd</code> 到 brook 所在的文件夹才能操作. 注意文件是否有可执行权限, 如果没有, 使用 <code>chmod +x ./brook</code> 给它添加可执行权限.</p>\r\n<p>另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install brook</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"运行-brook\">运行 Brook</h3>\r\n<p>brook 在安装完成之后, 就可以使用 <code>brook &lt;args&gt;</code> 启动运行, 最简单的方法是</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook server -l :port -p password &amp;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>server</code> 参数, 表示将其作为服务运行</li>\r\n<li><code>-l :port</code> 参数将 <code>brook</code> 运行到服务器的某个端口, 将 <code>port</code> 替换为任意一个空闲端口即可.</li>\r\n<li><code>-p password</code> 设置一个密码.</li>\r\n<li><code>nohup</code> 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.</li>\r\n<li>命令最末尾的 <code>&amp;</code> 符号表示后台运行.</li>\r\n</ul>\r\n<p>Brook 还有其他的运行模式. 比如 <code>raw Socks5</code>, <code>shadowsocks</code> 等. 具体可以看<a href=\"https://github.com/txthinking/brook/wiki\" target=\"_blank\" rel=\"noopener\">项目Wiki</a>.</p>\r\n<p>根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 <a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a> 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.</p>\r\n<h3 id=\"系统配置-端口与防火墙\">系统配置: 端口与防火墙</h3>\r\n<p>注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.</p>\r\n<p>例如 Ubuntu 使用的防火墙是 <code>ufw</code> , 使用以下指令对 <code>9999</code> 端口(就是你运行 brook 使用的端口) 放行:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 9999</span><br><span class=\"line\">sudo ufw allow 9999/tcp</span><br><span class=\"line\">sudo ufw allow 9999/udp</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"使用-brook\">使用 Brook</h2>\r\n<h3 id=\"windows-gui\">Windows GUI</h3>\r\n<p>在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.</p>\r\n<p>解压密码是: 执掌好运的黑黄之王</p>\r\n<p>PS: 我可喜欢这本小说了.😀</p>\r\n<p><a href=\"https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A\" target=\"_blank\" rel=\"noopener\">密码: 3dpu</a></p>\r\n<p>该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 <code>troggle</code> 可以开关. 不过 GUI 程序没有设计作为服务端的功能.</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2018/07/13/5b48411dba980.png\" alt=\"Brook Windows GUI 界面\"><figcaption>Brook Windows GUI 界面</figcaption>\r\n</figure>\r\n<h3 id=\"android-gui\">Android GUI</h3>\r\n<p>一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击“开始” 就可以用了.</p>\r\n<h3 id=\"linux-cli\">Linux CLI</h3>\r\n<p>Brook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password &gt;&gt; ./brook.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\r\n<p>这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 <code>2&gt;&amp;1</code> 表示把 stderr 也输出到 stdout 流中.</p>\r\n<h2 id=\"设置-systemd-守护进程\">设置 systemd 守护进程</h2>\r\n<p>使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.</p>\r\n<p>[TODO:挖坑待填]</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"部署翻墙工具-brook\">部署翻墙工具 Brook</h1>\r\n<p><a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">Brook@GitHub</a></p>\r\n<h2 id=\"租赁-vps\">租赁 VPS</h2>\r\n<p>在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.</p>\r\n<p>我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.</p>\r\n<p><a href=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" alt=\"Vultr-Billing.png\"></a></p>\r\n<p>只是为了翻墙的话, 购买倒数第二 $5/mon 五美元每月的套餐即可. 虽然有更便宜的 $2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6…</p>\r\n<h3 id=\"测试-vps-连接稳定性与速度\">测试 VPS 连接稳定性与速度</h3>\r\n<p>首先用 <code>ping</code> 的方式测试 vultr 各机房的网络状况.</p>\r\n<p>vultr 机房一览:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">地理位置</th>\r\n<th style=\"text-align: left;\">域名</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Tokyo</td>\r\n<td style=\"text-align: left;\"><a href=\"hnd-jp-ping.vultr.com\" class=\"uri\">hnd-jp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Singapore</td>\r\n<td style=\"text-align: left;\"><a href=\"sgp-ping.vultr.com\" class=\"uri\">sgp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Amsterdam</td>\r\n<td style=\"text-align: left;\"><a href=\"ams-nl-ping.vultr.com\" class=\"uri\">ams-nl-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Paris</td>\r\n<td style=\"text-align: left;\"><a href=\"par-fr-ping.vultr.com\" class=\"uri\">par-fr-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Frankfurt</td>\r\n<td style=\"text-align: left;\"><a href=\"fra-de-ping.vultr.com\" class=\"uri\">fra-de-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">London</td>\r\n<td style=\"text-align: left;\"><a href=\"lon-gb-ping.vultr.com\" class=\"uri\">lon-gb-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">New York</td>\r\n<td style=\"text-align: left;\"><a href=\"nj-us-ping.vultr.com\" class=\"uri\">nj-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Chicago</td>\r\n<td style=\"text-align: left;\"><a href=\"il-us-ping.vultr.com\" class=\"uri\">il-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Dallas</td>\r\n<td style=\"text-align: left;\"><a href=\"tx-us-ping.vultr.com\" class=\"uri\">tx-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Atlanta</td>\r\n<td style=\"text-align: left;\"><a href=\"ga-us-ping.vultr.com\" class=\"uri\">ga-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Los Angeles</td>\r\n<td style=\"text-align: left;\"><a href=\"lax-ca-us-ping.vultr.com\" class=\"uri\">lax-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Miami</td>\r\n<td style=\"text-align: left;\"><a href=\"fl-us-ping.vultr.com\" class=\"uri\">fl-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Seattle</td>\r\n<td style=\"text-align: left;\"><a href=\"wa-us-ping.vultr.com\" class=\"uri\">wa-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Silicon Valley</td>\r\n<td style=\"text-align: left;\"><a href=\"sjo-ca-us-ping.vultr.com\" class=\"uri\">sjo-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Sydney</td>\r\n<td style=\"text-align: left;\"><a href=\"syd-au-ping.vultr.com\" class=\"uri\">syd-au-ping.vultr.com</a></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.</p>\r\n<ul>\r\n<li>(Windows PowerShell) <code>Start-Job -ScriptBlock {python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt}</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口)</li>\r\n<li>(Linux) 使用 <code>nohup python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt &amp;</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件.\r\n<ul>\r\n<li>注意, 需要将第 15 行的 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -n 20&quot;)</code> 改为 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -c 20&quot;)</code></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># !/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 创建一个列表, 储存 vultr 各机房的域名.</span></span><br><span class=\"line\">names = [<span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"Singapore\"</span>, <span class=\"string\">\"Amsterdam\"</span>, <span class=\"string\">\"Paris\"</span>, <span class=\"string\">\"Frankfurt\"</span>, <span class=\"string\">\"London\"</span>, <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"Chicago\"</span>, <span class=\"string\">\"Dallas\"</span>, <span class=\"string\">\"Atlanta\"</span>, <span class=\"string\">\"Los Angeles\"</span>, <span class=\"string\">\"Miami\"</span>, <span class=\"string\">\"Seattle\"</span>, <span class=\"string\">\"Silicon Valley\"</span>, <span class=\"string\">\"Sydney\"</span>, ]</span><br><span class=\"line\">domains = [<span class=\"string\">\"hnd-jp-ping.vultr.com\"</span>, <span class=\"string\">\"sgp-ping.vultr.com\"</span>, <span class=\"string\">\"ams-nl-ping.vultr.com\"</span>, <span class=\"string\">\"par-fr-ping.vultr.com\"</span>, <span class=\"string\">\"fra-de-ping.vultr.com\"</span>, <span class=\"string\">\"lon-gb-ping.vultr.com\"</span>, <span class=\"string\">\"nj-us-ping.vultr.com\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"il-us-ping.vultr.com\"</span>, <span class=\"string\">\"tx-us-ping.vultr.com\"</span>, <span class=\"string\">\"ga-us-ping.vultr.com\"</span>, <span class=\"string\">\"lax-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"fl-us-ping.vultr.com\"</span>, <span class=\"string\">\"wa-us-ping.vultr.com\"</span>, <span class=\"string\">\"sjo-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"syd-au-ping.vultr.com\"</span>]</span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &lt; <span class=\"number\">14</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"\\n\\n========================\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"正在 ping 位于 \\\"%s\\\" 的机房\"</span> % names[j], end=<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    sys.stdout.flush()</span><br><span class=\"line\">    os.system(<span class=\"string\">\"ping \"</span> + domains[j] + <span class=\"string\">\" -n 20\"</span>)</span><br><span class=\"line\">    j = j + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">\"Done\\a\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.</p>\r\n<h2 id=\"部署-brook-服务\">部署 Brook 服务</h2>\r\n<p>Brook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)</p>\r\n<h3 id=\"安装-brook\">安装 Brook</h3>\r\n<p>部署 brook 可以先到 Github 项目主页 <a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">txthinking/Brook</a> 下载相关的可执行文件.</p>\r\n<p>64 位桌面 Linux 系统一般下载 arm64 版本</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget <span class=\"string\">\"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"</span></span><br></pre></td></tr></table></figure>\r\n<p>下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 <code>mv ./brook_linux_amd64 ./brook</code> 之后可以将其链接到 <code>*/bin</code> 文件夹, 以便在全局使用 <code>brook</code> 指令控制 brook 的运行. 否则你必须 <code>cd</code> 到 brook 所在的文件夹才能操作. 注意文件是否有可执行权限, 如果没有, 使用 <code>chmod +x ./brook</code> 给它添加可执行权限.</p>\r\n<p>另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install brook</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"运行-brook\">运行 Brook</h3>\r\n<p>brook 在安装完成之后, 就可以使用 <code>brook &lt;args&gt;</code> 启动运行, 最简单的方法是</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook server -l :port -p password &amp;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>server</code> 参数, 表示将其作为服务运行</li>\r\n<li><code>-l :port</code> 参数将 <code>brook</code> 运行到服务器的某个端口, 将 <code>port</code> 替换为任意一个空闲端口即可.</li>\r\n<li><code>-p password</code> 设置一个密码.</li>\r\n<li><code>nohup</code> 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.</li>\r\n<li>命令最末尾的 <code>&amp;</code> 符号表示后台运行.</li>\r\n</ul>\r\n<p>Brook 还有其他的运行模式. 比如 <code>raw Socks5</code>, <code>shadowsocks</code> 等. 具体可以看<a href=\"https://github.com/txthinking/brook/wiki\" target=\"_blank\" rel=\"noopener\">项目Wiki</a>.</p>\r\n<p>根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 <a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a> 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.</p>\r\n<h3 id=\"系统配置-端口与防火墙\">系统配置: 端口与防火墙</h3>\r\n<p>注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.</p>\r\n<p>例如 Ubuntu 使用的防火墙是 <code>ufw</code> , 使用以下指令对 <code>9999</code> 端口(就是你运行 brook 使用的端口) 放行:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 9999</span><br><span class=\"line\">sudo ufw allow 9999/tcp</span><br><span class=\"line\">sudo ufw allow 9999/udp</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"使用-brook\">使用 Brook</h2>\r\n<h3 id=\"windows-gui\">Windows GUI</h3>\r\n<p>在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.</p>\r\n<p>解压密码是: 执掌好运的黑黄之王</p>\r\n<p>PS: 我可喜欢这本小说了.😀</p>\r\n<p><a href=\"https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A\" target=\"_blank\" rel=\"noopener\">密码: 3dpu</a></p>\r\n<p>该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 <code>troggle</code> 可以开关. 不过 GUI 程序没有设计作为服务端的功能.</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2018/07/13/5b48411dba980.png\" alt=\"Brook Windows GUI 界面\"><figcaption>Brook Windows GUI 界面</figcaption>\r\n</figure>\r\n<h3 id=\"android-gui\">Android GUI</h3>\r\n<p>一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击“开始” 就可以用了.</p>\r\n<h3 id=\"linux-cli\">Linux CLI</h3>\r\n<p>Brook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password &gt;&gt; ./brook.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\r\n<p>这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 <code>2&gt;&amp;1</code> 表示把 stderr 也输出到 stdout 流中.</p>\r\n<h2 id=\"设置-systemd-守护进程\">设置 systemd 守护进程</h2>\r\n<p>使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.</p>\r\n<p>[TODO:挖坑待填]</p>\r\n"},{"title":"[PyNote]-try..except..raise异常处理","mathjax":false,"date":"2018-08-15T14:39:39.000Z","_content":"\n- [`try...except`](#try...except)\n- [`try...except{ErrorType}`](#try...except{ErrorType})\n- [`try...except...else`](#可以使用-else-关键词)\n- [`raise`](#raise-抛出异常)\n- [`try..finally`](#异常清理行为)\n- [`with...as`](#使用-with...as-语句)\n\n# 语法\n\n## `try...except`\n\n```py\nb = 10\nc = 0\na = b / c\nprint(\"a=%d, b=%d, c=%d\"%(a, b, c))\n```\n\n以上代码, 如果直接执行的话会报一个[错误](#ZeroDivisionError), 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 `try...except` 语句进行错误处理.\n\n```py\ntry:\n    b = 10\n    c = 0\n    a = b / c\n    print(\"a=%d, b=%d, c=%d\"%(a, b, c))\nexcept:\n    c = 2\n    a = b / c\n```\n\n但是使用了 `try...except` 语句后, 如果有任何错误, Python 会执行 `except:` 后的语句, 然后继续. 具体的执行顺序:\n\n0. 执行 `try:` 后语句, 直到遇到错误部分\n0. 在错误处中断, 执行 `except:` 后语句\n0. 在错误处重启, 继续执行 `try:` 后剩余部分(发生错误的那一行会被忽略)\n\n<div id=\"ZeroDivisionError\"></div>\n\n```py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n```\n## `try...except{ErrorType}`\n\n在 `try...except` 语句中可以指定错误类型:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\n```\n\n以上语句可以特异性处理 `ZeroDivisionError` 类型的错误, 但是在 `try:` 中遇到其它类型的错误, 程序依然会终止.\n\n### 可以在一个 `except` 中处理多种异常\n\n需要在 `{ErrorType}` 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept (ZeroDivisionError, SyntaxError):\n    print(ZeroDivisionError.__doc__)\n    print(SyntaxError.__doc__)\n```\n\n### 可以使用多个 `except` 关键词\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\nexcept SyntaxError:\n    print(SyntaxError.__doc__)\nexcept:\n    print(\"Unknown\")\n```\n\n- 发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.\n- 可以在最后使用无指定类型的 `except:` 任何异常类型都可以触发它.\n- 在一个 `try...except` 结构中, 最多触发一次 `except`, 之后便会退出该结构.\n\n### 可以使用 `as` 关键字给 `except` 后的错误类型取别名.如:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\n```\n\n### 可以使用 `else` 关键词\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\nelse:\n    print(\"Everything is OK!\")\n```\n\n如果没有异常, 则会运行 `else` 后的语句.\n\n## `raise` 抛出异常\n\n使用语句\n\n```py\nraise ErrorType('提示字符串')\n```\n\n抛出一个异常.\n\n- 抛出异常之后, 程序将停止运行.\n- `raise` 可以不接参数, 这将抛出当前异常(只能运用在`except`后)\n- `raise` 后接的参数必须是一个异常的 `类` 或 `实例`.\n\n# Python 中存在的异常类型\n\n## Python 中的基本异常类型\n\n|异常类型|说明|\n|:-:|-|\n|Exception|**所有异常的基类**|\n|AttributeError|特性应用或赋值失败时触发|\n|IOError|试图打开不存在的文件时触发|\n|IndexError|在使用序列中不存在的索引时触发|\n|KeyError|在使用映射不存在的键时触发|\n|NameError|在找不到名字(变量)时触发|\n|SyntaxError|代码出现语法错误时触发|\n|TypeError|在内建操作或者函数应用于错误类型的对象时触发|\n|ValueError|在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发|\n|ZeroDivisionError|在除法或者地板除操作的第二个操作数为 0 时触发|\n\n## 自定义异常类型\n\n可以通过创建一个继承了 `Exception` 的子类的方式来创建自定义异常类.\n\n```py\nclass MyError(Exception):\n    def __init__(self, expression, suggestion):\n        self.expression = expression\n        self.suggestion = suggestion\n    def __str__(self):\n        print(\"MyError: %s\\n\\tSuggestion: %s\"%(self.expression, self.suggestion))\n```\n\n注意定义一个 `__str__` 方法, 这个方法定义了抛出异常时进行的动作.\n\n# 异常清理行为\n\n```py\ntry:\n    pass\nfinally:\n    pass\n```\n\n无论 `try` 中是否有异常, `finally` 后的语句一定会执行.\n\n## 使用 `with...as` 语句\n\n`with...as` 语句可以调用对象预定义的清理行为. 如:\n\n```py\nwith open('./test.txt', 'r') as f:\n    for i in f:\n        print(i)\n```\n\n将会保证 `with..as:` 后的语句块执行完毕后调用 `close()`(文件对象的预定义清理行为). ","source":"_posts/pynote-try-except-raise异常处理.md","raw":"---\ntitle: '[PyNote]-try..except..raise异常处理'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-08-15 22:39:39\n---\n\n- [`try...except`](#try...except)\n- [`try...except{ErrorType}`](#try...except{ErrorType})\n- [`try...except...else`](#可以使用-else-关键词)\n- [`raise`](#raise-抛出异常)\n- [`try..finally`](#异常清理行为)\n- [`with...as`](#使用-with...as-语句)\n\n# 语法\n\n## `try...except`\n\n```py\nb = 10\nc = 0\na = b / c\nprint(\"a=%d, b=%d, c=%d\"%(a, b, c))\n```\n\n以上代码, 如果直接执行的话会报一个[错误](#ZeroDivisionError), 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 `try...except` 语句进行错误处理.\n\n```py\ntry:\n    b = 10\n    c = 0\n    a = b / c\n    print(\"a=%d, b=%d, c=%d\"%(a, b, c))\nexcept:\n    c = 2\n    a = b / c\n```\n\n但是使用了 `try...except` 语句后, 如果有任何错误, Python 会执行 `except:` 后的语句, 然后继续. 具体的执行顺序:\n\n0. 执行 `try:` 后语句, 直到遇到错误部分\n0. 在错误处中断, 执行 `except:` 后语句\n0. 在错误处重启, 继续执行 `try:` 后剩余部分(发生错误的那一行会被忽略)\n\n<div id=\"ZeroDivisionError\"></div>\n\n```py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n```\n## `try...except{ErrorType}`\n\n在 `try...except` 语句中可以指定错误类型:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\n```\n\n以上语句可以特异性处理 `ZeroDivisionError` 类型的错误, 但是在 `try:` 中遇到其它类型的错误, 程序依然会终止.\n\n### 可以在一个 `except` 中处理多种异常\n\n需要在 `{ErrorType}` 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept (ZeroDivisionError, SyntaxError):\n    print(ZeroDivisionError.__doc__)\n    print(SyntaxError.__doc__)\n```\n\n### 可以使用多个 `except` 关键词\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\nexcept SyntaxError:\n    print(SyntaxError.__doc__)\nexcept:\n    print(\"Unknown\")\n```\n\n- 发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.\n- 可以在最后使用无指定类型的 `except:` 任何异常类型都可以触发它.\n- 在一个 `try...except` 结构中, 最多触发一次 `except`, 之后便会退出该结构.\n\n### 可以使用 `as` 关键字给 `except` 后的错误类型取别名.如:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\n```\n\n### 可以使用 `else` 关键词\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\nelse:\n    print(\"Everything is OK!\")\n```\n\n如果没有异常, 则会运行 `else` 后的语句.\n\n## `raise` 抛出异常\n\n使用语句\n\n```py\nraise ErrorType('提示字符串')\n```\n\n抛出一个异常.\n\n- 抛出异常之后, 程序将停止运行.\n- `raise` 可以不接参数, 这将抛出当前异常(只能运用在`except`后)\n- `raise` 后接的参数必须是一个异常的 `类` 或 `实例`.\n\n# Python 中存在的异常类型\n\n## Python 中的基本异常类型\n\n|异常类型|说明|\n|:-:|-|\n|Exception|**所有异常的基类**|\n|AttributeError|特性应用或赋值失败时触发|\n|IOError|试图打开不存在的文件时触发|\n|IndexError|在使用序列中不存在的索引时触发|\n|KeyError|在使用映射不存在的键时触发|\n|NameError|在找不到名字(变量)时触发|\n|SyntaxError|代码出现语法错误时触发|\n|TypeError|在内建操作或者函数应用于错误类型的对象时触发|\n|ValueError|在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发|\n|ZeroDivisionError|在除法或者地板除操作的第二个操作数为 0 时触发|\n\n## 自定义异常类型\n\n可以通过创建一个继承了 `Exception` 的子类的方式来创建自定义异常类.\n\n```py\nclass MyError(Exception):\n    def __init__(self, expression, suggestion):\n        self.expression = expression\n        self.suggestion = suggestion\n    def __str__(self):\n        print(\"MyError: %s\\n\\tSuggestion: %s\"%(self.expression, self.suggestion))\n```\n\n注意定义一个 `__str__` 方法, 这个方法定义了抛出异常时进行的动作.\n\n# 异常清理行为\n\n```py\ntry:\n    pass\nfinally:\n    pass\n```\n\n无论 `try` 中是否有异常, `finally` 后的语句一定会执行.\n\n## 使用 `with...as` 语句\n\n`with...as` 语句可以调用对象预定义的清理行为. 如:\n\n```py\nwith open('./test.txt', 'r') as f:\n    for i in f:\n        print(i)\n```\n\n将会保证 `with..as:` 后的语句块执行完毕后调用 `close()`(文件对象的预定义清理行为). ","slug":"pynote-try-except-raise异常处理","published":1,"updated":"2018-08-15T16:33:43.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl0ztqml001j10lkybrb9tm2","content":"<ul>\r\n<li><a href=\"#try...except\"><code>try...except</code></a></li>\r\n<li><a href=\"#try...except%7BErrorType%7D\"><code>try...except{ErrorType}</code></a></li>\r\n<li><a href=\"#可以使用-else-关键词\"><code>try...except...else</code></a></li>\r\n<li><a href=\"#raise-抛出异常\"><code>raise</code></a></li>\r\n<li><a href=\"#异常清理行为\"><code>try..finally</code></a></li>\r\n<li><a href=\"#使用-with...as-语句\"><code>with...as</code></a></li>\r\n</ul>\r\n<h1 id=\"语法\">语法</h1>\r\n<h2 id=\"try...except\"><code>try...except</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\">c = <span class=\"number\">0</span></span><br><span class=\"line\">a = b / c</span><br><span class=\"line\">print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br></pre></td></tr></table></figure>\r\n<p>以上代码, 如果直接执行的话会报一个<a href=\"#ZeroDivisionError\">错误</a>, 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 <code>try...except</code> 语句进行错误处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    b = <span class=\"number\">10</span></span><br><span class=\"line\">    c = <span class=\"number\">0</span></span><br><span class=\"line\">    a = b / c</span><br><span class=\"line\">    print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    c = <span class=\"number\">2</span></span><br><span class=\"line\">    a = b / c</span><br></pre></td></tr></table></figure>\r\n<p>但是使用了 <code>try...except</code> 语句后, 如果有任何错误, Python 会执行 <code>except:</code> 后的语句, 然后继续. 具体的执行顺序:</p>\r\n<ol start=\"0\" type=\"1\">\r\n<li>执行 <code>try:</code> 后语句, 直到遇到错误部分</li>\r\n<li>在错误处中断, 执行 <code>except:</code> 后语句</li>\r\n<li>在错误处重启, 继续执行 <code>try:</code> 后剩余部分(发生错误的那一行会被忽略)</li>\r\n</ol>\r\n<div id=\"ZeroDivisionError\">\r\n\r\n</div>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"try...excepterrortype\"><code>try...except{ErrorType}</code></h2>\r\n<p>在 <code>try...except</code> 语句中可以指定错误类型:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<p>以上语句可以特异性处理 <code>ZeroDivisionError</code> 类型的错误, 但是在 <code>try:</code> 中遇到其它类型的错误, 程序依然会终止.</p>\r\n<h3 id=\"可以在一个-except-中处理多种异常\">可以在一个 <code>except</code> 中处理多种异常</h3>\r\n<p>需要在 <code>{ErrorType}</code> 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"params\">(ZeroDivisionError, SyntaxError)</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用多个-except-关键词\">可以使用多个 <code>except</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"title\">ZeroDivisionError</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span> SyntaxError:</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Unknown\"</span>)</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.</li>\r\n<li>可以在最后使用无指定类型的 <code>except:</code> 任何异常类型都可以触发它.</li>\r\n<li>在一个 <code>try...except</code> 结构中, 最多触发一次 <code>except</code>, 之后便会退出该结构.</li>\r\n</ul>\r\n<h3 id=\"可以使用-as-关键字给-except-后的错误类型取别名.如\">可以使用 <code>as</code> 关键字给 <code>except</code> 后的错误类型取别名.如:</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用-else-关键词\">可以使用 <code>else</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Everything is OK!\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>如果没有异常, 则会运行 <code>else</code> 后的语句.</p>\r\n<h2 id=\"raise-抛出异常\"><code>raise</code> 抛出异常</h2>\r\n<p>使用语句</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ErrorType(<span class=\"string\">'提示字符串'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>抛出一个异常.</p>\r\n<ul>\r\n<li>抛出异常之后, 程序将停止运行.</li>\r\n<li><code>raise</code> 可以不接参数, 这将抛出当前异常(只能运用在<code>except</code>后)</li>\r\n<li><code>raise</code> 后接的参数必须是一个异常的 <code>类</code> 或 <code>实例</code>.</li>\r\n</ul>\r\n<h1 id=\"python-中存在的异常类型\">Python 中存在的异常类型</h1>\r\n<h2 id=\"python-中的基本异常类型\">Python 中的基本异常类型</h2>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">异常类型</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Exception</td>\r\n<td><strong>所有异常的基类</strong></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">AttributeError</td>\r\n<td>特性应用或赋值失败时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">IOError</td>\r\n<td>试图打开不存在的文件时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">IndexError</td>\r\n<td>在使用序列中不存在的索引时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">KeyError</td>\r\n<td>在使用映射不存在的键时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">NameError</td>\r\n<td>在找不到名字(变量)时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">SyntaxError</td>\r\n<td>代码出现语法错误时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">TypeError</td>\r\n<td>在内建操作或者函数应用于错误类型的对象时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">ValueError</td>\r\n<td>在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">ZeroDivisionError</td>\r\n<td>在除法或者地板除操作的第二个操作数为 0 时触发</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"自定义异常类型\">自定义异常类型</h2>\r\n<p>可以通过创建一个继承了 <code>Exception</code> 的子类的方式来创建自定义异常类.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, expression, suggestion)</span>:</span></span><br><span class=\"line\">        self.expression = expression</span><br><span class=\"line\">        self.suggestion = suggestion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"MyError: %s\\n\\tSuggestion: %s\"</span>%(self.expression, self.suggestion))</span><br></pre></td></tr></table></figure>\r\n<p>注意定义一个 <code>__str__</code> 方法, 这个方法定义了抛出异常时进行的动作.</p>\r\n<h1 id=\"异常清理行为\">异常清理行为</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>无论 <code>try</code> 中是否有异常, <code>finally</code> 后的语句一定会执行.</p>\r\n<h2 id=\"使用-with...as-语句\">使用 <code>with...as</code> 语句</h2>\r\n<p><code>with...as</code> 语句可以调用对象预定义的清理行为. 如:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'./test.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        print(i)</span><br></pre></td></tr></table></figure>\r\n<p>将会保证 <code>with..as:</code> 后的语句块执行完毕后调用 <code>close()</code>(文件对象的预定义清理行为).</p>\r\n","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li><a href=\"#try...except\"><code>try...except</code></a></li>\r\n<li><a href=\"#try...except%7BErrorType%7D\"><code>try...except{ErrorType}</code></a></li>\r\n<li><a href=\"#可以使用-else-关键词\"><code>try...except...else</code></a></li>\r\n<li><a href=\"#raise-抛出异常\"><code>raise</code></a></li>\r\n<li><a href=\"#异常清理行为\"><code>try..finally</code></a></li>\r\n<li><a href=\"#使用-with...as-语句\"><code>with...as</code></a></li>\r\n</ul>\r\n<h1 id=\"语法\">语法</h1>\r\n<h2 id=\"try...except\"><code>try...except</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\">c = <span class=\"number\">0</span></span><br><span class=\"line\">a = b / c</span><br><span class=\"line\">print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br></pre></td></tr></table></figure>\r\n<p>以上代码, 如果直接执行的话会报一个<a href=\"#ZeroDivisionError\">错误</a>, 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 <code>try...except</code> 语句进行错误处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    b = <span class=\"number\">10</span></span><br><span class=\"line\">    c = <span class=\"number\">0</span></span><br><span class=\"line\">    a = b / c</span><br><span class=\"line\">    print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    c = <span class=\"number\">2</span></span><br><span class=\"line\">    a = b / c</span><br></pre></td></tr></table></figure>\r\n<p>但是使用了 <code>try...except</code> 语句后, 如果有任何错误, Python 会执行 <code>except:</code> 后的语句, 然后继续. 具体的执行顺序:</p>\r\n<ol start=\"0\" type=\"1\">\r\n<li>执行 <code>try:</code> 后语句, 直到遇到错误部分</li>\r\n<li>在错误处中断, 执行 <code>except:</code> 后语句</li>\r\n<li>在错误处重启, 继续执行 <code>try:</code> 后剩余部分(发生错误的那一行会被忽略)</li>\r\n</ol>\r\n<div id=\"ZeroDivisionError\">\r\n\r\n</div>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"try...excepterrortype\"><code>try...except{ErrorType}</code></h2>\r\n<p>在 <code>try...except</code> 语句中可以指定错误类型:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<p>以上语句可以特异性处理 <code>ZeroDivisionError</code> 类型的错误, 但是在 <code>try:</code> 中遇到其它类型的错误, 程序依然会终止.</p>\r\n<h3 id=\"可以在一个-except-中处理多种异常\">可以在一个 <code>except</code> 中处理多种异常</h3>\r\n<p>需要在 <code>{ErrorType}</code> 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"params\">(ZeroDivisionError, SyntaxError)</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用多个-except-关键词\">可以使用多个 <code>except</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"title\">ZeroDivisionError</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span> SyntaxError:</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Unknown\"</span>)</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.</li>\r\n<li>可以在最后使用无指定类型的 <code>except:</code> 任何异常类型都可以触发它.</li>\r\n<li>在一个 <code>try...except</code> 结构中, 最多触发一次 <code>except</code>, 之后便会退出该结构.</li>\r\n</ul>\r\n<h3 id=\"可以使用-as-关键字给-except-后的错误类型取别名.如\">可以使用 <code>as</code> 关键字给 <code>except</code> 后的错误类型取别名.如:</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用-else-关键词\">可以使用 <code>else</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Everything is OK!\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>如果没有异常, 则会运行 <code>else</code> 后的语句.</p>\r\n<h2 id=\"raise-抛出异常\"><code>raise</code> 抛出异常</h2>\r\n<p>使用语句</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ErrorType(<span class=\"string\">'提示字符串'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>抛出一个异常.</p>\r\n<ul>\r\n<li>抛出异常之后, 程序将停止运行.</li>\r\n<li><code>raise</code> 可以不接参数, 这将抛出当前异常(只能运用在<code>except</code>后)</li>\r\n<li><code>raise</code> 后接的参数必须是一个异常的 <code>类</code> 或 <code>实例</code>.</li>\r\n</ul>\r\n<h1 id=\"python-中存在的异常类型\">Python 中存在的异常类型</h1>\r\n<h2 id=\"python-中的基本异常类型\">Python 中的基本异常类型</h2>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">异常类型</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Exception</td>\r\n<td><strong>所有异常的基类</strong></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">AttributeError</td>\r\n<td>特性应用或赋值失败时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">IOError</td>\r\n<td>试图打开不存在的文件时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">IndexError</td>\r\n<td>在使用序列中不存在的索引时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">KeyError</td>\r\n<td>在使用映射不存在的键时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">NameError</td>\r\n<td>在找不到名字(变量)时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">SyntaxError</td>\r\n<td>代码出现语法错误时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">TypeError</td>\r\n<td>在内建操作或者函数应用于错误类型的对象时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">ValueError</td>\r\n<td>在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">ZeroDivisionError</td>\r\n<td>在除法或者地板除操作的第二个操作数为 0 时触发</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"自定义异常类型\">自定义异常类型</h2>\r\n<p>可以通过创建一个继承了 <code>Exception</code> 的子类的方式来创建自定义异常类.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, expression, suggestion)</span>:</span></span><br><span class=\"line\">        self.expression = expression</span><br><span class=\"line\">        self.suggestion = suggestion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"MyError: %s\\n\\tSuggestion: %s\"</span>%(self.expression, self.suggestion))</span><br></pre></td></tr></table></figure>\r\n<p>注意定义一个 <code>__str__</code> 方法, 这个方法定义了抛出异常时进行的动作.</p>\r\n<h1 id=\"异常清理行为\">异常清理行为</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>无论 <code>try</code> 中是否有异常, <code>finally</code> 后的语句一定会执行.</p>\r\n<h2 id=\"使用-with...as-语句\">使用 <code>with...as</code> 语句</h2>\r\n<p><code>with...as</code> 语句可以调用对象预定义的清理行为. 如:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'./test.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        print(i)</span><br></pre></td></tr></table></figure>\r\n<p>将会保证 <code>with..as:</code> 后的语句块执行完毕后调用 <code>close()</code>(文件对象的预定义清理行为).</p>\r\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjl0ztqlg000010lka4995mq1","category_id":"cjl0ztqln000210lkl87lgfg8","_id":"cjl0ztqlx000b10lkx3m3itra"},{"post_id":"cjl0ztqll000110lk4m7vcdta","category_id":"cjl0ztqlu000710lk2dggxrnw","_id":"cjl0ztqm1000i10lke3dy55dr"},{"post_id":"cjl0ztqlo000410lkvxxrsc44","category_id":"cjl0ztqlx000c10lkc9n5xn62","_id":"cjl0ztqm7000o10lkbiiflq4k"},{"post_id":"cjl0ztqlw000a10lkncnknh8m","category_id":"cjl0ztqm1000j10lkoo3cpc54","_id":"cjl0ztqmb000u10lkwgo3pbf4"},{"post_id":"cjl0ztqm5000n10lkoz4w4wo5","category_id":"cjl0ztqln000210lkl87lgfg8","_id":"cjl0ztqmc000y10lkt3o2qfc3"},{"post_id":"cjl0ztqma000t10lk0knoez13","category_id":"cjl0ztqlu000710lk2dggxrnw","_id":"cjl0ztqme001110lkv29jy7ca"},{"post_id":"cjl0ztqly000e10lk2q72gfd7","category_id":"cjl0ztqm7000q10lkmweegm8t","_id":"cjl0ztqmg001610lkjifrs22z"},{"post_id":"cjl0ztqmb000w10lkzvwoi1vh","category_id":"cjl0ztqln000210lkl87lgfg8","_id":"cjl0ztqmh001910lkb1ndbhri"},{"post_id":"cjl0ztqmd000z10lkx4twuvlk","category_id":"cjl0ztqm1000j10lkoo3cpc54","_id":"cjl0ztqmj001d10lk28va7w47"},{"post_id":"cjl0ztqm0000g10lk0it1ch4u","category_id":"cjl0ztqmc000x10lk79x4x6fg","_id":"cjl0ztqml001g10lkln1w7qql"},{"post_id":"cjl0ztqme001010lkfkdxdh1t","category_id":"cjl0ztqm1000j10lkoo3cpc54","_id":"cjl0ztqmm001k10lko7z0t0pf"},{"post_id":"cjl0ztqmf001510lk2y0s1s97","category_id":"cjl0ztqm1000j10lkoo3cpc54","_id":"cjl0ztqmn001m10lkhcuhz1qm"},{"post_id":"cjl0ztqm3000l10lksmurrlym","category_id":"cjl0ztqmf001310lkrl22q8qj","_id":"cjl0ztqmn001p10lk64pd6hfo"},{"post_id":"cjl0ztqmh001810lkfpffz2wf","category_id":"cjl0ztqm1000j10lkoo3cpc54","_id":"cjl0ztqmo001r10lk19q9t2yt"},{"post_id":"cjl0ztqmi001c10lknph5sfe2","category_id":"cjl0ztqm1000j10lkoo3cpc54","_id":"cjl0ztqmo001t10lkz9uq0pe2"},{"post_id":"cjl0ztqmk001f10lkbfgrwa1s","category_id":"cjl0ztqln000210lkl87lgfg8","_id":"cjl0ztqmp001w10lk3dowkhlt"},{"post_id":"cjl0ztqml001j10lkybrb9tm2","category_id":"cjl0ztqm1000j10lkoo3cpc54","_id":"cjl0ztqmp001y10lkhbis2ykh"}],"PostTag":[{"post_id":"cjl0ztqlg000010lka4995mq1","tag_id":"cjl0ztqln000310lk0k7fncjf","_id":"cjl0ztqlz000f10lk2j5ngud5"},{"post_id":"cjl0ztqlg000010lka4995mq1","tag_id":"cjl0ztqlu000810lkrglkrup5","_id":"cjl0ztqm1000h10lk6ddy8dr6"},{"post_id":"cjl0ztqll000110lk4m7vcdta","tag_id":"cjl0ztqlx000d10lkp1905mwt","_id":"cjl0ztqm5000m10lkpooxwkos"},{"post_id":"cjl0ztqlo000410lkvxxrsc44","tag_id":"cjl0ztqlu000810lkrglkrup5","_id":"cjl0ztqm9000s10lk6qtke1ej"},{"post_id":"cjl0ztqmd000z10lkx4twuvlk","tag_id":"cjl0ztqm7000p10lkuaimezrg","_id":"cjl0ztqmf001410lk6d6dh6va"},{"post_id":"cjl0ztqmd000z10lkx4twuvlk","tag_id":"cjl0ztqmb000v10lkaiohwusw","_id":"cjl0ztqmg001710lk8qucfak1"},{"post_id":"cjl0ztqlw000a10lkncnknh8m","tag_id":"cjl0ztqm7000p10lkuaimezrg","_id":"cjl0ztqmi001b10lk188i4x7d"},{"post_id":"cjl0ztqlw000a10lkncnknh8m","tag_id":"cjl0ztqmb000v10lkaiohwusw","_id":"cjl0ztqmj001e10lkyn3zi3jm"},{"post_id":"cjl0ztqme001010lkfkdxdh1t","tag_id":"cjl0ztqm7000p10lkuaimezrg","_id":"cjl0ztqml001i10lk5rulkuku"},{"post_id":"cjl0ztqme001010lkfkdxdh1t","tag_id":"cjl0ztqmb000v10lkaiohwusw","_id":"cjl0ztqmn001l10lk3pb4xl8s"},{"post_id":"cjl0ztqmf001510lk2y0s1s97","tag_id":"cjl0ztqm7000p10lkuaimezrg","_id":"cjl0ztqmn001n10lk1khvnpuu"},{"post_id":"cjl0ztqmf001510lk2y0s1s97","tag_id":"cjl0ztqmb000v10lkaiohwusw","_id":"cjl0ztqmo001q10lkfkfczmsv"},{"post_id":"cjl0ztqly000e10lk2q72gfd7","tag_id":"cjl0ztqme001210lkojogkizz","_id":"cjl0ztqmo001s10lkiha5rbow"},{"post_id":"cjl0ztqmh001810lkfpffz2wf","tag_id":"cjl0ztqm7000p10lkuaimezrg","_id":"cjl0ztqmo001v10lkgat9t5u7"},{"post_id":"cjl0ztqmh001810lkfpffz2wf","tag_id":"cjl0ztqmb000v10lkaiohwusw","_id":"cjl0ztqmp001x10lkk9535om2"},{"post_id":"cjl0ztqmi001c10lknph5sfe2","tag_id":"cjl0ztqm7000p10lkuaimezrg","_id":"cjl0ztqmp002010lkg6dhivhx"},{"post_id":"cjl0ztqmi001c10lknph5sfe2","tag_id":"cjl0ztqmb000v10lkaiohwusw","_id":"cjl0ztqmq002110lkm0q97e2z"},{"post_id":"cjl0ztqml001j10lkybrb9tm2","tag_id":"cjl0ztqm7000p10lkuaimezrg","_id":"cjl0ztqmq002310lk7bp6p6mb"},{"post_id":"cjl0ztqml001j10lkybrb9tm2","tag_id":"cjl0ztqmb000v10lkaiohwusw","_id":"cjl0ztqmq002410lk7srokhpr"},{"post_id":"cjl0ztqm0000g10lk0it1ch4u","tag_id":"cjl0ztqmi001a10lkghemos65","_id":"cjl0ztqmr002610lkn4o1rxwt"},{"post_id":"cjl0ztqm0000g10lk0it1ch4u","tag_id":"cjl0ztqml001h10lk2lwvdcbl","_id":"cjl0ztqmr002710lk43ik0bb6"},{"post_id":"cjl0ztqm3000l10lksmurrlym","tag_id":"cjl0ztqmn001o10lkz34st61w","_id":"cjl0ztqmr002910lkrg5co71i"},{"post_id":"cjl0ztqm5000n10lkoz4w4wo5","tag_id":"cjl0ztqmo001u10lk6c8f8m0t","_id":"cjl0ztqms002a10lk1a5c9src"},{"post_id":"cjl0ztqm8000r10lktpln9opa","tag_id":"cjl0ztqmp001z10lkgwg6cfah","_id":"cjl0ztqms002b10lkvjigx5de"},{"post_id":"cjl0ztqma000t10lk0knoez13","tag_id":"cjl0ztqmp001z10lkgwg6cfah","_id":"cjl0ztqms002d10lkjpo5iypf"},{"post_id":"cjl0ztqmb000w10lkzvwoi1vh","tag_id":"cjl0ztqmo001u10lk6c8f8m0t","_id":"cjl0ztqms002e10lktczobrm5"},{"post_id":"cjl0ztqmk001f10lkbfgrwa1s","tag_id":"cjl0ztqmr002810lkn6njr04a","_id":"cjl0ztqmt002f10lkmaeitvi2"},{"post_id":"cjl0ztqmk001f10lkbfgrwa1s","tag_id":"cjl0ztqms002c10lkpj3xqnwz","_id":"cjl0ztqmt002g10lkd9lfx21z"}],"Tag":[{"name":"Samba","_id":"cjl0ztqln000310lk0k7fncjf"},{"name":"Docker","_id":"cjl0ztqlu000810lkrglkrup5"},{"name":"HTML5","_id":"cjl0ztqlx000d10lkp1905mwt"},{"name":"Python","_id":"cjl0ztqm7000p10lkuaimezrg"},{"name":"Note","_id":"cjl0ztqmb000v10lkaiohwusw"},{"name":"Regex","_id":"cjl0ztqme001210lkojogkizz"},{"name":"Windows","_id":"cjl0ztqmi001a10lkghemos65"},{"name":"File System","_id":"cjl0ztqml001h10lk2lwvdcbl"},{"name":"Assemble","_id":"cjl0ztqmn001o10lkz34st61w"},{"name":"PowerShell","_id":"cjl0ztqmo001u10lk6c8f8m0t"},{"name":"Hexo","_id":"cjl0ztqmp001z10lkgwg6cfah"},{"name":"Brook","_id":"cjl0ztqmr002810lkn6njr04a"},{"name":"翻墙","_id":"cjl0ztqms002c10lkpj3xqnwz"}]}}