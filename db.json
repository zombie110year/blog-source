{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/assert/python/Hexo_New.py","path":"assert/python/Hexo_New.py","modified":1,"renderable":0},{"_id":"source/assert/python/blank_line_killer.py","path":"assert/python/blank_line_killer.py","modified":1,"renderable":0},{"_id":"source/assert/python/insert_local_text.py.backup","path":"assert/python/insert_local_text.py.backup","modified":1,"renderable":0},{"_id":"source/assert/python/insert_local_text.win.py","path":"assert/python/insert_local_text.win.py","modified":1,"renderable":0},{"_id":"source/assert/python/regex_test.py","path":"assert/python/regex_test.py","modified":1,"renderable":0},{"_id":"source/assert/python/tipadd.py","path":"assert/python/tipadd.py","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/assert/repos/docker/docker.run.help","path":"assert/repos/docker/docker.run.help","modified":1,"renderable":0},{"_id":"source/assert/repos/python/buildin.open.__doc__","path":"assert/repos/python/buildin.open.__doc__","modified":1,"renderable":0},{"_id":"source/assert/repos/python/file.method.info.py","path":"assert/repos/python/file.method.info.py","modified":1,"renderable":0},{"_id":"source/assert/repos/python/json.__doc__","path":"assert/repos/python/json.__doc__","modified":1,"renderable":0},{"_id":"source/assert/repos/python/module.example.zip","path":"assert/repos/python/module.example.zip","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/assert/repos/aria2/aria2_manual.txt","path":"assert/repos/aria2/aria2_manual.txt","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/images/night_sky.jpg","path":"images/night_sky.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1534586102360},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1534586102356},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1534586102349},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1534586102364},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1534586102412},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1534586102420},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1534586102428},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1534586102436},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1534586102444},{"_id":"themes/next/_config.yml","hash":"2166da28c27465c0fd4c59c19d7d9974cb4c3021","modified":1534592560132},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1534586102473},{"_id":"themes/next/bower.json","hash":"beac259ba5ef7d199a45a142221dae7d34dbdc49","modified":1534586102464},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1534586102711},{"_id":"themes/next/package.json","hash":"22a8e1a6259ee7452fe0d9a7a8952ad3ccabf719","modified":1534586103566},{"_id":"source/.vscode/tasks.json","hash":"066f585bacc9c98659afafeb9486a95254aa9349","modified":1534990107000},{"_id":"source/_drafts/PyNote-json解析.md","hash":"6a771fd2e6ab05dcaca8052d6641ebc0bbc23de8","modified":1534966292000},{"_id":"source/_drafts/HTML5-link标签.md","hash":"2dcc3c18a1ceb61a7a99be9e7e6683b3de90b1c5","modified":1534673832000},{"_id":"source/_drafts/Docker-Samba.md","hash":"ff9715ffb6efb07f778632491885a8ba3565bdb6","modified":1534598892000},{"_id":"source/_drafts/SSH-使用.md","hash":"d884c58685ddd3f2d7b7243911ef0fa1aacf50d1","modified":1535004277584},{"_id":"source/_drafts/pynote-定义函数.md","hash":"e28e07975809913bc18cc43da539b071432decea","modified":1534986190000},{"_id":"source/_drafts/Termux-API.md","hash":"fd3529462c2968207b7a51223a8d50a652393b24","modified":1534954686000},{"_id":"source/_drafts/docker笔记.md","hash":"9e75c4f4e21d808681221d2316cdcc7d7e5cea6a","modified":1534691810000},{"_id":"source/_drafts/pynote-类的定义与继承.md","hash":"f05458129804d7f299dbba30550e44474b94df76","modified":1534531340000},{"_id":"source/_drafts/pynote-读写文件.md","hash":"13738ddf5390e59f412a2eff2f46ce9eb0210ac6","modified":1534973358000},{"_id":"source/_drafts/pynote-集合类型.md","hash":"b4118fc2c40265f9bcb95f02c07961f96507825a","modified":1534984848000},{"_id":"source/_drafts/regex-正则表达式.md","hash":"a8e7c9c69ac0e61772dede54a79e93e3abb3415d","modified":1535003478672},{"_id":"source/_drafts/windows汇编语言环境.md","hash":"c3bbf02ba69a813c8fb44facde54d213b6cb408b","modified":1533201630000},{"_id":"source/_drafts/windows系统中链接类型.md","hash":"7bb91db2b09a128ba368afb830e600a435c05ec1","modified":1532693691000},{"_id":"source/_posts/Android使用Termux.md","hash":"043aeeb90cdec8148e1e48222ad24f9bce7747f0","modified":1535046139404},{"_id":"source/_posts/Linux搭建AnkiSync服务器.md","hash":"4eb7c52d1de8aff222405d7405f1201011a3a58e","modified":1535168722811},{"_id":"source/_posts/PowerShell-安装-Chocolatey.md","hash":"f913d8d062e143321c488d65f8b22667f351a787","modified":1535046202482},{"_id":"source/_posts/TIPS.md","hash":"f45e60415b2791e2c58e5117b8f224a5688548fa","modified":1535126702634},{"_id":"source/_posts/Vim-入门-终端记事本.md","hash":"dbe8ee75b01ce8dbc99ef908a3486d47dbbd6983","modified":1535046355552},{"_id":"source/_posts/Windows安装Jupyter.md","hash":"377f2ad0d3818e717391c1a9c36bf26cb084f890","modified":1535046362186},{"_id":"source/_posts/hello-world.md","hash":"21593471ade0a9b84bf6a47e6d8036454b433a63","modified":1533201701000},{"_id":"source/_posts/hexo配置过程.md","hash":"d681513858c0c6efa22f2757f0807af4e76d97b7","modified":1535046176228},{"_id":"source/_posts/powershell创建链接文件.md","hash":"db82fadf228b39b0e1f8f3eae59768daa2f1283e","modified":1535046233971},{"_id":"source/_posts/pynote-0-python基本认识.md","hash":"c9827df872bbb9721bb57864b4be47e37e1092cf","modified":1535046294962},{"_id":"source/_posts/pynote-python中的数字与字符串.md","hash":"c20e1ec3ad1af42b48461383c5c40a025614291a","modified":1535046321470},{"_id":"source/_posts/pynote-python控制结构.md","hash":"dd11d9e29425918844c0fe5e909c8154cf5f814e","modified":1535046337188},{"_id":"source/_posts/pynote-python模块.md","hash":"ebdfc843b5c01b4b134b39a932280b07667dce87","modified":1535046341075},{"_id":"source/_posts/pynote-python运算符.md","hash":"2bc71d77bc58963500b8e8c55b5680e4e1c753c5","modified":1535046343608},{"_id":"source/_posts/pynote-try-except-raise异常处理.md","hash":"5829d93cc05e5fd02a21c559095aa7fb86e3ffc6","modified":1535046346949},{"_id":"source/_posts/使用Brook翻墙.md","hash":"9a98326d649b505da531b103790808d73c381369","modified":1535046366666},{"_id":"source/_posts/布置PowerShell工作环境.md","hash":"99f0de94c5763f976bdb6afe7f4e81cd551ad7e4","modified":1535046370043},{"_id":"source/_posts/绑定个性域名到GitHub博客.md","hash":"4a45fd42184e9ae85a80f0c71f7b6b5da0766b1e","modified":1535047068374},{"_id":"source/about/index.md","hash":"38cae75afad59f8cab109ca37ace27401f660bd2","modified":1532527282000},{"_id":"source/categories/index.md","hash":"6c18f5d45966abaaf3bc73b60466c66f9ff3b01e","modified":1532529157000},{"_id":"source/tags/index.md","hash":"440b73b2d4aa692a9f338d2d8bc2385f61c3e1fe","modified":1532448036000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534586102263},{"_id":"themes/next/.git/config","hash":"e6396f4650bd14040df3e97a6e598b61349b261e","modified":1534586102315},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534586078809},{"_id":"themes/next/.git/index","hash":"cf38ad3c01251c67ca27e250e89275e541550c6a","modified":1534621425096},{"_id":"themes/next/.git/packed-refs","hash":"a501d3c0b4327897f958f5d9ef60b058e875907c","modified":1534586102217},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1534586102377},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1534586102370},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1534586102384},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1534586102390},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1534586102397},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1534586102404},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1534586102486},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1534586102499},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1534586102511},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1534586102519},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1534586102528},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1534586102547},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1534586102539},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1534586102556},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1534586102566},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1534586102722},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1534586102746},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1534586102746},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1534586102757},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1534586102765},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1534586102773},{"_id":"themes/next/languages/ja.yml","hash":"509af6c38458a402d37b9beea3500e3b439aa153","modified":1534586102781},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1534586102790},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1534586102798},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1534586102807},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1534586102815},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1534586102825},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1534586102834},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1534586102843},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1534586102851},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1534586102860},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1534586102867},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1534586102906},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1534586103511},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1534586103521},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1534586103530},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1534586103536},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1534586103545},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1534586103552},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1534586103560},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1534586103588},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1534586103601},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1534586103612},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1534586104732},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1534586104738},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1534586104743},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104372},{"_id":"source/assert/python/Hexo_New.py","hash":"759e4787a48fed5a1c2baa6578d7e8268249c545","modified":1535112617360},{"_id":"source/assert/python/blank_line_killer.py","hash":"65ac8b71cac1b0c5d2794a954ec1c7b964d2e63b","modified":1534736532000},{"_id":"source/assert/python/insert_local_text.py.backup","hash":"e9976fb4c3c8193a0de3883c631b633549dea1f9","modified":1534688758000},{"_id":"source/assert/python/insert_local_text.win.py","hash":"841b391af7bb593faa39793fbdf182351d351a8c","modified":1534700053000},{"_id":"source/assert/python/regex_test.py","hash":"71be6b55d7dfad4fcda841e17b8872b19c9fdc00","modified":1535001442950},{"_id":"source/assert/python/tipadd.py","hash":"ca61d33f49c4877e7c3d18dbae70da86ebb76114","modified":1534932183000},{"_id":"source/assert/resources/buildin.open.__doc__.md","hash":"91b8585e49c962bc29f37a855bb92f99e1e73ac3","modified":1534708448000},{"_id":"source/assert/resources/docker.run.help.md","hash":"b35e93d0be7cc51fc44683f9d52c453f1cb2477f","modified":1534691566000},{"_id":"source/assert/resources/json.__doc__.md","hash":"826f007378fbf6dd339640f3605f45a7503cf016","modified":1534734166000},{"_id":"source/assert/resources/test.md","hash":"1af6d4ca8083e87304a177c6ddbb3fc8f856d90f","modified":1534688246000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534586078824},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1534586078838},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534586078833},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534586078847},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534586078852},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1534586078857},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534586078861},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1534586078866},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1534586078871},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534586078881},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1534586078876},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534586078887},{"_id":"themes/next/.git/logs/HEAD","hash":"69276f38adb517634a66448f0e9ff15e66ba9088","modified":1534586102282},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1534586102580},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1534586102591},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1534586102603},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1534586102612},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1534586102626},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1534586102640},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1534586102657},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1534586102649},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1534586102665},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1534586102675},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1534586102685},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1534586102702},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1534586102693},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1534586102892},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534586102897},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534586102901},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1534586102927},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1534586102931},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1534586102936},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1534586102940},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1534586102949},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1534586102955},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1534586102965},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1534586102974},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1534586102981},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1534586102988},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1534586103061},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1534586103070},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1534586103140},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1534586103148},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1534586103153},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1534586103192},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1534586103295},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1534586103351},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1534586103365},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1534586103409},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1534586103358},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1534586103421},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1534586103428},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1534586103435},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1534586103443},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1534586103637},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1534586103627},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1534586103643},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1534586103650},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1534586103657},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1534586103665},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1534586103671},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1534586103677},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1534586103684},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1534586104365},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534586104376},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534586104387},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534586104382},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534586104391},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534586104396},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534586104401},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534586104410},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534586104416},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534586104421},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534586104426},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534586104432},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534586104438},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534586104442},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534586104447},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534586104452},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534586104457},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534586104465},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534586104470},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586103177},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586103180},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104182},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104184},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104196},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104349},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534586104362},{"_id":"source/assert/python/__pycache__/regex_test.cpython-37.pyc","hash":"4b80ea829816e80c6fc9a6e7aa6642ee64df5e42","modified":1534989543000},{"_id":"source/assert/repos/anki/ankiserver.failed.md","hash":"0aff3113af8eb43cd4658039ded5e7e5d1cc9f61","modified":1535168661310},{"_id":"source/assert/js/src/insert_local_text.js","hash":"eca90cb73286bb592bbba68803ffcec6e60c6a5f","modified":1534573676000},{"_id":"source/assert/repos/aria2/README.md","hash":"2b9cb9f79b7cb5bc7b779dbd25d770b3bbc14819","modified":1535050712776},{"_id":"source/assert/repos/docker/docker.run.help","hash":"80b858a7d9a5bd2b0d4c91e0dbc3818fd73ea606","modified":1534691468000},{"_id":"source/assert/repos/python/buildin.open.__doc__","hash":"97de96608ffeb79e8c7cc8508f33dd97386cea76","modified":1534707546000},{"_id":"source/assert/repos/python/file.method.info.py","hash":"59cac2e09a416bc26913229a2e0c9b142a191a1c","modified":1534729633000},{"_id":"source/assert/repos/python/json.__doc__","hash":"f36e1627429c36647c3ffa83632bd3e44ba9d67a","modified":1534730601000},{"_id":"source/assert/repos/python/module.example.zip","hash":"48c4bc7c32d85d1d1316efc5903bc999b9802eea","modified":1534688405000},{"_id":"themes/next/.git/refs/heads/master","hash":"e7d5d06a97b02e9fd6141aba44a00feed39541ad","modified":1534586102277},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1534586102917},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1534586102922},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1534586102998},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1534586103005},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1534586103012},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1534586103022},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1534586103034},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1534586103042},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1534586103054},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1534586103080},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1534586103088},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1534586103097},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1534586103106},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1534586103114},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1534586103122},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1534586103130},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1534586103163},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1534586103172},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1534586103184},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1534586103205},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1534586103210},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1534586103215},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1534586103220},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1534586103226},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1534586103234},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1534586103243},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1534586103253},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1534586103261},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1534586103268},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1534586103275},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1534586103282},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1534586103288},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1534586103305},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1534586103314},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1534586103321},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1534586103329},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1534586103337},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1534586103344},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1534586103376},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1534586103385},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1534586103393},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1534586103475},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1534586103484},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1534586103492},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1534586103502},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"09d3222f46bc7b1b76126632197bdae06e25848a","modified":1535045928987},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1534586104178},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1534586104188},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1534586104192},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1534586104340},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1534586104347},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1534586104353},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1534586104359},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1534586104486},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1534586104479},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1534586104491},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1534586104497},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534586104503},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1534586104509},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1534586104516},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1534586104529},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1534586104536},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1534586104545},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1534586104571},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1534586104561},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1534586104579},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1534586104588},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534586104710},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1534586104594},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534586104717},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534586104724},{"_id":"themes/next/.git/objects/pack/pack-cae7102de9b2d9816958a40fde0d5d024fd08c1f.idx","hash":"1027bc9ec3a2141e88ed1f46596bb954fbab283d","modified":1534586102162},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534586104662},{"_id":"source/assert/repos/aria2/aria2_manual.txt","hash":"6ca846255f33f106534003fb238ffb290f9df3e6","modified":1535050712776},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"69276f38adb517634a66448f0e9ff15e66ba9088","modified":1534586102288},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534586102255},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1534586103457},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1534586103466},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1534586103702},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1534586103710},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1534586103716},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1534586103723},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1534586103729},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1534586103856},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1534586104026},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1534586104129},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1534586104143},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1534586104137},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1534586104146},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1534586104151},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1534586104157},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1534586104163},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1534586104203},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1534586104211},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1534586104215},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1534586104219},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1534586104223},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1534586104229},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1534586104240},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534586104235},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1534586104261},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1534586104267},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1534586104271},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1534586104281},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534586104277},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1534586104295},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1534586104301},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1534586104306},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1534586104313},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1534586104319},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1534586104325},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1534586104330},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1534586104525},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534586104600},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1534586104608},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534586104615},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534586104675},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534586104682},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534586104638},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534586104648},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534586104693},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"69276f38adb517634a66448f0e9ff15e66ba9088","modified":1534586102251},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1534586103738},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1534586103746},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1534586103755},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1534586103766},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1534586103760},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1534586103773},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1534586103781},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1534586103791},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1534586103799},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1534586103808},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1534586103818},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1534586103825},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1534586103832},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1534586103838},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1534586103844},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1534586103850},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1534586103863},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1534586103875},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1534586103884},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1534586103888},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1534586103894},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1534586103900},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1534586103905},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1534586103913},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1534586103918},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1534586103922},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1534586103933},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1534586103938},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1534586103942},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1534586103948},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1534586103952},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1534586103958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1534586103968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1534586103975},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1534586103983},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1534586103987},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1534586103992},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1534586104005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1534586103998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1534586104011},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1534586104015},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1534586104020},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1534586104037},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1534586104031},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1534586104041},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1534586104046},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1534586104050},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1534586104055},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1534586104061},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1534586104068},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1534586104080},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1534586104087},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1534586104094},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1534586104099},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1534586104104},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1534586104108},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1534586104114},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1534586104118},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1534586104125},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1534586104247},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534586104255},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534586104290},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534586104627},{"_id":"themes/next/.git/objects/pack/pack-cae7102de9b2d9816958a40fde0d5d024fd08c1f.pack","hash":"2f21c8c4eb7ec4af4aa6c200ab01ad70a325e28d","modified":1534586102166},{"_id":"themes/next/source/images/night_sky.jpg","hash":"9c2eb01dc6bd2cdc1d68c7049052ab63a733fff5","modified":1535045239144},{"_id":"public/assert/js/src/insert_local_text.js","hash":"2ffc79abebe5edf313c844abf709fa9ce4601df9","modified":1535168743732},{"_id":"public/search.xml","hash":"80c806fbd00e13007e7be6a26a7207e5c0fc93f0","modified":1535168743744},{"_id":"public/about/index.html","hash":"d09f5e66d4016feb4f565c4a939581c09d531c52","modified":1535168743776},{"_id":"public/categories/index.html","hash":"9547d7673dcf7e8a8153992433038e9d48c487a7","modified":1535168743776},{"_id":"public/tags/index.html","hash":"0ba45211776d7b4eeb67e3c189307ce5c7f5fb28","modified":1535168743776},{"_id":"public/assert/resources/buildin.open.__doc__.html","hash":"0bffdf2b1e3b3b828455f3e6432ef7fbd625a445","modified":1535168743776},{"_id":"public/assert/resources/docker.run.help.html","hash":"98dc08e3648729028ab3352800a1e1c826a2bb57","modified":1535168743776},{"_id":"public/assert/resources/json.__doc__.html","hash":"65d429a8c6ba1c69b905eade8fe02ac2fe1c55ba","modified":1535168743776},{"_id":"public/assert/resources/test.html","hash":"2b42bf1a915a4a68e2b1fdd389bd1d3e086d1b24","modified":1535168743776},{"_id":"public/assert/repos/anki/ankiserver.failed.html","hash":"939fc177a086f29121f35bfcf2a290ad81bbeb35","modified":1535168743776},{"_id":"public/2018/08/TIPS/index.html","hash":"48f06233ff43b35a9a99b9d197e2971245159699","modified":1535168743776},{"_id":"public/2018/08/Linux搭建AnkiSync服务器/index.html","hash":"412c410390e1b7e222e77855f44d185055342525","modified":1535168743776},{"_id":"public/2018/08/绑定个性域名到GitHub博客/index.html","hash":"5a58f427de54de1abd513ab7f3faccf0be1a991d","modified":1535168743776},{"_id":"public/2018/08/Windows安装Jupyter/index.html","hash":"4851c8e2bf4bf28aa8358d8b76ba78e7a228a484","modified":1535168743776},{"_id":"public/2018/08/Android使用Termux/index.html","hash":"310c979b52e8d89f5f33d3be3c94f14e8019cbfe","modified":1535168743776},{"_id":"public/2018/08/布置PowerShell工作环境/index.html","hash":"81f4d4963c98da121b8c43bb4cd1f94e5957933b","modified":1535168743776},{"_id":"public/2018/08/Vim-入门-终端记事本/index.html","hash":"4af2f8a34643798b96bd890c83f8a40ae4a46d24","modified":1535168743776},{"_id":"public/2018/08/pynote-python模块/index.html","hash":"f36090f18925f65d8a2b4cefa0625fde04a66b70","modified":1535168743776},{"_id":"public/2018/08/PowerShell-安装-Chocolatey/index.html","hash":"e1fcbe0f9601b4e41deaa0e84e17b312e79b4e16","modified":1535168743776},{"_id":"public/2018/08/pynote-try-except-raise异常处理/index.html","hash":"6361cb2ed8307180278cb3acbc8e9341aba6fe02","modified":1535168743776},{"_id":"public/2018/07/pynote-python中的数字与字符串/index.html","hash":"7ac0d36b48435828cad3e75defdea22bb5ef70e5","modified":1535168743776},{"_id":"public/2018/07/pynote-python控制结构/index.html","hash":"8f294b9b55834cee53e2176701f2b9c6b4c65ff1","modified":1535168743776},{"_id":"public/2018/07/pynote-python运算符/index.html","hash":"95aba55381efde5cbbc37d90763d9faf0b9d5068","modified":1535168743776},{"_id":"public/2018/07/pynote-0-python基本认识/index.html","hash":"bc78ef3b469aac36628cd4f2dbeb7e6ff408386c","modified":1535168743776},{"_id":"public/2018/07/hexo配置过程/index.html","hash":"1fb34e9e72d8096de442591cc074ad7d37902904","modified":1535168743776},{"_id":"public/2018/07/powershell创建链接文件/index.html","hash":"813c503ebef563b3265e81cd0d8e085f06bde1af","modified":1535168743776},{"_id":"public/2018/07/使用Brook翻墙/index.html","hash":"bd612fdfaca79029d171b31453fb31dc8c3e777d","modified":1535168743776},{"_id":"public/2018/07/hello-world/index.html","hash":"e0edbf6366e9e9bc8375b592ad0cbf94d6029310","modified":1535168743776},{"_id":"public/archives/index.html","hash":"be5135c045bdc6da28c2d6adda4c12fa0f07bea9","modified":1535168743776},{"_id":"public/archives/page/2/index.html","hash":"b759cfe9ea61620ff3777778aa03493ec2be050a","modified":1535168743776},{"_id":"public/archives/2018/index.html","hash":"c17f93388e364166e6c05c641034e47c5e20abad","modified":1535168743776},{"_id":"public/archives/2018/page/2/index.html","hash":"375342a212ed50029eb3c33e0aa90571b847ec24","modified":1535168743776},{"_id":"public/archives/2018/07/index.html","hash":"3024241f0c84980e5a79192cb465cbac2f088be9","modified":1535168743776},{"_id":"public/archives/2018/08/index.html","hash":"96835eda19a4ade766ba3263eb4b25f308e29c82","modified":1535168743776},{"_id":"public/index.html","hash":"8d45f4725738d484a8dbbe0945af7a81723c1e68","modified":1535168743776},{"_id":"public/page/2/index.html","hash":"cee4bb8defb375efcc274bc6631a5d9fb731d6d6","modified":1535168743776},{"_id":"public/categories/Python/index.html","hash":"6b1d25777171b9ede05dc3352c0e78554d3909f7","modified":1535168743776},{"_id":"public/categories/网站/index.html","hash":"80a88583d5e332d04c2ab0fe0e89a39bb17b65f2","modified":1535168743776},{"_id":"public/categories/日常/index.html","hash":"27775fdea33309fea1573899a6ab2896a36e0ae5","modified":1535168743791},{"_id":"public/categories/Tips/index.html","hash":"4749c466b322f1a03e52e994bb392b6ab859c28c","modified":1535168743791},{"_id":"public/tags/Python/index.html","hash":"507c223d2e916aa629991129fdd9b2f1aea11202","modified":1535168743791},{"_id":"public/tags/Note/index.html","hash":"90335ccf7390d6d50460cbd560322d9ee868871d","modified":1535168743791},{"_id":"public/tags/Linux/index.html","hash":"4deb3b673a63f84c51c85e40071e4d3758461178","modified":1535168743791},{"_id":"public/tags/Android/index.html","hash":"b7de4621da5cf3a236cf2d33988d70d7308e579b","modified":1535168743791},{"_id":"public/tags/Termux/index.html","hash":"f77c844a1c6e4e04dbfd6a02fe6029fc83aed7f4","modified":1535168743791},{"_id":"public/tags/Anki/index.html","hash":"c769d6a89e7d55395c984af5a0b5c63501b9e718","modified":1535168743791},{"_id":"public/tags/PowerShell/index.html","hash":"3eb7df7c113256f60ca8f2c42a0b5afe05aad9eb","modified":1535168743791},{"_id":"public/tags/Vim/index.html","hash":"8c7df6746e529aeb2698a5343d76e4295c7b560f","modified":1535168743791},{"_id":"public/tags/Anaconda/index.html","hash":"a5685286066c53dff1b2007f455c1b0b7bc3eba6","modified":1535168743791},{"_id":"public/tags/Jupyter/index.html","hash":"47fe8abb5e73721529e6d5deac691d01daaec278","modified":1535168743791},{"_id":"public/tags/Hexo/index.html","hash":"573a1abd8896dcb90f87697e0b55f3df4a9ffc74","modified":1535168743791},{"_id":"public/tags/Brook/index.html","hash":"410dff1aeb2833bde2c8413cb5516f7fa3e2a65f","modified":1535168743791},{"_id":"public/tags/翻墙/index.html","hash":"bcdb885ea2f9a6b679b577627abda9510321e07d","modified":1535168743791},{"_id":"public/assert/python/insert_local_text.py.backup","hash":"e9976fb4c3c8193a0de3883c631b633549dea1f9","modified":1535168743791},{"_id":"public/assert/python/blank_line_killer.py","hash":"65ac8b71cac1b0c5d2794a954ec1c7b964d2e63b","modified":1535168743791},{"_id":"public/assert/python/Hexo_New.py","hash":"759e4787a48fed5a1c2baa6578d7e8268249c545","modified":1535168743791},{"_id":"public/assert/python/insert_local_text.win.py","hash":"841b391af7bb593faa39793fbdf182351d351a8c","modified":1535168743791},{"_id":"public/assert/python/regex_test.py","hash":"71be6b55d7dfad4fcda841e17b8872b19c9fdc00","modified":1535168743791},{"_id":"public/assert/python/tipadd.py","hash":"ca61d33f49c4877e7c3d18dbae70da86ebb76114","modified":1535168743791},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535168743791},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535168743791},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535168743791},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535168743791},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535168743791},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535168743791},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535168743791},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535168743791},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535168743791},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535168743791},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535168743791},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535168743791},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535168743791},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535168743791},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535168743791},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535168743791},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535168743791},{"_id":"public/assert/repos/docker/docker.run.help","hash":"80b858a7d9a5bd2b0d4c91e0dbc3818fd73ea606","modified":1535168743791},{"_id":"public/assert/repos/python/buildin.open.__doc__","hash":"97de96608ffeb79e8c7cc8508f33dd97386cea76","modified":1535168743791},{"_id":"public/assert/repos/python/file.method.info.py","hash":"59cac2e09a416bc26913229a2e0c9b142a191a1c","modified":1535168743791},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535168743791},{"_id":"public/assert/repos/python/json.__doc__","hash":"f36e1627429c36647c3ffa83632bd3e44ba9d67a","modified":1535168743791},{"_id":"public/assert/repos/python/module.example.zip","hash":"48c4bc7c32d85d1d1316efc5903bc999b9802eea","modified":1535168743791},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535168743791},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535168743791},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535168744332},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535168744335},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1535168744337},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1535168744338},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1535168744338},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1535168744338},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535168744338},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1535168744338},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1535168744338},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1535168744338},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1535168744338},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1535168744338},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1535168744338},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1535168744338},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535168744338},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535168744338},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535168744338},{"_id":"public/css/main.css","hash":"6ad9ed93ae58fdb31a0bd6bb3abfbd0140d520e3","modified":1535168744338},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535168744339},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535168744339},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535168744339},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535168744339},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535168744339},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535168744339},{"_id":"public/assert/repos/aria2/aria2_manual.txt","hash":"6ca846255f33f106534003fb238ffb290f9df3e6","modified":1535168744348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535168744348},{"_id":"public/images/night_sky.jpg","hash":"9c2eb01dc6bd2cdc1d68c7049052ab63a733fff5","modified":1535168744856}],"Category":[{"name":"Python","_id":"cjl8vtw6k0002w8lkhr1u2xze"},{"name":"网站","_id":"cjl8vtw6p0007w8lktql5bxxv"},{"name":"日常","_id":"cjl8vtw6t000cw8lkwreld4jz"},{"name":"Linux","_id":"cjl8vtw73000nw8lk5iqnjyuo"},{"name":"文本处理","_id":"cjl8vtw76000ww8lkdpqyamxt"},{"name":"Assemble","_id":"cjl8vtw760015w8lka0lwd7yv"},{"name":"操作系统","_id":"cjl8vtw76001dw8lkwbn5khot"},{"name":"Tips","_id":"cjl8vtw76001mw8lk8ing75r5"}],"Data":[],"Page":[{"title":"关于博主","date":"2018-07-25T13:56:07.000Z","type":"about","comments":1,"_content":"\n# 联系方式\n\n[zombie110year@gmail.com]()","source":"about/index.md","raw":"---\ntitle: 关于博主\ndate: 2018-07-25 21:56:07\ntype: \"about\"\ncomments: true\n---\n\n# 联系方式\n\n[zombie110year@gmail.com]()","updated":"2018-07-25T14:01:22.000Z","path":"about/index.html","layout":"page","_id":"cjl8vtwdx003vw8lkm467xwpg","content":"<h1 id=\"联系方式\">联系方式</h1>\r\n<p><a href=\"\">zombie110year@gmail.com</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\">联系方式</h1>\r\n<p><a href=\"\">zombie110year@gmail.com</a></p>\r\n"},{"title":"分类","date":"2018-07-25T14:31:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-07-25 22:31:57\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-07-25T14:32:37.000Z","path":"categories/index.html","layout":"page","_id":"cjl8vtwdx003ww8lk5qdf83yo","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"tags","date":"2018-07-24T16:00:14.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-25 00:00:14\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-07-24T16:00:36.000Z","path":"tags/index.html","layout":"page","_id":"cjl8vtwdx003xw8lk1kdhuu8o","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"_content":"[Origin-File](/assert/repos/python/buildin.open.__doc__)\n\nHelp on built-in function open in module io:\n\n内容来自 `open.__doc__` 对象.\n\n```py\nopen(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\n# Open file and return a stream.  Raise OSError upon failure.\n```\n\n打开文件并返回流. 当打开失败时抛出 `OSError`.\n\n```\nfile is either a text or byte string giving the name (and the path\nif the file isn't in the current working directory) of the file to\nbe opened or an integer file descriptor of the file to be\nwrapped. (If a file descriptor is given, it is closed when the\nreturned I/O object is closed, unless closefd is set to False.)\n```\n\n参数 `file` 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 `closefd=False`).\n\n```\nmode is an optional string that specifies the mode in which the file\nis opened. It defaults to 'r' which means open for reading in text\nmode.  Other common values are 'w' for writing (truncating the file if\nit already exists), 'x' for creating and writing to a new file, and\n'a' for appending (which on some Unix systems, means that all writes\nappend to the end of the file regardless of the current seek position).\nIn text mode, if encoding is not specified the encoding used is platform\ndependent: locale.getpreferredencoding(False) is called to get the\ncurrent locale encoding. (For reading and writing raw bytes use binary\nmode and leave encoding unspecified.) The available modes are:\n```\n\n参数 `mode` 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 \"r\", 意味着文本以只读(text readonly) 模式打开. 其他常见值是 \"w\" 用于写入 (如果文件已存在则截断), \"x\" 用于创建和写入新文件, 和 \"a\" 用于追加 (在某些 Unix 系统上, 意味着所有写入都追加到末尾, 无论当前读写指针在何处.) 在文本模式 \"t\" 下, 如果未指定编码, 则使用系统编码, 通过调用 `locale.getpreferredencoding(False)` 获取当前语言环境编码. (对于读写原始字节, 使用二进制模式 \"b\", 此种模式不指定编码). 所有可用的模式有:\n\n```\n========= ===============================================================\nCharacter Meaning\n--------- ---------------------------------------------------------------\n'r'       文本 只读. (默认模式)\n'w'       文本 只写, 如果文本已存在则截断文件.\n'x'       只创建新文件, 并以写模式打开它.\n'a'       以写模式打开, 如果文件存在则在末尾添加\n'b'       二进制模式\n't'       文本模式\n'+'       打开文件以更新 (读写)\n'U'       universal newline mode (已弃用)\n========= ===============================================================\n```\n\n```\nThe default mode is 'rt' (open for reading text). For binary random\naccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\n'r+b' opens the file without truncation. The 'x' mode implies 'w' and\nraises an `FileExistsError` if the file already exists.\n```\n\n默认的模式是 \"rt\" (以读文本模式打开). 对任意的二进制访问, \"w+b\" 模式将会截断文件为 0 字节打开, 而 \"r+b\" 则不会截断. \"x\" 模式意味着 \"w\", 但如果文件已存在则抛出 `FileExistsError` 而不会截断文件, 当然也不会打开.\n\n```\nPython distinguishes between files opened in binary and text modes,\neven when the underlying operating system doesn't. Files opened in\nbinary mode (appending 'b' to the mode argument) return contents as\nbytes objects without any decoding. In text mode (the default, or when\n't' is appended to the mode argument), the contents of the file are\nreturned as strings, the bytes having been first decoded using a\nplatform-dependent encoding or using the specified encoding if given.\n```\n\nPython 区分以二进制模式和文本模式打开的文件, 即使底层操作系统不区分. 以二进制模式打开(将 `b` 添加到 `mode` 参数)的文件返回内容为字节对象, 没有进行任何解码. 在文本模式(默认, 或者将 `t` 添加到 `mode` 参数), 文件的内容作为字符串返回, 首先使用依赖于系统平台的编码, 或使用 `encoding` 参数指定编码(如果有的话).\n\n```\n'U' mode is deprecated and will raise an exception in future versions\nof Python.  It has no effect in Python 3.  Use newline to control\nuniversal newlines mode.\n```\n\n\"U\" 模式已启用, 将在未来版本中引发异常. 它在 Python3 版本中不会生效. 使用 `newline` 参数来控制通用换行模式.\n\n```\nbuffering is an optional integer used to set the buffering policy.\nPass 0 to switch buffering off (only allowed in binary mode), 1 to select\nline buffering (only usable in text mode), and an integer > 1 to indicate\nthe size of a fixed-size chunk buffer.  When no buffering argument is\ngiven, the default buffering policy works as follows:\n```\n\n参数 `buffering` 是一个可选的整数, 用来设置缓冲策略. \n\n- `0` 关闭缓冲. (仅允许二进制模式下使用)\n- `1` 选择行缓冲. (仅允许文本模式下使用)\n- `值>1` 表示固定大小的块缓冲区大小.\n\n没有给定缓冲参数时, 默认的缓冲策略如下:\n\n```\n* Binary files are buffered in fixed-size chunks; the size of the buffer\n  is chosen using a heuristic trying to determine the underlying device's\n  \"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n  On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n* \"Interactive\" text files (files for which isatty() returns True)\n  use line buffering.  Other text files use the policy described above\n  for binary files.\n```\n\n- 二进制文件以固定大小的块进行缓冲; 使用启发式方法选择缓冲区大小, 驶入确定底层设备的 \"块大小\" 并回调到 `io.DEFAULT_BUFFER_SIZE`. 在许多系统上, 缓冲区长度为 4096 或 8192 字节.\n\n- \"交互式\" 文本文件, (调用 `isatty()` 方法, 返回 `True` 的文件. \"is a tty\") 使用行缓冲. 其他文本文件缓冲策略同二进制文件.\n\n\n```\nencoding is the name of the encoding used to decode or encode the\nfile. This should only be used in text mode. The default encoding is\nplatform dependent, but any encoding supported by Python can be\npassed.  See the codecs module for the list of supported encodings.\n```\n\n参数 `encoding` 指定解码或编码文件使用的字符编码. 它只应用于文本模式. 默认编码取决于系统平台, 但可以向 Python 传递任何支持编码. 参阅 `codecs` 模块文档获取支持编码格式列表.\n\n```\nerrors is an optional string that specifies how encoding errors are to\nbe handled---this argument should not be used in binary mode. Pass\n'strict' to raise a ValueError exception if there is an encoding error\n(the default of None has the same effect), or pass 'ignore' to ignore\nerrors. (Note that ignoring encoding errors can lead to data loss.)\nSee the documentation for codecs.register or run 'help(codecs.Codec)'\nfor a list of the permitted encoding error strings.\n```\n\n参数 `errors` 是一个可选的字符串, 用于指定如何处理编码错误---此参数不应用于二进制模式. 各值对应的策略:\n\n- 默认值 \"none\", 如果存在编码错误则抛出 `ValueError` 异常. (同 \"strict\")\n- \"strict\", 如果存在编码错误则抛出 `ValueError` 异常.\n- \"ignore\", 忽略错误. (注意, 忽略编码错误可能导致数据丢失.)\n\n参阅 `codecs.register` 模块文档或运行 `help(codecs.Codec)` 获取有效的编码错误字符串列表.\n\n```\nnewline controls how universal newlines works (it only applies to text\nmode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as\nfollows:\n```\n\n参数 `newline` 控制通用换行工作方式(仅应用于文本模式). 仅接受 `None`, `\"\"` (空), \"\\n\"(换行符, Unix, 推荐), \"\\r\\n\"(回车换行, MS-DOS). 工作方式如下:\n\n```\n* On input, if newline is None, universal newlines mode is\n  enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and\n  these are translated into '\\n' before being returned to the\n  caller. If it is '', universal newline mode is enabled, but line\n  endings are returned to the caller untranslated. If it has any of\n  the other legal values, input lines are only terminated by the given\n  string, and the line ending is returned to the caller untranslated.\n\n* On output, if newline is None, any '\\n' characters written are\n  translated to the system default line separator, os.linesep. If\n  newline is '' or '\\n', no translation takes place. If newline is any\n  of the other legal values, any '\\n' characters written are translated\n  to the given string.\n```\n\n输入(读取)时:\n\n- 如果 `newline` 的值为 `None`, 通用换行模式被启用. 输入的各行可以以 \"\\n\", \"\\r\" 或 \"\\r\\n\" 结尾, 并且它们在被返回给函数调用前将被翻译成 \"\\n\".\n- 如果值为 `\"\"`, 则通用换行模式被启用, 但输入的换行符不会被翻译. \n- 如果为其他合法的值, 输入的各行将会以规定字符结尾, 且换行符不会被翻译. (就是说以 `newline` 参数规定的字符作为换行符, 识别一行字符串)\n\n输出(写入)时:\n\n- 如果 `newline` 的值为 `None`, 任何 `\"\\n\"` 换行符将被翻译为系统默认换行符(即 `os.linesep`).\n- 如果 `newline` 的值是 `\"\"` 或 `\"\\n\"`, 输出时不会翻译换行符.\n- 如果为其他合法的值, 任何 `\"\\n\"` 都会被翻译为指定字符.\n\n**注**: Python 在处理文本时, 内部使用 `\\n` 作为换行符.\n\n```\nIf closefd is False, the underlying file descriptor will be kept open\nwhen the file is closed. This does not work when a file name is given\nand must be True in that case.\n```\n\n如果参数 `closefd` 的值为 `False`, 则在关闭文件后, 基础文件描述符将保持打开状态. 这在给出文件名时不起作用, 在此情况下必须为 `True`.\n\n```\nA custom opener can be used by passing a callable as *opener*. The\nunderlying file descriptor for the file object is then obtained by\ncalling *opener* with (*file*, *flags*). *opener* must return an open\nfile descriptor (passing os.open as *opener* results in functionality\nsimilar to passing None).\n```\n\n可以通过传递可调用的 `*opener*` 来使用自定义的 opener. 通过使用 `(*file*, *flags*)` 调用 `*opener*` 获取文件对象的基础文件描述符. `*opener*` 必须返回一个打开的文件描述符(将 `os.open` 传递给 `*opener*` 会产生类似于传递 `None` 的功能).\n\n```\nopen() returns a file object whose type depends on the mode, and\nthrough which the standard file operations such as reading and writing\nare performed. When open() is used to open a file in a text mode ('w',\n'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\na file in a binary mode, the returned class varies: in read binary\nmode, it returns a BufferedReader; in write binary and append binary\nmodes, it returns a BufferedWriter, and in read/write mode, it returns\na BufferedRandom.\n```\n\n`open()` 返回一个文件对象, 类型取决于 `mode`, 并且通过它执行标准文件操作例如读写. 当 `open()` 用于以文本模式打开文件(例如 `r`, `wt`, `rt` 等), 它将会返回一个 `TextIOWrapper`. 当以二进制模式打开文件, 返回的类会有所不同: 在 `rb` 模式, 返回 `BufferedReader`; 在 `wb` 和 `ab` 模式, 返回 `BufferedWriter`, 在 `+b` 模式, 返回 `BufferedRandom`.\n\n```\nIt is also possible to use a string or bytearray as a file for both\nreading and writing. For strings StringIO can be used like a file\nopened in a text mode, and for bytes a BytesIO can be used like a file\nopened in a binary mode.\n```\n\n也可以使用字符串或字节数组作为读取和写入的文件. 对于字符串, `StringIO` 可以像在文本模式下打开的文件一样使用; 对于字节, `BytesIO` 可以像在二进制模式下打开的文件一样使用.\n","source":"assert/resources/buildin.open.__doc__.md","raw":"[Origin-File](/assert/repos/python/buildin.open.__doc__)\n\nHelp on built-in function open in module io:\n\n内容来自 `open.__doc__` 对象.\n\n```py\nopen(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\n# Open file and return a stream.  Raise OSError upon failure.\n```\n\n打开文件并返回流. 当打开失败时抛出 `OSError`.\n\n```\nfile is either a text or byte string giving the name (and the path\nif the file isn't in the current working directory) of the file to\nbe opened or an integer file descriptor of the file to be\nwrapped. (If a file descriptor is given, it is closed when the\nreturned I/O object is closed, unless closefd is set to False.)\n```\n\n参数 `file` 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 `closefd=False`).\n\n```\nmode is an optional string that specifies the mode in which the file\nis opened. It defaults to 'r' which means open for reading in text\nmode.  Other common values are 'w' for writing (truncating the file if\nit already exists), 'x' for creating and writing to a new file, and\n'a' for appending (which on some Unix systems, means that all writes\nappend to the end of the file regardless of the current seek position).\nIn text mode, if encoding is not specified the encoding used is platform\ndependent: locale.getpreferredencoding(False) is called to get the\ncurrent locale encoding. (For reading and writing raw bytes use binary\nmode and leave encoding unspecified.) The available modes are:\n```\n\n参数 `mode` 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 \"r\", 意味着文本以只读(text readonly) 模式打开. 其他常见值是 \"w\" 用于写入 (如果文件已存在则截断), \"x\" 用于创建和写入新文件, 和 \"a\" 用于追加 (在某些 Unix 系统上, 意味着所有写入都追加到末尾, 无论当前读写指针在何处.) 在文本模式 \"t\" 下, 如果未指定编码, 则使用系统编码, 通过调用 `locale.getpreferredencoding(False)` 获取当前语言环境编码. (对于读写原始字节, 使用二进制模式 \"b\", 此种模式不指定编码). 所有可用的模式有:\n\n```\n========= ===============================================================\nCharacter Meaning\n--------- ---------------------------------------------------------------\n'r'       文本 只读. (默认模式)\n'w'       文本 只写, 如果文本已存在则截断文件.\n'x'       只创建新文件, 并以写模式打开它.\n'a'       以写模式打开, 如果文件存在则在末尾添加\n'b'       二进制模式\n't'       文本模式\n'+'       打开文件以更新 (读写)\n'U'       universal newline mode (已弃用)\n========= ===============================================================\n```\n\n```\nThe default mode is 'rt' (open for reading text). For binary random\naccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\n'r+b' opens the file without truncation. The 'x' mode implies 'w' and\nraises an `FileExistsError` if the file already exists.\n```\n\n默认的模式是 \"rt\" (以读文本模式打开). 对任意的二进制访问, \"w+b\" 模式将会截断文件为 0 字节打开, 而 \"r+b\" 则不会截断. \"x\" 模式意味着 \"w\", 但如果文件已存在则抛出 `FileExistsError` 而不会截断文件, 当然也不会打开.\n\n```\nPython distinguishes between files opened in binary and text modes,\neven when the underlying operating system doesn't. Files opened in\nbinary mode (appending 'b' to the mode argument) return contents as\nbytes objects without any decoding. In text mode (the default, or when\n't' is appended to the mode argument), the contents of the file are\nreturned as strings, the bytes having been first decoded using a\nplatform-dependent encoding or using the specified encoding if given.\n```\n\nPython 区分以二进制模式和文本模式打开的文件, 即使底层操作系统不区分. 以二进制模式打开(将 `b` 添加到 `mode` 参数)的文件返回内容为字节对象, 没有进行任何解码. 在文本模式(默认, 或者将 `t` 添加到 `mode` 参数), 文件的内容作为字符串返回, 首先使用依赖于系统平台的编码, 或使用 `encoding` 参数指定编码(如果有的话).\n\n```\n'U' mode is deprecated and will raise an exception in future versions\nof Python.  It has no effect in Python 3.  Use newline to control\nuniversal newlines mode.\n```\n\n\"U\" 模式已启用, 将在未来版本中引发异常. 它在 Python3 版本中不会生效. 使用 `newline` 参数来控制通用换行模式.\n\n```\nbuffering is an optional integer used to set the buffering policy.\nPass 0 to switch buffering off (only allowed in binary mode), 1 to select\nline buffering (only usable in text mode), and an integer > 1 to indicate\nthe size of a fixed-size chunk buffer.  When no buffering argument is\ngiven, the default buffering policy works as follows:\n```\n\n参数 `buffering` 是一个可选的整数, 用来设置缓冲策略. \n\n- `0` 关闭缓冲. (仅允许二进制模式下使用)\n- `1` 选择行缓冲. (仅允许文本模式下使用)\n- `值>1` 表示固定大小的块缓冲区大小.\n\n没有给定缓冲参数时, 默认的缓冲策略如下:\n\n```\n* Binary files are buffered in fixed-size chunks; the size of the buffer\n  is chosen using a heuristic trying to determine the underlying device's\n  \"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n  On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n* \"Interactive\" text files (files for which isatty() returns True)\n  use line buffering.  Other text files use the policy described above\n  for binary files.\n```\n\n- 二进制文件以固定大小的块进行缓冲; 使用启发式方法选择缓冲区大小, 驶入确定底层设备的 \"块大小\" 并回调到 `io.DEFAULT_BUFFER_SIZE`. 在许多系统上, 缓冲区长度为 4096 或 8192 字节.\n\n- \"交互式\" 文本文件, (调用 `isatty()` 方法, 返回 `True` 的文件. \"is a tty\") 使用行缓冲. 其他文本文件缓冲策略同二进制文件.\n\n\n```\nencoding is the name of the encoding used to decode or encode the\nfile. This should only be used in text mode. The default encoding is\nplatform dependent, but any encoding supported by Python can be\npassed.  See the codecs module for the list of supported encodings.\n```\n\n参数 `encoding` 指定解码或编码文件使用的字符编码. 它只应用于文本模式. 默认编码取决于系统平台, 但可以向 Python 传递任何支持编码. 参阅 `codecs` 模块文档获取支持编码格式列表.\n\n```\nerrors is an optional string that specifies how encoding errors are to\nbe handled---this argument should not be used in binary mode. Pass\n'strict' to raise a ValueError exception if there is an encoding error\n(the default of None has the same effect), or pass 'ignore' to ignore\nerrors. (Note that ignoring encoding errors can lead to data loss.)\nSee the documentation for codecs.register or run 'help(codecs.Codec)'\nfor a list of the permitted encoding error strings.\n```\n\n参数 `errors` 是一个可选的字符串, 用于指定如何处理编码错误---此参数不应用于二进制模式. 各值对应的策略:\n\n- 默认值 \"none\", 如果存在编码错误则抛出 `ValueError` 异常. (同 \"strict\")\n- \"strict\", 如果存在编码错误则抛出 `ValueError` 异常.\n- \"ignore\", 忽略错误. (注意, 忽略编码错误可能导致数据丢失.)\n\n参阅 `codecs.register` 模块文档或运行 `help(codecs.Codec)` 获取有效的编码错误字符串列表.\n\n```\nnewline controls how universal newlines works (it only applies to text\nmode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as\nfollows:\n```\n\n参数 `newline` 控制通用换行工作方式(仅应用于文本模式). 仅接受 `None`, `\"\"` (空), \"\\n\"(换行符, Unix, 推荐), \"\\r\\n\"(回车换行, MS-DOS). 工作方式如下:\n\n```\n* On input, if newline is None, universal newlines mode is\n  enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and\n  these are translated into '\\n' before being returned to the\n  caller. If it is '', universal newline mode is enabled, but line\n  endings are returned to the caller untranslated. If it has any of\n  the other legal values, input lines are only terminated by the given\n  string, and the line ending is returned to the caller untranslated.\n\n* On output, if newline is None, any '\\n' characters written are\n  translated to the system default line separator, os.linesep. If\n  newline is '' or '\\n', no translation takes place. If newline is any\n  of the other legal values, any '\\n' characters written are translated\n  to the given string.\n```\n\n输入(读取)时:\n\n- 如果 `newline` 的值为 `None`, 通用换行模式被启用. 输入的各行可以以 \"\\n\", \"\\r\" 或 \"\\r\\n\" 结尾, 并且它们在被返回给函数调用前将被翻译成 \"\\n\".\n- 如果值为 `\"\"`, 则通用换行模式被启用, 但输入的换行符不会被翻译. \n- 如果为其他合法的值, 输入的各行将会以规定字符结尾, 且换行符不会被翻译. (就是说以 `newline` 参数规定的字符作为换行符, 识别一行字符串)\n\n输出(写入)时:\n\n- 如果 `newline` 的值为 `None`, 任何 `\"\\n\"` 换行符将被翻译为系统默认换行符(即 `os.linesep`).\n- 如果 `newline` 的值是 `\"\"` 或 `\"\\n\"`, 输出时不会翻译换行符.\n- 如果为其他合法的值, 任何 `\"\\n\"` 都会被翻译为指定字符.\n\n**注**: Python 在处理文本时, 内部使用 `\\n` 作为换行符.\n\n```\nIf closefd is False, the underlying file descriptor will be kept open\nwhen the file is closed. This does not work when a file name is given\nand must be True in that case.\n```\n\n如果参数 `closefd` 的值为 `False`, 则在关闭文件后, 基础文件描述符将保持打开状态. 这在给出文件名时不起作用, 在此情况下必须为 `True`.\n\n```\nA custom opener can be used by passing a callable as *opener*. The\nunderlying file descriptor for the file object is then obtained by\ncalling *opener* with (*file*, *flags*). *opener* must return an open\nfile descriptor (passing os.open as *opener* results in functionality\nsimilar to passing None).\n```\n\n可以通过传递可调用的 `*opener*` 来使用自定义的 opener. 通过使用 `(*file*, *flags*)` 调用 `*opener*` 获取文件对象的基础文件描述符. `*opener*` 必须返回一个打开的文件描述符(将 `os.open` 传递给 `*opener*` 会产生类似于传递 `None` 的功能).\n\n```\nopen() returns a file object whose type depends on the mode, and\nthrough which the standard file operations such as reading and writing\nare performed. When open() is used to open a file in a text mode ('w',\n'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\na file in a binary mode, the returned class varies: in read binary\nmode, it returns a BufferedReader; in write binary and append binary\nmodes, it returns a BufferedWriter, and in read/write mode, it returns\na BufferedRandom.\n```\n\n`open()` 返回一个文件对象, 类型取决于 `mode`, 并且通过它执行标准文件操作例如读写. 当 `open()` 用于以文本模式打开文件(例如 `r`, `wt`, `rt` 等), 它将会返回一个 `TextIOWrapper`. 当以二进制模式打开文件, 返回的类会有所不同: 在 `rb` 模式, 返回 `BufferedReader`; 在 `wb` 和 `ab` 模式, 返回 `BufferedWriter`, 在 `+b` 模式, 返回 `BufferedRandom`.\n\n```\nIt is also possible to use a string or bytearray as a file for both\nreading and writing. For strings StringIO can be used like a file\nopened in a text mode, and for bytes a BytesIO can be used like a file\nopened in a binary mode.\n```\n\n也可以使用字符串或字节数组作为读取和写入的文件. 对于字符串, `StringIO` 可以像在文本模式下打开的文件一样使用; 对于字节, `BytesIO` 可以像在二进制模式下打开的文件一样使用.\n","date":"2018-08-23T07:55:08.657Z","updated":"2018-08-19T19:54:08.000Z","path":"assert/resources/buildin.open.__doc__.html","title":"","comments":1,"layout":"page","_id":"cjl8vtwg7003yw8lkv0p531no","content":"<p><a href=\"/assert/repos/python/buildin.open.__doc__\">Origin-File</a></p>\r\n<p>Help on built-in function open in module io:</p>\r\n<p>内容来自 <code>open.__doc__</code> 对象.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(file, mode=<span class=\"string\">'r'</span>, buffering=<span class=\"number\">-1</span>, encoding=<span class=\"keyword\">None</span>, errors=<span class=\"keyword\">None</span>, newline=<span class=\"keyword\">None</span>, closefd=<span class=\"keyword\">True</span>, opener=<span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># Open file and return a stream.  Raise OSError upon failure.</span></span><br></pre></td></tr></table></figure>\r\n<p>打开文件并返回流. 当打开失败时抛出 <code>OSError</code>.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file is either a text or byte string giving the name (and the path</span><br><span class=\"line\">if the file isn&apos;t in the current working directory) of the file to</span><br><span class=\"line\">be opened or an integer file descriptor of the file to be</span><br><span class=\"line\">wrapped. (If a file descriptor is given, it is closed when the</span><br><span class=\"line\">returned I/O object is closed, unless closefd is set to False.)</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>file</code> 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 <code>closefd=False</code>).</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode is an optional string that specifies the mode in which the file</span><br><span class=\"line\">is opened. It defaults to &apos;r&apos; which means open for reading in text</span><br><span class=\"line\">mode.  Other common values are &apos;w&apos; for writing (truncating the file if</span><br><span class=\"line\">it already exists), &apos;x&apos; for creating and writing to a new file, and</span><br><span class=\"line\">&apos;a&apos; for appending (which on some Unix systems, means that all writes</span><br><span class=\"line\">append to the end of the file regardless of the current seek position).</span><br><span class=\"line\">In text mode, if encoding is not specified the encoding used is platform</span><br><span class=\"line\">dependent: locale.getpreferredencoding(False) is called to get the</span><br><span class=\"line\">current locale encoding. (For reading and writing raw bytes use binary</span><br><span class=\"line\">mode and leave encoding unspecified.) The available modes are:</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>mode</code> 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 &quot;r&quot;, 意味着文本以只读(text readonly) 模式打开. 其他常见值是 &quot;w&quot; 用于写入 (如果文件已存在则截断), &quot;x&quot; 用于创建和写入新文件, 和 &quot;a&quot; 用于追加 (在某些 Unix 系统上, 意味着所有写入都追加到末尾, 无论当前读写指针在何处.) 在文本模式 &quot;t&quot; 下, 如果未指定编码, 则使用系统编码, 通过调用 <code>locale.getpreferredencoding(False)</code> 获取当前语言环境编码. (对于读写原始字节, 使用二进制模式 &quot;b&quot;, 此种模式不指定编码). 所有可用的模式有:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">========= ===============================================================</span><br><span class=\"line\">Character Meaning</span><br><span class=\"line\">--------- ---------------------------------------------------------------</span><br><span class=\"line\">&apos;r&apos;       文本 只读. (默认模式)</span><br><span class=\"line\">&apos;w&apos;       文本 只写, 如果文本已存在则截断文件.</span><br><span class=\"line\">&apos;x&apos;       只创建新文件, 并以写模式打开它.</span><br><span class=\"line\">&apos;a&apos;       以写模式打开, 如果文件存在则在末尾添加</span><br><span class=\"line\">&apos;b&apos;       二进制模式</span><br><span class=\"line\">&apos;t&apos;       文本模式</span><br><span class=\"line\">&apos;+&apos;       打开文件以更新 (读写)</span><br><span class=\"line\">&apos;U&apos;       universal newline mode (已弃用)</span><br><span class=\"line\">========= ===============================================================</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The default mode is &apos;rt&apos; (open for reading text). For binary random</span><br><span class=\"line\">access, the mode &apos;w+b&apos; opens and truncates the file to 0 bytes, while</span><br><span class=\"line\">&apos;r+b&apos; opens the file without truncation. The &apos;x&apos; mode implies &apos;w&apos; and</span><br><span class=\"line\">raises an `FileExistsError` if the file already exists.</span><br></pre></td></tr></table></figure>\r\n<p>默认的模式是 &quot;rt&quot; (以读文本模式打开). 对任意的二进制访问, &quot;w+b&quot; 模式将会截断文件为 0 字节打开, 而 &quot;r+b&quot; 则不会截断. &quot;x&quot; 模式意味着 &quot;w&quot;, 但如果文件已存在则抛出 <code>FileExistsError</code> 而不会截断文件, 当然也不会打开.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python distinguishes between files opened in binary and text modes,</span><br><span class=\"line\">even when the underlying operating system doesn&apos;t. Files opened in</span><br><span class=\"line\">binary mode (appending &apos;b&apos; to the mode argument) return contents as</span><br><span class=\"line\">bytes objects without any decoding. In text mode (the default, or when</span><br><span class=\"line\">&apos;t&apos; is appended to the mode argument), the contents of the file are</span><br><span class=\"line\">returned as strings, the bytes having been first decoded using a</span><br><span class=\"line\">platform-dependent encoding or using the specified encoding if given.</span><br></pre></td></tr></table></figure>\r\n<p>Python 区分以二进制模式和文本模式打开的文件, 即使底层操作系统不区分. 以二进制模式打开(将 <code>b</code> 添加到 <code>mode</code> 参数)的文件返回内容为字节对象, 没有进行任何解码. 在文本模式(默认, 或者将 <code>t</code> 添加到 <code>mode</code> 参数), 文件的内容作为字符串返回, 首先使用依赖于系统平台的编码, 或使用 <code>encoding</code> 参数指定编码(如果有的话).</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;U&apos; mode is deprecated and will raise an exception in future versions</span><br><span class=\"line\">of Python.  It has no effect in Python 3.  Use newline to control</span><br><span class=\"line\">universal newlines mode.</span><br></pre></td></tr></table></figure>\r\n<p>&quot;U&quot; 模式已启用, 将在未来版本中引发异常. 它在 Python3 版本中不会生效. 使用 <code>newline</code> 参数来控制通用换行模式.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buffering is an optional integer used to set the buffering policy.</span><br><span class=\"line\">Pass 0 to switch buffering off (only allowed in binary mode), 1 to select</span><br><span class=\"line\">line buffering (only usable in text mode), and an integer &gt; 1 to indicate</span><br><span class=\"line\">the size of a fixed-size chunk buffer.  When no buffering argument is</span><br><span class=\"line\">given, the default buffering policy works as follows:</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>buffering</code> 是一个可选的整数, 用来设置缓冲策略.</p>\r\n<ul>\r\n<li><code>0</code> 关闭缓冲. (仅允许二进制模式下使用)</li>\r\n<li><code>1</code> 选择行缓冲. (仅允许文本模式下使用)</li>\r\n<li><code>值&gt;1</code> 表示固定大小的块缓冲区大小.</li>\r\n</ul>\r\n<p>没有给定缓冲参数时, 默认的缓冲策略如下:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Binary files are buffered in fixed-size chunks; the size of the buffer</span><br><span class=\"line\">  is chosen using a heuristic trying to determine the underlying device&apos;s</span><br><span class=\"line\">  &quot;block size&quot; and falling back on `io.DEFAULT_BUFFER_SIZE`.</span><br><span class=\"line\">  On many systems, the buffer will typically be 4096 or 8192 bytes long.</span><br><span class=\"line\"></span><br><span class=\"line\">* &quot;Interactive&quot; text files (files for which isatty() returns True)</span><br><span class=\"line\">  use line buffering.  Other text files use the policy described above</span><br><span class=\"line\">  for binary files.</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p>二进制文件以固定大小的块进行缓冲; 使用启发式方法选择缓冲区大小, 驶入确定底层设备的 &quot;块大小&quot; 并回调到 <code>io.DEFAULT_BUFFER_SIZE</code>. 在许多系统上, 缓冲区长度为 4096 或 8192 字节.</p></li>\r\n<li><p>&quot;交互式&quot; 文本文件, (调用 <code>isatty()</code> 方法, 返回 <code>True</code> 的文件. &quot;is a tty&quot;) 使用行缓冲. 其他文本文件缓冲策略同二进制文件.</p></li>\r\n</ul>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encoding is the name of the encoding used to decode or encode the</span><br><span class=\"line\">file. This should only be used in text mode. The default encoding is</span><br><span class=\"line\">platform dependent, but any encoding supported by Python can be</span><br><span class=\"line\">passed.  See the codecs module for the list of supported encodings.</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>encoding</code> 指定解码或编码文件使用的字符编码. 它只应用于文本模式. 默认编码取决于系统平台, 但可以向 Python 传递任何支持编码. 参阅 <code>codecs</code> 模块文档获取支持编码格式列表.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errors is an optional string that specifies how encoding errors are to</span><br><span class=\"line\">be handled---this argument should not be used in binary mode. Pass</span><br><span class=\"line\">&apos;strict&apos; to raise a ValueError exception if there is an encoding error</span><br><span class=\"line\">(the default of None has the same effect), or pass &apos;ignore&apos; to ignore</span><br><span class=\"line\">errors. (Note that ignoring encoding errors can lead to data loss.)</span><br><span class=\"line\">See the documentation for codecs.register or run &apos;help(codecs.Codec)&apos;</span><br><span class=\"line\">for a list of the permitted encoding error strings.</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>errors</code> 是一个可选的字符串, 用于指定如何处理编码错误---此参数不应用于二进制模式. 各值对应的策略:</p>\r\n<ul>\r\n<li>默认值 &quot;none&quot;, 如果存在编码错误则抛出 <code>ValueError</code> 异常. (同 &quot;strict&quot;)</li>\r\n<li>&quot;strict&quot;, 如果存在编码错误则抛出 <code>ValueError</code> 异常.</li>\r\n<li>&quot;ignore&quot;, 忽略错误. (注意, 忽略编码错误可能导致数据丢失.)</li>\r\n</ul>\r\n<p>参阅 <code>codecs.register</code> 模块文档或运行 <code>help(codecs.Codec)</code> 获取有效的编码错误字符串列表.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newline controls how universal newlines works (it only applies to text</span><br><span class=\"line\">mode). It can be None, &apos;&apos;, &apos;\\n&apos;, &apos;\\r&apos;, and &apos;\\r\\n&apos;.  It works as</span><br><span class=\"line\">follows:</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>newline</code> 控制通用换行工作方式(仅应用于文本模式). 仅接受 <code>None</code>, <code>&quot;&quot;</code> (空), &quot;&quot;(换行符, Unix, 推荐), &quot;&quot;(回车换行, MS-DOS). 工作方式如下:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* On input, if newline is None, universal newlines mode is</span><br><span class=\"line\">  enabled. Lines in the input can end in &apos;\\n&apos;, &apos;\\r&apos;, or &apos;\\r\\n&apos;, and</span><br><span class=\"line\">  these are translated into &apos;\\n&apos; before being returned to the</span><br><span class=\"line\">  caller. If it is &apos;&apos;, universal newline mode is enabled, but line</span><br><span class=\"line\">  endings are returned to the caller untranslated. If it has any of</span><br><span class=\"line\">  the other legal values, input lines are only terminated by the given</span><br><span class=\"line\">  string, and the line ending is returned to the caller untranslated.</span><br><span class=\"line\"></span><br><span class=\"line\">* On output, if newline is None, any &apos;\\n&apos; characters written are</span><br><span class=\"line\">  translated to the system default line separator, os.linesep. If</span><br><span class=\"line\">  newline is &apos;&apos; or &apos;\\n&apos;, no translation takes place. If newline is any</span><br><span class=\"line\">  of the other legal values, any &apos;\\n&apos; characters written are translated</span><br><span class=\"line\">  to the given string.</span><br></pre></td></tr></table></figure>\r\n<p>输入(读取)时:</p>\r\n<ul>\r\n<li>如果 <code>newline</code> 的值为 <code>None</code>, 通用换行模式被启用. 输入的各行可以以 &quot;&quot;, &quot;&quot; 或 &quot;&quot; 结尾, 并且它们在被返回给函数调用前将被翻译成 &quot;&quot;.</li>\r\n<li>如果值为 <code>&quot;&quot;</code>, 则通用换行模式被启用, 但输入的换行符不会被翻译.</li>\r\n<li>如果为其他合法的值, 输入的各行将会以规定字符结尾, 且换行符不会被翻译. (就是说以 <code>newline</code> 参数规定的字符作为换行符, 识别一行字符串)</li>\r\n</ul>\r\n<p>输出(写入)时:</p>\r\n<ul>\r\n<li>如果 <code>newline</code> 的值为 <code>None</code>, 任何 <code>&quot;\\n&quot;</code> 换行符将被翻译为系统默认换行符(即 <code>os.linesep</code>).</li>\r\n<li>如果 <code>newline</code> 的值是 <code>&quot;&quot;</code> 或 <code>&quot;\\n&quot;</code>, 输出时不会翻译换行符.</li>\r\n<li>如果为其他合法的值, 任何 <code>&quot;\\n&quot;</code> 都会被翻译为指定字符.</li>\r\n</ul>\r\n<p><strong>注</strong>: Python 在处理文本时, 内部使用 <code>\\n</code> 作为换行符.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If closefd is False, the underlying file descriptor will be kept open</span><br><span class=\"line\">when the file is closed. This does not work when a file name is given</span><br><span class=\"line\">and must be True in that case.</span><br></pre></td></tr></table></figure>\r\n<p>如果参数 <code>closefd</code> 的值为 <code>False</code>, 则在关闭文件后, 基础文件描述符将保持打开状态. 这在给出文件名时不起作用, 在此情况下必须为 <code>True</code>.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A custom opener can be used by passing a callable as *opener*. The</span><br><span class=\"line\">underlying file descriptor for the file object is then obtained by</span><br><span class=\"line\">calling *opener* with (*file*, *flags*). *opener* must return an open</span><br><span class=\"line\">file descriptor (passing os.open as *opener* results in functionality</span><br><span class=\"line\">similar to passing None).</span><br></pre></td></tr></table></figure>\r\n<p>可以通过传递可调用的 <code>*opener*</code> 来使用自定义的 opener. 通过使用 <code>(*file*, *flags*)</code> 调用 <code>*opener*</code> 获取文件对象的基础文件描述符. <code>*opener*</code> 必须返回一个打开的文件描述符(将 <code>os.open</code> 传递给 <code>*opener*</code> 会产生类似于传递 <code>None</code> 的功能).</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open() returns a file object whose type depends on the mode, and</span><br><span class=\"line\">through which the standard file operations such as reading and writing</span><br><span class=\"line\">are performed. When open() is used to open a file in a text mode (&apos;w&apos;,</span><br><span class=\"line\">&apos;r&apos;, &apos;wt&apos;, &apos;rt&apos;, etc.), it returns a TextIOWrapper. When used to open</span><br><span class=\"line\">a file in a binary mode, the returned class varies: in read binary</span><br><span class=\"line\">mode, it returns a BufferedReader; in write binary and append binary</span><br><span class=\"line\">modes, it returns a BufferedWriter, and in read/write mode, it returns</span><br><span class=\"line\">a BufferedRandom.</span><br></pre></td></tr></table></figure>\r\n<p><code>open()</code> 返回一个文件对象, 类型取决于 <code>mode</code>, 并且通过它执行标准文件操作例如读写. 当 <code>open()</code> 用于以文本模式打开文件(例如 <code>r</code>, <code>wt</code>, <code>rt</code> 等), 它将会返回一个 <code>TextIOWrapper</code>. 当以二进制模式打开文件, 返回的类会有所不同: 在 <code>rb</code> 模式, 返回 <code>BufferedReader</code>; 在 <code>wb</code> 和 <code>ab</code> 模式, 返回 <code>BufferedWriter</code>, 在 <code>+b</code> 模式, 返回 <code>BufferedRandom</code>.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It is also possible to use a string or bytearray as a file for both</span><br><span class=\"line\">reading and writing. For strings StringIO can be used like a file</span><br><span class=\"line\">opened in a text mode, and for bytes a BytesIO can be used like a file</span><br><span class=\"line\">opened in a binary mode.</span><br></pre></td></tr></table></figure>\r\n<p>也可以使用字符串或字节数组作为读取和写入的文件. 对于字符串, <code>StringIO</code> 可以像在文本模式下打开的文件一样使用; 对于字节, <code>BytesIO</code> 可以像在二进制模式下打开的文件一样使用.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/assert/repos/python/buildin.open.__doc__\">Origin-File</a></p>\r\n<p>Help on built-in function open in module io:</p>\r\n<p>内容来自 <code>open.__doc__</code> 对象.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(file, mode=<span class=\"string\">'r'</span>, buffering=<span class=\"number\">-1</span>, encoding=<span class=\"keyword\">None</span>, errors=<span class=\"keyword\">None</span>, newline=<span class=\"keyword\">None</span>, closefd=<span class=\"keyword\">True</span>, opener=<span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># Open file and return a stream.  Raise OSError upon failure.</span></span><br></pre></td></tr></table></figure>\r\n<p>打开文件并返回流. 当打开失败时抛出 <code>OSError</code>.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file is either a text or byte string giving the name (and the path</span><br><span class=\"line\">if the file isn&apos;t in the current working directory) of the file to</span><br><span class=\"line\">be opened or an integer file descriptor of the file to be</span><br><span class=\"line\">wrapped. (If a file descriptor is given, it is closed when the</span><br><span class=\"line\">returned I/O object is closed, unless closefd is set to False.)</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>file</code> 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 <code>closefd=False</code>).</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode is an optional string that specifies the mode in which the file</span><br><span class=\"line\">is opened. It defaults to &apos;r&apos; which means open for reading in text</span><br><span class=\"line\">mode.  Other common values are &apos;w&apos; for writing (truncating the file if</span><br><span class=\"line\">it already exists), &apos;x&apos; for creating and writing to a new file, and</span><br><span class=\"line\">&apos;a&apos; for appending (which on some Unix systems, means that all writes</span><br><span class=\"line\">append to the end of the file regardless of the current seek position).</span><br><span class=\"line\">In text mode, if encoding is not specified the encoding used is platform</span><br><span class=\"line\">dependent: locale.getpreferredencoding(False) is called to get the</span><br><span class=\"line\">current locale encoding. (For reading and writing raw bytes use binary</span><br><span class=\"line\">mode and leave encoding unspecified.) The available modes are:</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>mode</code> 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 &quot;r&quot;, 意味着文本以只读(text readonly) 模式打开. 其他常见值是 &quot;w&quot; 用于写入 (如果文件已存在则截断), &quot;x&quot; 用于创建和写入新文件, 和 &quot;a&quot; 用于追加 (在某些 Unix 系统上, 意味着所有写入都追加到末尾, 无论当前读写指针在何处.) 在文本模式 &quot;t&quot; 下, 如果未指定编码, 则使用系统编码, 通过调用 <code>locale.getpreferredencoding(False)</code> 获取当前语言环境编码. (对于读写原始字节, 使用二进制模式 &quot;b&quot;, 此种模式不指定编码). 所有可用的模式有:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">========= ===============================================================</span><br><span class=\"line\">Character Meaning</span><br><span class=\"line\">--------- ---------------------------------------------------------------</span><br><span class=\"line\">&apos;r&apos;       文本 只读. (默认模式)</span><br><span class=\"line\">&apos;w&apos;       文本 只写, 如果文本已存在则截断文件.</span><br><span class=\"line\">&apos;x&apos;       只创建新文件, 并以写模式打开它.</span><br><span class=\"line\">&apos;a&apos;       以写模式打开, 如果文件存在则在末尾添加</span><br><span class=\"line\">&apos;b&apos;       二进制模式</span><br><span class=\"line\">&apos;t&apos;       文本模式</span><br><span class=\"line\">&apos;+&apos;       打开文件以更新 (读写)</span><br><span class=\"line\">&apos;U&apos;       universal newline mode (已弃用)</span><br><span class=\"line\">========= ===============================================================</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The default mode is &apos;rt&apos; (open for reading text). For binary random</span><br><span class=\"line\">access, the mode &apos;w+b&apos; opens and truncates the file to 0 bytes, while</span><br><span class=\"line\">&apos;r+b&apos; opens the file without truncation. The &apos;x&apos; mode implies &apos;w&apos; and</span><br><span class=\"line\">raises an `FileExistsError` if the file already exists.</span><br></pre></td></tr></table></figure>\r\n<p>默认的模式是 &quot;rt&quot; (以读文本模式打开). 对任意的二进制访问, &quot;w+b&quot; 模式将会截断文件为 0 字节打开, 而 &quot;r+b&quot; 则不会截断. &quot;x&quot; 模式意味着 &quot;w&quot;, 但如果文件已存在则抛出 <code>FileExistsError</code> 而不会截断文件, 当然也不会打开.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python distinguishes between files opened in binary and text modes,</span><br><span class=\"line\">even when the underlying operating system doesn&apos;t. Files opened in</span><br><span class=\"line\">binary mode (appending &apos;b&apos; to the mode argument) return contents as</span><br><span class=\"line\">bytes objects without any decoding. In text mode (the default, or when</span><br><span class=\"line\">&apos;t&apos; is appended to the mode argument), the contents of the file are</span><br><span class=\"line\">returned as strings, the bytes having been first decoded using a</span><br><span class=\"line\">platform-dependent encoding or using the specified encoding if given.</span><br></pre></td></tr></table></figure>\r\n<p>Python 区分以二进制模式和文本模式打开的文件, 即使底层操作系统不区分. 以二进制模式打开(将 <code>b</code> 添加到 <code>mode</code> 参数)的文件返回内容为字节对象, 没有进行任何解码. 在文本模式(默认, 或者将 <code>t</code> 添加到 <code>mode</code> 参数), 文件的内容作为字符串返回, 首先使用依赖于系统平台的编码, 或使用 <code>encoding</code> 参数指定编码(如果有的话).</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;U&apos; mode is deprecated and will raise an exception in future versions</span><br><span class=\"line\">of Python.  It has no effect in Python 3.  Use newline to control</span><br><span class=\"line\">universal newlines mode.</span><br></pre></td></tr></table></figure>\r\n<p>&quot;U&quot; 模式已启用, 将在未来版本中引发异常. 它在 Python3 版本中不会生效. 使用 <code>newline</code> 参数来控制通用换行模式.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buffering is an optional integer used to set the buffering policy.</span><br><span class=\"line\">Pass 0 to switch buffering off (only allowed in binary mode), 1 to select</span><br><span class=\"line\">line buffering (only usable in text mode), and an integer &gt; 1 to indicate</span><br><span class=\"line\">the size of a fixed-size chunk buffer.  When no buffering argument is</span><br><span class=\"line\">given, the default buffering policy works as follows:</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>buffering</code> 是一个可选的整数, 用来设置缓冲策略.</p>\r\n<ul>\r\n<li><code>0</code> 关闭缓冲. (仅允许二进制模式下使用)</li>\r\n<li><code>1</code> 选择行缓冲. (仅允许文本模式下使用)</li>\r\n<li><code>值&gt;1</code> 表示固定大小的块缓冲区大小.</li>\r\n</ul>\r\n<p>没有给定缓冲参数时, 默认的缓冲策略如下:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Binary files are buffered in fixed-size chunks; the size of the buffer</span><br><span class=\"line\">  is chosen using a heuristic trying to determine the underlying device&apos;s</span><br><span class=\"line\">  &quot;block size&quot; and falling back on `io.DEFAULT_BUFFER_SIZE`.</span><br><span class=\"line\">  On many systems, the buffer will typically be 4096 or 8192 bytes long.</span><br><span class=\"line\"></span><br><span class=\"line\">* &quot;Interactive&quot; text files (files for which isatty() returns True)</span><br><span class=\"line\">  use line buffering.  Other text files use the policy described above</span><br><span class=\"line\">  for binary files.</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p>二进制文件以固定大小的块进行缓冲; 使用启发式方法选择缓冲区大小, 驶入确定底层设备的 &quot;块大小&quot; 并回调到 <code>io.DEFAULT_BUFFER_SIZE</code>. 在许多系统上, 缓冲区长度为 4096 或 8192 字节.</p></li>\r\n<li><p>&quot;交互式&quot; 文本文件, (调用 <code>isatty()</code> 方法, 返回 <code>True</code> 的文件. &quot;is a tty&quot;) 使用行缓冲. 其他文本文件缓冲策略同二进制文件.</p></li>\r\n</ul>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encoding is the name of the encoding used to decode or encode the</span><br><span class=\"line\">file. This should only be used in text mode. The default encoding is</span><br><span class=\"line\">platform dependent, but any encoding supported by Python can be</span><br><span class=\"line\">passed.  See the codecs module for the list of supported encodings.</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>encoding</code> 指定解码或编码文件使用的字符编码. 它只应用于文本模式. 默认编码取决于系统平台, 但可以向 Python 传递任何支持编码. 参阅 <code>codecs</code> 模块文档获取支持编码格式列表.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errors is an optional string that specifies how encoding errors are to</span><br><span class=\"line\">be handled---this argument should not be used in binary mode. Pass</span><br><span class=\"line\">&apos;strict&apos; to raise a ValueError exception if there is an encoding error</span><br><span class=\"line\">(the default of None has the same effect), or pass &apos;ignore&apos; to ignore</span><br><span class=\"line\">errors. (Note that ignoring encoding errors can lead to data loss.)</span><br><span class=\"line\">See the documentation for codecs.register or run &apos;help(codecs.Codec)&apos;</span><br><span class=\"line\">for a list of the permitted encoding error strings.</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>errors</code> 是一个可选的字符串, 用于指定如何处理编码错误---此参数不应用于二进制模式. 各值对应的策略:</p>\r\n<ul>\r\n<li>默认值 &quot;none&quot;, 如果存在编码错误则抛出 <code>ValueError</code> 异常. (同 &quot;strict&quot;)</li>\r\n<li>&quot;strict&quot;, 如果存在编码错误则抛出 <code>ValueError</code> 异常.</li>\r\n<li>&quot;ignore&quot;, 忽略错误. (注意, 忽略编码错误可能导致数据丢失.)</li>\r\n</ul>\r\n<p>参阅 <code>codecs.register</code> 模块文档或运行 <code>help(codecs.Codec)</code> 获取有效的编码错误字符串列表.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newline controls how universal newlines works (it only applies to text</span><br><span class=\"line\">mode). It can be None, &apos;&apos;, &apos;\\n&apos;, &apos;\\r&apos;, and &apos;\\r\\n&apos;.  It works as</span><br><span class=\"line\">follows:</span><br></pre></td></tr></table></figure>\r\n<p>参数 <code>newline</code> 控制通用换行工作方式(仅应用于文本模式). 仅接受 <code>None</code>, <code>&quot;&quot;</code> (空), &quot;&quot;(换行符, Unix, 推荐), &quot;&quot;(回车换行, MS-DOS). 工作方式如下:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* On input, if newline is None, universal newlines mode is</span><br><span class=\"line\">  enabled. Lines in the input can end in &apos;\\n&apos;, &apos;\\r&apos;, or &apos;\\r\\n&apos;, and</span><br><span class=\"line\">  these are translated into &apos;\\n&apos; before being returned to the</span><br><span class=\"line\">  caller. If it is &apos;&apos;, universal newline mode is enabled, but line</span><br><span class=\"line\">  endings are returned to the caller untranslated. If it has any of</span><br><span class=\"line\">  the other legal values, input lines are only terminated by the given</span><br><span class=\"line\">  string, and the line ending is returned to the caller untranslated.</span><br><span class=\"line\"></span><br><span class=\"line\">* On output, if newline is None, any &apos;\\n&apos; characters written are</span><br><span class=\"line\">  translated to the system default line separator, os.linesep. If</span><br><span class=\"line\">  newline is &apos;&apos; or &apos;\\n&apos;, no translation takes place. If newline is any</span><br><span class=\"line\">  of the other legal values, any &apos;\\n&apos; characters written are translated</span><br><span class=\"line\">  to the given string.</span><br></pre></td></tr></table></figure>\r\n<p>输入(读取)时:</p>\r\n<ul>\r\n<li>如果 <code>newline</code> 的值为 <code>None</code>, 通用换行模式被启用. 输入的各行可以以 &quot;&quot;, &quot;&quot; 或 &quot;&quot; 结尾, 并且它们在被返回给函数调用前将被翻译成 &quot;&quot;.</li>\r\n<li>如果值为 <code>&quot;&quot;</code>, 则通用换行模式被启用, 但输入的换行符不会被翻译.</li>\r\n<li>如果为其他合法的值, 输入的各行将会以规定字符结尾, 且换行符不会被翻译. (就是说以 <code>newline</code> 参数规定的字符作为换行符, 识别一行字符串)</li>\r\n</ul>\r\n<p>输出(写入)时:</p>\r\n<ul>\r\n<li>如果 <code>newline</code> 的值为 <code>None</code>, 任何 <code>&quot;\\n&quot;</code> 换行符将被翻译为系统默认换行符(即 <code>os.linesep</code>).</li>\r\n<li>如果 <code>newline</code> 的值是 <code>&quot;&quot;</code> 或 <code>&quot;\\n&quot;</code>, 输出时不会翻译换行符.</li>\r\n<li>如果为其他合法的值, 任何 <code>&quot;\\n&quot;</code> 都会被翻译为指定字符.</li>\r\n</ul>\r\n<p><strong>注</strong>: Python 在处理文本时, 内部使用 <code>\\n</code> 作为换行符.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If closefd is False, the underlying file descriptor will be kept open</span><br><span class=\"line\">when the file is closed. This does not work when a file name is given</span><br><span class=\"line\">and must be True in that case.</span><br></pre></td></tr></table></figure>\r\n<p>如果参数 <code>closefd</code> 的值为 <code>False</code>, 则在关闭文件后, 基础文件描述符将保持打开状态. 这在给出文件名时不起作用, 在此情况下必须为 <code>True</code>.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A custom opener can be used by passing a callable as *opener*. The</span><br><span class=\"line\">underlying file descriptor for the file object is then obtained by</span><br><span class=\"line\">calling *opener* with (*file*, *flags*). *opener* must return an open</span><br><span class=\"line\">file descriptor (passing os.open as *opener* results in functionality</span><br><span class=\"line\">similar to passing None).</span><br></pre></td></tr></table></figure>\r\n<p>可以通过传递可调用的 <code>*opener*</code> 来使用自定义的 opener. 通过使用 <code>(*file*, *flags*)</code> 调用 <code>*opener*</code> 获取文件对象的基础文件描述符. <code>*opener*</code> 必须返回一个打开的文件描述符(将 <code>os.open</code> 传递给 <code>*opener*</code> 会产生类似于传递 <code>None</code> 的功能).</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open() returns a file object whose type depends on the mode, and</span><br><span class=\"line\">through which the standard file operations such as reading and writing</span><br><span class=\"line\">are performed. When open() is used to open a file in a text mode (&apos;w&apos;,</span><br><span class=\"line\">&apos;r&apos;, &apos;wt&apos;, &apos;rt&apos;, etc.), it returns a TextIOWrapper. When used to open</span><br><span class=\"line\">a file in a binary mode, the returned class varies: in read binary</span><br><span class=\"line\">mode, it returns a BufferedReader; in write binary and append binary</span><br><span class=\"line\">modes, it returns a BufferedWriter, and in read/write mode, it returns</span><br><span class=\"line\">a BufferedRandom.</span><br></pre></td></tr></table></figure>\r\n<p><code>open()</code> 返回一个文件对象, 类型取决于 <code>mode</code>, 并且通过它执行标准文件操作例如读写. 当 <code>open()</code> 用于以文本模式打开文件(例如 <code>r</code>, <code>wt</code>, <code>rt</code> 等), 它将会返回一个 <code>TextIOWrapper</code>. 当以二进制模式打开文件, 返回的类会有所不同: 在 <code>rb</code> 模式, 返回 <code>BufferedReader</code>; 在 <code>wb</code> 和 <code>ab</code> 模式, 返回 <code>BufferedWriter</code>, 在 <code>+b</code> 模式, 返回 <code>BufferedRandom</code>.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It is also possible to use a string or bytearray as a file for both</span><br><span class=\"line\">reading and writing. For strings StringIO can be used like a file</span><br><span class=\"line\">opened in a text mode, and for bytes a BytesIO can be used like a file</span><br><span class=\"line\">opened in a binary mode.</span><br></pre></td></tr></table></figure>\r\n<p>也可以使用字符串或字节数组作为读取和写入的文件. 对于字符串, <code>StringIO</code> 可以像在文本模式下打开的文件一样使用; 对于字节, <code>BytesIO</code> 可以像在二进制模式下打开的文件一样使用.</p>\r\n"},{"_content":"[Origin-File](/assert/repos/docker/docker.run.help)\n\n```\nUsage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\nOptions:\n      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`\n  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.\n      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n      --cap-add list                   Add Linux capabilities\n      --cap-drop list                  Drop Linux capabilities\n      --cgroup-parent string           Optional parent cgroup for the container\n      --cidfile string                 Write the container ID to the file\n      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n      --cpu-rt-period int              Limit CPU real-time period in microseconds\n      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.\n      --cpus decimal                   限制使用 CPU 的数量.\n      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach                         在后台运行容器, 并显示容器 ID.\n      --detach-keys string             Override the key sequence for detaching a container\n      --device list                    Add a host device to the container\n      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n      --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n      --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n      --disable-content-trust          Skip image verification (default true)\n      --dns list                       Set custom DNS servers\n      --dns-option list                Set DNS options\n      --dns-search list                Set custom DNS search domains\n      --entrypoint string              Overwrite the default ENTRYPOINT of the image\n  -e, --env list                       Set environment variables\n      --env-file list                  Read in a file of environment variables\n      --expose list                    Expose a port or a range of ports\n      --group-add list                 Add additional groups to join\n      --health-cmd string              Command to run to check health\n      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n      --health-retries int             Consecutive failures needed to report unhealthy\n      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)\n                                       (default 0s)\n      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n      --help                           显示帮助信息.\n  -h, --hostname string                为容器的 hostname 取名.\n      --init                           Run an init inside the container that forwards signals and reaps processes\n  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin\n      --ip string                      IPv4 address (e.g., 172.30.100.104)\n      --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n      --ipc string                     IPC mode to use\n      --isolation string               Container isolation technology\n      --kernel-memory bytes            限制内核内存使用量\n  -l, --label list                     Set meta data on a container\n      --label-file list                Read in a line delimited file of labels\n      --link list                      Add link to another container\n      --link-local-ip list             Container IPv4/IPv6 link-local addresses\n      --log-driver string              Logging driver for the container\n      --log-opt list                   Log driver options\n      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`\n      --memory-reservation bytes       Memory soft limit\n      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n      --mount mount                    Attach a filesystem mount to the container\n      --name string                    Assign a name to the container\n      --network string                 Connect a container to a network (default \"default\")\n      --network-alias list             Add network-scoped alias for the container\n      --no-healthcheck                 Disable any container-specified HEALTHCHECK\n      --oom-kill-disable               Disable OOM Killer\n      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n      --pid string                     PID namespace to use\n      --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n      --privileged                     Give extended privileges to this container\n  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.\n      --read-only                      Mount the container's root filesystem as read only\n      --restart string                 Restart policy to apply when a container exits (default \"no\")\n      --rm                             当容器停止运行时自动移除.\n      --runtime string                 Runtime to use for this container\n      --security-opt list              Security Options\n      --shm-size bytes                 Size of /dev/shm\n      --sig-proxy                      Proxy received signals to the process (default true)\n      --stop-signal string             Signal to stop a container (default \"SIGTERM\")\n      --stop-timeout int               Timeout (in seconds) to stop a container\n      --storage-opt list               Storage driver options for the container\n      --sysctl map                     Sysctl options (default map[])\n      --tmpfs list                     挂载一个临时文件系统.\n  -t, --tty                            创建一个伪终端\n      --ulimit ulimit                  Ulimit options (default [])\n  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])\n      --userns string                  User namespace to use\n      --uts string                     UTS namespace to use\n  -v, --volume list                    Bind mount a volume\n      --volume-driver string           Optional volume driver for the container\n      --volumes-from list              Mount volumes from the specified container(s)\n  -w, --workdir string                 Working directory inside the container\n\n```\n","source":"assert/resources/docker.run.help.md","raw":"[Origin-File](/assert/repos/docker/docker.run.help)\n\n```\nUsage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\nOptions:\n      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`\n  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.\n      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n      --cap-add list                   Add Linux capabilities\n      --cap-drop list                  Drop Linux capabilities\n      --cgroup-parent string           Optional parent cgroup for the container\n      --cidfile string                 Write the container ID to the file\n      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n      --cpu-rt-period int              Limit CPU real-time period in microseconds\n      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.\n      --cpus decimal                   限制使用 CPU 的数量.\n      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach                         在后台运行容器, 并显示容器 ID.\n      --detach-keys string             Override the key sequence for detaching a container\n      --device list                    Add a host device to the container\n      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n      --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n      --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n      --disable-content-trust          Skip image verification (default true)\n      --dns list                       Set custom DNS servers\n      --dns-option list                Set DNS options\n      --dns-search list                Set custom DNS search domains\n      --entrypoint string              Overwrite the default ENTRYPOINT of the image\n  -e, --env list                       Set environment variables\n      --env-file list                  Read in a file of environment variables\n      --expose list                    Expose a port or a range of ports\n      --group-add list                 Add additional groups to join\n      --health-cmd string              Command to run to check health\n      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n      --health-retries int             Consecutive failures needed to report unhealthy\n      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)\n                                       (default 0s)\n      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n      --help                           显示帮助信息.\n  -h, --hostname string                为容器的 hostname 取名.\n      --init                           Run an init inside the container that forwards signals and reaps processes\n  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin\n      --ip string                      IPv4 address (e.g., 172.30.100.104)\n      --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n      --ipc string                     IPC mode to use\n      --isolation string               Container isolation technology\n      --kernel-memory bytes            限制内核内存使用量\n  -l, --label list                     Set meta data on a container\n      --label-file list                Read in a line delimited file of labels\n      --link list                      Add link to another container\n      --link-local-ip list             Container IPv4/IPv6 link-local addresses\n      --log-driver string              Logging driver for the container\n      --log-opt list                   Log driver options\n      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`\n      --memory-reservation bytes       Memory soft limit\n      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n      --mount mount                    Attach a filesystem mount to the container\n      --name string                    Assign a name to the container\n      --network string                 Connect a container to a network (default \"default\")\n      --network-alias list             Add network-scoped alias for the container\n      --no-healthcheck                 Disable any container-specified HEALTHCHECK\n      --oom-kill-disable               Disable OOM Killer\n      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n      --pid string                     PID namespace to use\n      --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n      --privileged                     Give extended privileges to this container\n  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.\n      --read-only                      Mount the container's root filesystem as read only\n      --restart string                 Restart policy to apply when a container exits (default \"no\")\n      --rm                             当容器停止运行时自动移除.\n      --runtime string                 Runtime to use for this container\n      --security-opt list              Security Options\n      --shm-size bytes                 Size of /dev/shm\n      --sig-proxy                      Proxy received signals to the process (default true)\n      --stop-signal string             Signal to stop a container (default \"SIGTERM\")\n      --stop-timeout int               Timeout (in seconds) to stop a container\n      --storage-opt list               Storage driver options for the container\n      --sysctl map                     Sysctl options (default map[])\n      --tmpfs list                     挂载一个临时文件系统.\n  -t, --tty                            创建一个伪终端\n      --ulimit ulimit                  Ulimit options (default [])\n  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])\n      --userns string                  User namespace to use\n      --uts string                     UTS namespace to use\n  -v, --volume list                    Bind mount a volume\n      --volume-driver string           Optional volume driver for the container\n      --volumes-from list              Mount volumes from the specified container(s)\n  -w, --workdir string                 Working directory inside the container\n\n```\n","date":"2018-08-23T07:55:08.544Z","updated":"2018-08-19T15:12:46.000Z","path":"assert/resources/docker.run.help.html","title":"","comments":1,"layout":"page","_id":"cjl8vtwg7003zw8lkvbby97c8","content":"<p><a href=\"/assert/repos/docker/docker.run.help\">Origin-File</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\">Run a command in a new container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`</span><br><span class=\"line\">  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.</span><br><span class=\"line\">      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</span><br><span class=\"line\">      --blkio-weight-device list       Block IO weight (relative device weight) (default [])</span><br><span class=\"line\">      --cap-add list                   Add Linux capabilities</span><br><span class=\"line\">      --cap-drop list                  Drop Linux capabilities</span><br><span class=\"line\">      --cgroup-parent string           Optional parent cgroup for the container</span><br><span class=\"line\">      --cidfile string                 Write the container ID to the file</span><br><span class=\"line\">      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int              Limit CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds</span><br><span class=\"line\">  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.</span><br><span class=\"line\">      --cpus decimal                   限制使用 CPU 的数量.</span><br><span class=\"line\">      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">  -d, --detach                         在后台运行容器, 并显示容器 ID.</span><br><span class=\"line\">      --detach-keys string             Override the key sequence for detaching a container</span><br><span class=\"line\">      --device list                    Add a host device to the container</span><br><span class=\"line\">      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list</span><br><span class=\"line\">      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])</span><br><span class=\"line\">      --device-read-iops list          Limit read rate (IO per second) from a device (default [])</span><br><span class=\"line\">      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])</span><br><span class=\"line\">      --device-write-iops list         Limit write rate (IO per second) to a device (default [])</span><br><span class=\"line\">      --disable-content-trust          Skip image verification (default true)</span><br><span class=\"line\">      --dns list                       Set custom DNS servers</span><br><span class=\"line\">      --dns-option list                Set DNS options</span><br><span class=\"line\">      --dns-search list                Set custom DNS search domains</span><br><span class=\"line\">      --entrypoint string              Overwrite the default ENTRYPOINT of the image</span><br><span class=\"line\">  -e, --env list                       Set environment variables</span><br><span class=\"line\">      --env-file list                  Read in a file of environment variables</span><br><span class=\"line\">      --expose list                    Expose a port or a range of ports</span><br><span class=\"line\">      --group-add list                 Add additional groups to join</span><br><span class=\"line\">      --health-cmd string              Command to run to check health</span><br><span class=\"line\">      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --health-retries int             Consecutive failures needed to report unhealthy</span><br><span class=\"line\">      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)</span><br><span class=\"line\">                                       (default 0s)</span><br><span class=\"line\">      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --help                           显示帮助信息.</span><br><span class=\"line\">  -h, --hostname string                为容器的 hostname 取名.</span><br><span class=\"line\">      --init                           Run an init inside the container that forwards signals and reaps processes</span><br><span class=\"line\">  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin</span><br><span class=\"line\">      --ip string                      IPv4 address (e.g., 172.30.100.104)</span><br><span class=\"line\">      --ip6 string                     IPv6 address (e.g., 2001:db8::33)</span><br><span class=\"line\">      --ipc string                     IPC mode to use</span><br><span class=\"line\">      --isolation string               Container isolation technology</span><br><span class=\"line\">      --kernel-memory bytes            限制内核内存使用量</span><br><span class=\"line\">  -l, --label list                     Set meta data on a container</span><br><span class=\"line\">      --label-file list                Read in a line delimited file of labels</span><br><span class=\"line\">      --link list                      Add link to another container</span><br><span class=\"line\">      --link-local-ip list             Container IPv4/IPv6 link-local addresses</span><br><span class=\"line\">      --log-driver string              Logging driver for the container</span><br><span class=\"line\">      --log-opt list                   Log driver options</span><br><span class=\"line\">      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)</span><br><span class=\"line\">  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`</span><br><span class=\"line\">      --memory-reservation bytes       Memory soft limit</span><br><span class=\"line\">      --memory-swap bytes              Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap</span><br><span class=\"line\">      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)</span><br><span class=\"line\">      --mount mount                    Attach a filesystem mount to the container</span><br><span class=\"line\">      --name string                    Assign a name to the container</span><br><span class=\"line\">      --network string                 Connect a container to a network (default &quot;default&quot;)</span><br><span class=\"line\">      --network-alias list             Add network-scoped alias for the container</span><br><span class=\"line\">      --no-healthcheck                 Disable any container-specified HEALTHCHECK</span><br><span class=\"line\">      --oom-kill-disable               Disable OOM Killer</span><br><span class=\"line\">      --oom-score-adj int              Tune host&apos;s OOM preferences (-1000 to 1000)</span><br><span class=\"line\">      --pid string                     PID namespace to use</span><br><span class=\"line\">      --pids-limit int                 Tune container pids limit (set -1 for unlimited)</span><br><span class=\"line\">      --privileged                     Give extended privileges to this container</span><br><span class=\"line\">  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.</span><br><span class=\"line\">  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.</span><br><span class=\"line\">      --read-only                      Mount the container&apos;s root filesystem as read only</span><br><span class=\"line\">      --restart string                 Restart policy to apply when a container exits (default &quot;no&quot;)</span><br><span class=\"line\">      --rm                             当容器停止运行时自动移除.</span><br><span class=\"line\">      --runtime string                 Runtime to use for this container</span><br><span class=\"line\">      --security-opt list              Security Options</span><br><span class=\"line\">      --shm-size bytes                 Size of /dev/shm</span><br><span class=\"line\">      --sig-proxy                      Proxy received signals to the process (default true)</span><br><span class=\"line\">      --stop-signal string             Signal to stop a container (default &quot;SIGTERM&quot;)</span><br><span class=\"line\">      --stop-timeout int               Timeout (in seconds) to stop a container</span><br><span class=\"line\">      --storage-opt list               Storage driver options for the container</span><br><span class=\"line\">      --sysctl map                     Sysctl options (default map[])</span><br><span class=\"line\">      --tmpfs list                     挂载一个临时文件系统.</span><br><span class=\"line\">  -t, --tty                            创建一个伪终端</span><br><span class=\"line\">      --ulimit ulimit                  Ulimit options (default [])</span><br><span class=\"line\">  -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class=\"line\">      --userns string                  User namespace to use</span><br><span class=\"line\">      --uts string                     UTS namespace to use</span><br><span class=\"line\">  -v, --volume list                    Bind mount a volume</span><br><span class=\"line\">      --volume-driver string           Optional volume driver for the container</span><br><span class=\"line\">      --volumes-from list              Mount volumes from the specified container(s)</span><br><span class=\"line\">  -w, --workdir string                 Working directory inside the container</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/assert/repos/docker/docker.run.help\">Origin-File</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\">Run a command in a new container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --add-host list                  向容器的 /etc/hosts 中添加 主机名:IP地址 对. 例如 `--add-host=[myvps:127.0.0.1, hisserver:222.222.123.245]`</span><br><span class=\"line\">  -a, --attach list                    将容器的 stdin, stdout 或 stderr 连接到当前终端. 例如 `--attach=[stdin, stdout]` 连接 stdin 与 stdout. 如果留空, 如 `-a` 或 `--attach`, 则会将三者连接出来.</span><br><span class=\"line\">      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</span><br><span class=\"line\">      --blkio-weight-device list       Block IO weight (relative device weight) (default [])</span><br><span class=\"line\">      --cap-add list                   Add Linux capabilities</span><br><span class=\"line\">      --cap-drop list                  Drop Linux capabilities</span><br><span class=\"line\">      --cgroup-parent string           Optional parent cgroup for the container</span><br><span class=\"line\">      --cidfile string                 Write the container ID to the file</span><br><span class=\"line\">      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int              Limit CPU real-time period in microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds</span><br><span class=\"line\">  -c, --cpu-shares int                 分配 CPU 使用率, 默认 1024(即 100%). 例如 `-c 2048` 或 `--cpu-shares=2048` 分配两倍 CPU 使用率.</span><br><span class=\"line\">      --cpus decimal                   限制使用 CPU 的数量.</span><br><span class=\"line\">      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)</span><br><span class=\"line\">  -d, --detach                         在后台运行容器, 并显示容器 ID.</span><br><span class=\"line\">      --detach-keys string             Override the key sequence for detaching a container</span><br><span class=\"line\">      --device list                    Add a host device to the container</span><br><span class=\"line\">      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list</span><br><span class=\"line\">      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])</span><br><span class=\"line\">      --device-read-iops list          Limit read rate (IO per second) from a device (default [])</span><br><span class=\"line\">      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])</span><br><span class=\"line\">      --device-write-iops list         Limit write rate (IO per second) to a device (default [])</span><br><span class=\"line\">      --disable-content-trust          Skip image verification (default true)</span><br><span class=\"line\">      --dns list                       Set custom DNS servers</span><br><span class=\"line\">      --dns-option list                Set DNS options</span><br><span class=\"line\">      --dns-search list                Set custom DNS search domains</span><br><span class=\"line\">      --entrypoint string              Overwrite the default ENTRYPOINT of the image</span><br><span class=\"line\">  -e, --env list                       Set environment variables</span><br><span class=\"line\">      --env-file list                  Read in a file of environment variables</span><br><span class=\"line\">      --expose list                    Expose a port or a range of ports</span><br><span class=\"line\">      --group-add list                 Add additional groups to join</span><br><span class=\"line\">      --health-cmd string              Command to run to check health</span><br><span class=\"line\">      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --health-retries int             Consecutive failures needed to report unhealthy</span><br><span class=\"line\">      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h)</span><br><span class=\"line\">                                       (default 0s)</span><br><span class=\"line\">      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)</span><br><span class=\"line\">      --help                           显示帮助信息.</span><br><span class=\"line\">  -h, --hostname string                为容器的 hostname 取名.</span><br><span class=\"line\">      --init                           Run an init inside the container that forwards signals and reaps processes</span><br><span class=\"line\">  -i, --interactive                    即使没有 `--attach`, 也开放容器的 stdin</span><br><span class=\"line\">      --ip string                      IPv4 address (e.g., 172.30.100.104)</span><br><span class=\"line\">      --ip6 string                     IPv6 address (e.g., 2001:db8::33)</span><br><span class=\"line\">      --ipc string                     IPC mode to use</span><br><span class=\"line\">      --isolation string               Container isolation technology</span><br><span class=\"line\">      --kernel-memory bytes            限制内核内存使用量</span><br><span class=\"line\">  -l, --label list                     Set meta data on a container</span><br><span class=\"line\">      --label-file list                Read in a line delimited file of labels</span><br><span class=\"line\">      --link list                      Add link to another container</span><br><span class=\"line\">      --link-local-ip list             Container IPv4/IPv6 link-local addresses</span><br><span class=\"line\">      --log-driver string              Logging driver for the container</span><br><span class=\"line\">      --log-opt list                   Log driver options</span><br><span class=\"line\">      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)</span><br><span class=\"line\">  -m, --memory bytes                   限制内存使用量, 例如 `--memory=4g` 限制最多使用 4GB 内存. 可用的单位有 `bkmg`</span><br><span class=\"line\">      --memory-reservation bytes       Memory soft limit</span><br><span class=\"line\">      --memory-swap bytes              Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap</span><br><span class=\"line\">      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)</span><br><span class=\"line\">      --mount mount                    Attach a filesystem mount to the container</span><br><span class=\"line\">      --name string                    Assign a name to the container</span><br><span class=\"line\">      --network string                 Connect a container to a network (default &quot;default&quot;)</span><br><span class=\"line\">      --network-alias list             Add network-scoped alias for the container</span><br><span class=\"line\">      --no-healthcheck                 Disable any container-specified HEALTHCHECK</span><br><span class=\"line\">      --oom-kill-disable               Disable OOM Killer</span><br><span class=\"line\">      --oom-score-adj int              Tune host&apos;s OOM preferences (-1000 to 1000)</span><br><span class=\"line\">      --pid string                     PID namespace to use</span><br><span class=\"line\">      --pids-limit int                 Tune container pids limit (set -1 for unlimited)</span><br><span class=\"line\">      --privileged                     Give extended privileges to this container</span><br><span class=\"line\">  -p, --publish list                   公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.</span><br><span class=\"line\">  -P, --publish-all                    将容器所有使用的端口公开, 随机映射到主机端口.</span><br><span class=\"line\">      --read-only                      Mount the container&apos;s root filesystem as read only</span><br><span class=\"line\">      --restart string                 Restart policy to apply when a container exits (default &quot;no&quot;)</span><br><span class=\"line\">      --rm                             当容器停止运行时自动移除.</span><br><span class=\"line\">      --runtime string                 Runtime to use for this container</span><br><span class=\"line\">      --security-opt list              Security Options</span><br><span class=\"line\">      --shm-size bytes                 Size of /dev/shm</span><br><span class=\"line\">      --sig-proxy                      Proxy received signals to the process (default true)</span><br><span class=\"line\">      --stop-signal string             Signal to stop a container (default &quot;SIGTERM&quot;)</span><br><span class=\"line\">      --stop-timeout int               Timeout (in seconds) to stop a container</span><br><span class=\"line\">      --storage-opt list               Storage driver options for the container</span><br><span class=\"line\">      --sysctl map                     Sysctl options (default map[])</span><br><span class=\"line\">      --tmpfs list                     挂载一个临时文件系统.</span><br><span class=\"line\">  -t, --tty                            创建一个伪终端</span><br><span class=\"line\">      --ulimit ulimit                  Ulimit options (default [])</span><br><span class=\"line\">  -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class=\"line\">      --userns string                  User namespace to use</span><br><span class=\"line\">      --uts string                     UTS namespace to use</span><br><span class=\"line\">  -v, --volume list                    Bind mount a volume</span><br><span class=\"line\">      --volume-driver string           Optional volume driver for the container</span><br><span class=\"line\">      --volumes-from list              Mount volumes from the specified container(s)</span><br><span class=\"line\">  -w, --workdir string                 Working directory inside the container</span><br></pre></td></tr></table></figure>\r\n"},{"_content":"[Origin-File](/assert/repos/python/json.__doc__)\n\n> Help on package json:\n\n# NAME\n    json\n\n# 描述\n\n[JSON(JavaScript Object Notation)](http://json.org) 是用作轻量级数据交换格式的JavaScript语法(ECMA-262第3版)的子集.\n\n`json` 向用户公开了一个类似于标准库模块 `marshal` 和 `pickle` 的 API. 它源自外部维护的 simplejson 库的一个版本.\n\n## 对基本 Python 对象层级结构编码\n\n```python\n>>> import json\n>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n'[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]' \n# json.dumps() 函数返回序列化 json 字符串\n>>> print(json.dumps(\"\\\"foo\\bar\"))\n\"\\\"foo\\bar\"\n>>> print(json.dumps('\\u1234'))\n\"\\u1234\"\n>>> print(json.dumps('\\\\'))\n\"\\\\\"\n>>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n{\"a\": 0, \"b\": 0, \"c\": 0}\n>>> from io import StringIO\n>>> io = StringIO()\n>>> json.dump(['streaming API'], io)\n# json.dump(obj, io) 将 obj 序列化后输出到 io\n>>> io.getvalue()\n'[\"streaming API\"]'\n```\n\n### 紧凑编码\n\n```py\n>>> import json\n>>> mydict = {'4': 5, '6': 7}\n>>> json.dumps([1,2,3,mydict], separators=(',', ':'))\n'[1,2,3,{\"4\":5,\"6\":7}]'\n```\n\n### 漂亮的打印输出\n\n```py\n>>> import json\n>>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))\n{\n    \"4\": 5,\n    \"6\": 7\n}\n```\n\n## 解码 JSON\n\n```py\n>>> import json\n>>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]\n>>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') == obj\nTrue\n>>> json.loads('\"\\\\\"foo\\\\bar\"') == '\"foo\\x08ar'\nTrue\n>>> from io import StringIO\n>>> io = StringIO('[\"streaming API\"]')\n>>> json.load(io)[0] == 'streaming API'\nTrue\n```\n\n### 指定 JSON 对象解码\n\n```py\n>>> import json\n>>> def as_complex(dct):\n...     if '__complex__' in dct:\n...         return complex(dct['real'], dct['imag'])\n...     return dct\n...\n>>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n...     object_hook=as_complex)\n(1+2j)\n>>> from decimal import Decimal\n>>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')\nTrue\n```\n\n### 指定 JSON 对象编码\n\n```py\n>>> import json\n>>> def encode_complex(obj):\n...     if isinstance(obj, complex):\n...         return [obj.real, obj.imag]\n...     raise TypeError(f'Object of type {obj.__class__.__name__} '\n...                     f'is not JSON serializable')\n...\n>>> json.dumps(2 + 1j, default=encode_complex)\n'[2.0, 1.0]'\n>>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n'[2.0, 1.0]'\n>>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n'[2.0, 1.0]'\n```\n\n### 使用shell中的 `json.tool` 来验证和美化打印输出\n\n```sh\n$ echo '{\"json\":\"obj\"}' | python -m json.tool\n{\n    \"json\": \"obj\"\n}\n$ echo '{ 1.2:3.4}' | python -m json.tool\nExpecting property name enclosed in double quotes: line 1 column 3 (char 2)\n```\n\n# 包内容\n\n- `decoder`\n- `encoder`\n- `scanner`\n- `tool`\n\n# CLASS\n\n- `builtins.ValueError(builtins.Exception)`\n    - `json.decoder.JSONDecodeError`\n- `builtins.object`\n    - `json.decoder.JSONDecoder`\n    - `json.encoder.JSONEncoder`\n\n```\n    class JSONDecodeError(builtins.ValueError)\n     |  JSONDecodeError(msg, doc, pos)\n     |\n     |  Subclass of ValueError with the following additional properties:\n     |\n     |  msg: 未格式化的错误信息\n     |  doc: 正在解析的JSON文档\n     |  pos: 解析失败处的 index\n     |  lineno: 对应于 pos 的行\n     |  colno: 对应于 pos 的列\n     |\n     |  方法解析顺序:\n     |      JSONDecodeError\n     |      builtins.ValueError\n     |      builtins.Exception\n     |      builtins.BaseException\n     |      builtins.object\n     |\n     |  这里定义的方法:\n     |\n     |  __init__(self, msg, doc, pos)\n     |      初始化 self.  参阅 help(type(self)) 得到准确的 signature.\n     |\n     |  __reduce__(self)\n     |      Helper for pickle.\n     |\n     |  ----------------------------------------------------------------------\n     |  这里定义的数据描述符:\n     |\n     |  __weakref__\n     |      对象的弱引用列表(如果定义)\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from builtins.ValueError:\n     |\n     |  __new__(*args, **kwargs) from builtins.type\n     |      创建并返回一个新对象. 参阅 help(type) 获得准确的 signature.\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from builtins.BaseException:\n     |\n     |  __delattr__(self, name, /)\n     |      执行 delattr(self, name).\n     |\n     |  __getattribute__(self, name, /)\n     |      返回 getattr(self, name).\n     |\n     |  __repr__(self, /)\n     |      返回 repr(self).\n     |\n     |  __setattr__(self, name, value, /)\n     |      执行 setattr(self, name, value).\n     |\n     |  __setstate__(...)\n     |\n     |  __str__(self, /)\n     |      返回 str(self).\n     |\n     |  with_traceback(...)\n     |      Exception.with_traceback(tb) --\n     |      set self.__traceback__ to tb and return self.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from builtins.BaseException:\n     |\n     |  __cause__\n     |      exception cause     例外原因\n     |\n     |  __context__\n     |      exception context   例外内容\n     |\n     |  __dict__\n     |\n     |  __suppress_context__\n     |\n     |  __traceback__\n     |\n     |  args\n\n    class JSONDecoder(builtins.object)\n     |  JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)\n     |\n     |  Simple JSON <http://json.org> decoder\n     |\n     |  解码时默认进行以下转换:\n     |\n     |  +---------------+-------------------+\n     |  | JSON          | Python            |\n     |  +===============+===================+\n     |  | object        | dict              |\n     |  +---------------+-------------------+\n     |  | array         | list              |\n     |  +---------------+-------------------+\n     |  | string        | str               |\n     |  +---------------+-------------------+\n     |  | number (int)  | int               |\n     |  +---------------+-------------------+\n     |  | number (real) | float             |\n     |  +---------------+-------------------+\n     |  | true          | True              |\n     |  +---------------+-------------------+\n     |  | false         | False             |\n     |  +---------------+-------------------+\n     |  | null          | None              |\n     |  +---------------+-------------------+\n     |\n     |  它还将 ``NaN``, ``Infinity`` 和 ``-Infinity`` 理解为对应的浮点数, 这超出\n     |  了 JSON 的规范.\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, *, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)\n     |      ``object_hook``, 如果指定, 将调用每个JSON对象的结果, 并使用其返回值\n     |      代替给定的 ``dict``. 这可用于提供自定义反序列化 (例如, 支持\n     |      JSON-RPC 类提示).\n     |\n     |      ``object_pairs_hook``, 如果指定将被调用, 每个 JSON 对象的结果都使用\n     |      有序的对列表进行解码. 将使用 ``object_paires_hook`` 的返回值, \n     |      而非 ``dict``. 此特性可用于实现自定义解码器. 如果还定义了\n     |      ``object_hook`` , 则 ``object_hook`` 优先.\n     |\n     |      ``parse_float``, 如果指定, 将使用要解码的每个 JSON float 的字符串调用. \n     |      默认情况下, 这相当于 float(num_str). 这可用于为 JSON 浮点数使用另一\n     |      种数据类型或解析器(例如 decimal.Decimal).\n     |\n     |      ``parse_int``, 如果指定, 将使用要解码的每个 JSON int 的字符串调用. \n     |      默认情况下, 这相当于 int(num_str). 这可用于为 JSON 浮点数使用另一种\n     |      数据类型或解析器(例如 float).\n     |\n     |      ``parse_constant``, if specified, will be called with one of the\n     |      following strings: -Infinity, Infinity, NaN.\n     |      This can be used to raise an exception if invalid JSON numbers\n     |      are encountered.\n     |\n     |      If ``strict`` is false (true is the default), then control\n     |      characters will be allowed inside strings.  Control characters in\n     |      this context are those with character codes in the 0-31 range,\n     |      including ``'\\t'`` (tab), ``'\\n'``, ``'\\r'`` and ``'\\0'``.\n     |\n     |  decode(self, s, _w=<built-in method match of re.Pattern object at 0x00000175F1020F30>)\n     |      Return the Python representation of ``s`` (a ``str`` instance\n     |      containing a JSON document).\n     |\n     |  raw_decode(self, s, idx=0)\n     |      Decode a JSON document from ``s`` (a ``str`` beginning with\n     |      a JSON document) and return a 2-tuple of the Python\n     |      representation and the index in ``s`` where the document ended.\n     |\n     |      This can be used to decode a JSON document from a string that may\n     |      have extraneous data at the end.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class JSONEncoder(builtins.object)\n     |  JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)\n     |\n     |  Extensible JSON <http://json.org> encoder for Python data structures.\n     |\n     |  Supports the following objects and types by default:\n     |\n     |  +-------------------+---------------+\n     |  | Python            | JSON          |\n     |  +===================+===============+\n     |  | dict              | object        |\n     |  +-------------------+---------------+\n     |  | list, tuple       | array         |\n     |  +-------------------+---------------+\n     |  | str               | string        |\n     |  +-------------------+---------------+\n     |  | int, float        | number        |\n     |  +-------------------+---------------+\n     |  | True              | true          |\n     |  +-------------------+---------------+\n     |  | False             | false         |\n     |  +-------------------+---------------+\n     |  | None              | null          |\n     |  +-------------------+---------------+\n     |\n     |  To extend this to recognize other objects, subclass and implement a\n     |  ``.default()`` method with another method that returns a serializable\n     |  object for ``o`` if possible, otherwise it should call the superclass\n     |  implementation (to raise ``TypeError``).\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)\n     |      Constructor for JSONEncoder, with sensible defaults.\n     |\n     |      If skipkeys is false, then it is a TypeError to attempt\n     |      encoding of keys that are not str, int, float or None.  If\n     |      skipkeys is True, such items are simply skipped.\n     |\n     |      If ensure_ascii is true, the output is guaranteed to be str\n     |      objects with all incoming non-ASCII characters escaped.  If\n     |      ensure_ascii is false, the output can contain non-ASCII characters.\n     |\n     |      If check_circular is true, then lists, dicts, and custom encoded\n     |      objects will be checked for circular references during encoding to\n     |      prevent an infinite recursion (which would cause an OverflowError).\n     |      Otherwise, no such check takes place.\n     |\n     |      If allow_nan is true, then NaN, Infinity, and -Infinity will be\n     |      encoded as such.  This behavior is not JSON specification compliant,\n     |      but is consistent with most JavaScript based encoders and decoders.\n     |      Otherwise, it will be a ValueError to encode such floats.\n     |\n     |      If sort_keys is true, then the output of dictionaries will be\n     |      sorted by key; this is useful for regression tests to ensure\n     |      that JSON serializations can be compared on a day-to-day basis.\n     |\n     |      If indent is a non-negative integer, then JSON array\n     |      elements and object members will be pretty-printed with that\n     |      indent level.  An indent level of 0 will only insert newlines.\n     |      None is the most compact representation.\n     |\n     |      If specified, separators should be an (item_separator, key_separator)\n     |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and\n     |      (',', ': ') otherwise.  To get the most compact JSON representation,\n     |      you should specify (',', ':') to eliminate whitespace.\n     |\n     |      If specified, default is a function that gets called for objects\n     |      that can't otherwise be serialized.  It should return a JSON encodable\n     |      version of the object or raise a ``TypeError``.\n     |\n     |  default(self, o)\n     |      Implement this method in a subclass such that it returns\n     |      a serializable object for ``o``, or calls the base implementation\n     |      (to raise a ``TypeError``).\n     |\n     |      For example, to support arbitrary iterators, you could\n     |      implement default like this::\n     |\n     |          def default(self, o):\n     |              try:\n     |                  iterable = iter(o)\n     |              except TypeError:\n     |                  pass\n     |              else:\n     |                  return list(iterable)\n     |              # Let the base class default method raise the TypeError\n     |              return JSONEncoder.default(self, o)\n     |\n     |  encode(self, o)\n     |      Return a JSON string representation of a Python data structure.\n     |\n     |      >>> from json.encoder import JSONEncoder\n     |      >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n     |      '{\"foo\": [\"bar\", \"baz\"]}'\n     |\n     |  iterencode(self, o, _one_shot=False)\n     |      Encode the given object and yield each string\n     |      representation as available.\n     |\n     |      For example::\n     |\n     |          for chunk in JSONEncoder().iterencode(bigobject):\n     |              mysocket.write(chunk)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  item_separator = ', '\n     |\n     |  key_separator = ': '\n```\n\n# FUNCTIONS\n\n```py\n    dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\n        Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n        ``.write()``-supporting file-like object).\n\n        If ``skipkeys`` is true then ``dict`` keys that are not basic types\n        (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n        instead of raising a ``TypeError``.\n\n        If ``ensure_ascii`` is false, then the strings written to ``fp`` can\n        contain non-ASCII characters if they appear in strings contained in\n        ``obj``. Otherwise, all such characters are escaped in JSON strings.\n\n        If ``check_circular`` is false, then the circular reference check\n        for container types will be skipped and a circular reference will\n        result in an ``OverflowError`` (or worse).\n\n        If ``allow_nan`` is false, then it will be a ``ValueError`` to\n        serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)\n        in strict compliance of the JSON specification, instead of using the\n        JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n\n        If ``indent`` is a non-negative integer, then JSON array elements and\n        object members will be pretty-printed with that indent level. An indent\n        level of 0 will only insert newlines. ``None`` is the most compact\n        representation.\n\n        If specified, ``separators`` should be an ``(item_separator, key_separator)``\n        tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n        ``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n        you should specify ``(',', ':')`` to eliminate whitespace.\n\n        ``default(obj)`` is a function that should return a serializable version\n        of obj or raise TypeError. The default simply raises TypeError.\n\n        If *sort_keys* is true (default: ``False``), then the output of\n        dictionaries will be sorted by key.\n\n        To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n        ``.default()`` method to serialize additional types), specify it with\n        the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n\n    dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\n        Serialize ``obj`` to a JSON formatted ``str``.\n\n        If ``skipkeys`` is true then ``dict`` keys that are not basic types\n        (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n        instead of raising a ``TypeError``.\n\n        If ``ensure_ascii`` is false, then the return value can contain non-ASCII\n        characters if they appear in strings contained in ``obj``. Otherwise, all\n        such characters are escaped in JSON strings.\n\n        If ``check_circular`` is false, then the circular reference check\n        for container types will be skipped and a circular reference will\n        result in an ``OverflowError`` (or worse).\n\n        If ``allow_nan`` is false, then it will be a ``ValueError`` to\n        serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in\n        strict compliance of the JSON specification, instead of using the\n        JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n\n        If ``indent`` is a non-negative integer, then JSON array elements and\n        object members will be pretty-printed with that indent level. An indent\n        level of 0 will only insert newlines. ``None`` is the most compact\n        representation.\n\n        If specified, ``separators`` should be an ``(item_separator, key_separator)``\n        tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n        ``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n        you should specify ``(',', ':')`` to eliminate whitespace.\n\n        ``default(obj)`` is a function that should return a serializable version\n        of obj or raise TypeError. The default simply raises TypeError.\n\n        If *sort_keys* is true (default: ``False``), then the output of\n        dictionaries will be sorted by key.\n\n        To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n        ``.default()`` method to serialize additional types), specify it with\n        the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n\n    load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)\n        Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n        a JSON document) to a Python object.\n\n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n\n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n\n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n\n    loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)\n        Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n\n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n\n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n\n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n\n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n\n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n\n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n\n        The ``encoding`` argument is ignored and deprecated.\n```\n\n# DATA\n\n```py\n__all__ = ['dump', 'dumps', 'load', 'loads', 'JSONDecoder', 'JSONDecod...\n```\n\n# VERSION\n\n2.0.9\n\n# AUTHOR\n\n```\nBob Ippolito <bob@redivi.com>\n```\n\n# FILE\n\n```\npython3\\lib\\json\\__init__.py\n```","source":"assert/resources/json.__doc__.md","raw":"[Origin-File](/assert/repos/python/json.__doc__)\n\n> Help on package json:\n\n# NAME\n    json\n\n# 描述\n\n[JSON(JavaScript Object Notation)](http://json.org) 是用作轻量级数据交换格式的JavaScript语法(ECMA-262第3版)的子集.\n\n`json` 向用户公开了一个类似于标准库模块 `marshal` 和 `pickle` 的 API. 它源自外部维护的 simplejson 库的一个版本.\n\n## 对基本 Python 对象层级结构编码\n\n```python\n>>> import json\n>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n'[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]' \n# json.dumps() 函数返回序列化 json 字符串\n>>> print(json.dumps(\"\\\"foo\\bar\"))\n\"\\\"foo\\bar\"\n>>> print(json.dumps('\\u1234'))\n\"\\u1234\"\n>>> print(json.dumps('\\\\'))\n\"\\\\\"\n>>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n{\"a\": 0, \"b\": 0, \"c\": 0}\n>>> from io import StringIO\n>>> io = StringIO()\n>>> json.dump(['streaming API'], io)\n# json.dump(obj, io) 将 obj 序列化后输出到 io\n>>> io.getvalue()\n'[\"streaming API\"]'\n```\n\n### 紧凑编码\n\n```py\n>>> import json\n>>> mydict = {'4': 5, '6': 7}\n>>> json.dumps([1,2,3,mydict], separators=(',', ':'))\n'[1,2,3,{\"4\":5,\"6\":7}]'\n```\n\n### 漂亮的打印输出\n\n```py\n>>> import json\n>>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))\n{\n    \"4\": 5,\n    \"6\": 7\n}\n```\n\n## 解码 JSON\n\n```py\n>>> import json\n>>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]\n>>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') == obj\nTrue\n>>> json.loads('\"\\\\\"foo\\\\bar\"') == '\"foo\\x08ar'\nTrue\n>>> from io import StringIO\n>>> io = StringIO('[\"streaming API\"]')\n>>> json.load(io)[0] == 'streaming API'\nTrue\n```\n\n### 指定 JSON 对象解码\n\n```py\n>>> import json\n>>> def as_complex(dct):\n...     if '__complex__' in dct:\n...         return complex(dct['real'], dct['imag'])\n...     return dct\n...\n>>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n...     object_hook=as_complex)\n(1+2j)\n>>> from decimal import Decimal\n>>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')\nTrue\n```\n\n### 指定 JSON 对象编码\n\n```py\n>>> import json\n>>> def encode_complex(obj):\n...     if isinstance(obj, complex):\n...         return [obj.real, obj.imag]\n...     raise TypeError(f'Object of type {obj.__class__.__name__} '\n...                     f'is not JSON serializable')\n...\n>>> json.dumps(2 + 1j, default=encode_complex)\n'[2.0, 1.0]'\n>>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n'[2.0, 1.0]'\n>>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n'[2.0, 1.0]'\n```\n\n### 使用shell中的 `json.tool` 来验证和美化打印输出\n\n```sh\n$ echo '{\"json\":\"obj\"}' | python -m json.tool\n{\n    \"json\": \"obj\"\n}\n$ echo '{ 1.2:3.4}' | python -m json.tool\nExpecting property name enclosed in double quotes: line 1 column 3 (char 2)\n```\n\n# 包内容\n\n- `decoder`\n- `encoder`\n- `scanner`\n- `tool`\n\n# CLASS\n\n- `builtins.ValueError(builtins.Exception)`\n    - `json.decoder.JSONDecodeError`\n- `builtins.object`\n    - `json.decoder.JSONDecoder`\n    - `json.encoder.JSONEncoder`\n\n```\n    class JSONDecodeError(builtins.ValueError)\n     |  JSONDecodeError(msg, doc, pos)\n     |\n     |  Subclass of ValueError with the following additional properties:\n     |\n     |  msg: 未格式化的错误信息\n     |  doc: 正在解析的JSON文档\n     |  pos: 解析失败处的 index\n     |  lineno: 对应于 pos 的行\n     |  colno: 对应于 pos 的列\n     |\n     |  方法解析顺序:\n     |      JSONDecodeError\n     |      builtins.ValueError\n     |      builtins.Exception\n     |      builtins.BaseException\n     |      builtins.object\n     |\n     |  这里定义的方法:\n     |\n     |  __init__(self, msg, doc, pos)\n     |      初始化 self.  参阅 help(type(self)) 得到准确的 signature.\n     |\n     |  __reduce__(self)\n     |      Helper for pickle.\n     |\n     |  ----------------------------------------------------------------------\n     |  这里定义的数据描述符:\n     |\n     |  __weakref__\n     |      对象的弱引用列表(如果定义)\n     |\n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from builtins.ValueError:\n     |\n     |  __new__(*args, **kwargs) from builtins.type\n     |      创建并返回一个新对象. 参阅 help(type) 获得准确的 signature.\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from builtins.BaseException:\n     |\n     |  __delattr__(self, name, /)\n     |      执行 delattr(self, name).\n     |\n     |  __getattribute__(self, name, /)\n     |      返回 getattr(self, name).\n     |\n     |  __repr__(self, /)\n     |      返回 repr(self).\n     |\n     |  __setattr__(self, name, value, /)\n     |      执行 setattr(self, name, value).\n     |\n     |  __setstate__(...)\n     |\n     |  __str__(self, /)\n     |      返回 str(self).\n     |\n     |  with_traceback(...)\n     |      Exception.with_traceback(tb) --\n     |      set self.__traceback__ to tb and return self.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from builtins.BaseException:\n     |\n     |  __cause__\n     |      exception cause     例外原因\n     |\n     |  __context__\n     |      exception context   例外内容\n     |\n     |  __dict__\n     |\n     |  __suppress_context__\n     |\n     |  __traceback__\n     |\n     |  args\n\n    class JSONDecoder(builtins.object)\n     |  JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)\n     |\n     |  Simple JSON <http://json.org> decoder\n     |\n     |  解码时默认进行以下转换:\n     |\n     |  +---------------+-------------------+\n     |  | JSON          | Python            |\n     |  +===============+===================+\n     |  | object        | dict              |\n     |  +---------------+-------------------+\n     |  | array         | list              |\n     |  +---------------+-------------------+\n     |  | string        | str               |\n     |  +---------------+-------------------+\n     |  | number (int)  | int               |\n     |  +---------------+-------------------+\n     |  | number (real) | float             |\n     |  +---------------+-------------------+\n     |  | true          | True              |\n     |  +---------------+-------------------+\n     |  | false         | False             |\n     |  +---------------+-------------------+\n     |  | null          | None              |\n     |  +---------------+-------------------+\n     |\n     |  它还将 ``NaN``, ``Infinity`` 和 ``-Infinity`` 理解为对应的浮点数, 这超出\n     |  了 JSON 的规范.\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, *, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)\n     |      ``object_hook``, 如果指定, 将调用每个JSON对象的结果, 并使用其返回值\n     |      代替给定的 ``dict``. 这可用于提供自定义反序列化 (例如, 支持\n     |      JSON-RPC 类提示).\n     |\n     |      ``object_pairs_hook``, 如果指定将被调用, 每个 JSON 对象的结果都使用\n     |      有序的对列表进行解码. 将使用 ``object_paires_hook`` 的返回值, \n     |      而非 ``dict``. 此特性可用于实现自定义解码器. 如果还定义了\n     |      ``object_hook`` , 则 ``object_hook`` 优先.\n     |\n     |      ``parse_float``, 如果指定, 将使用要解码的每个 JSON float 的字符串调用. \n     |      默认情况下, 这相当于 float(num_str). 这可用于为 JSON 浮点数使用另一\n     |      种数据类型或解析器(例如 decimal.Decimal).\n     |\n     |      ``parse_int``, 如果指定, 将使用要解码的每个 JSON int 的字符串调用. \n     |      默认情况下, 这相当于 int(num_str). 这可用于为 JSON 浮点数使用另一种\n     |      数据类型或解析器(例如 float).\n     |\n     |      ``parse_constant``, if specified, will be called with one of the\n     |      following strings: -Infinity, Infinity, NaN.\n     |      This can be used to raise an exception if invalid JSON numbers\n     |      are encountered.\n     |\n     |      If ``strict`` is false (true is the default), then control\n     |      characters will be allowed inside strings.  Control characters in\n     |      this context are those with character codes in the 0-31 range,\n     |      including ``'\\t'`` (tab), ``'\\n'``, ``'\\r'`` and ``'\\0'``.\n     |\n     |  decode(self, s, _w=<built-in method match of re.Pattern object at 0x00000175F1020F30>)\n     |      Return the Python representation of ``s`` (a ``str`` instance\n     |      containing a JSON document).\n     |\n     |  raw_decode(self, s, idx=0)\n     |      Decode a JSON document from ``s`` (a ``str`` beginning with\n     |      a JSON document) and return a 2-tuple of the Python\n     |      representation and the index in ``s`` where the document ended.\n     |\n     |      This can be used to decode a JSON document from a string that may\n     |      have extraneous data at the end.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class JSONEncoder(builtins.object)\n     |  JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)\n     |\n     |  Extensible JSON <http://json.org> encoder for Python data structures.\n     |\n     |  Supports the following objects and types by default:\n     |\n     |  +-------------------+---------------+\n     |  | Python            | JSON          |\n     |  +===================+===============+\n     |  | dict              | object        |\n     |  +-------------------+---------------+\n     |  | list, tuple       | array         |\n     |  +-------------------+---------------+\n     |  | str               | string        |\n     |  +-------------------+---------------+\n     |  | int, float        | number        |\n     |  +-------------------+---------------+\n     |  | True              | true          |\n     |  +-------------------+---------------+\n     |  | False             | false         |\n     |  +-------------------+---------------+\n     |  | None              | null          |\n     |  +-------------------+---------------+\n     |\n     |  To extend this to recognize other objects, subclass and implement a\n     |  ``.default()`` method with another method that returns a serializable\n     |  object for ``o`` if possible, otherwise it should call the superclass\n     |  implementation (to raise ``TypeError``).\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)\n     |      Constructor for JSONEncoder, with sensible defaults.\n     |\n     |      If skipkeys is false, then it is a TypeError to attempt\n     |      encoding of keys that are not str, int, float or None.  If\n     |      skipkeys is True, such items are simply skipped.\n     |\n     |      If ensure_ascii is true, the output is guaranteed to be str\n     |      objects with all incoming non-ASCII characters escaped.  If\n     |      ensure_ascii is false, the output can contain non-ASCII characters.\n     |\n     |      If check_circular is true, then lists, dicts, and custom encoded\n     |      objects will be checked for circular references during encoding to\n     |      prevent an infinite recursion (which would cause an OverflowError).\n     |      Otherwise, no such check takes place.\n     |\n     |      If allow_nan is true, then NaN, Infinity, and -Infinity will be\n     |      encoded as such.  This behavior is not JSON specification compliant,\n     |      but is consistent with most JavaScript based encoders and decoders.\n     |      Otherwise, it will be a ValueError to encode such floats.\n     |\n     |      If sort_keys is true, then the output of dictionaries will be\n     |      sorted by key; this is useful for regression tests to ensure\n     |      that JSON serializations can be compared on a day-to-day basis.\n     |\n     |      If indent is a non-negative integer, then JSON array\n     |      elements and object members will be pretty-printed with that\n     |      indent level.  An indent level of 0 will only insert newlines.\n     |      None is the most compact representation.\n     |\n     |      If specified, separators should be an (item_separator, key_separator)\n     |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and\n     |      (',', ': ') otherwise.  To get the most compact JSON representation,\n     |      you should specify (',', ':') to eliminate whitespace.\n     |\n     |      If specified, default is a function that gets called for objects\n     |      that can't otherwise be serialized.  It should return a JSON encodable\n     |      version of the object or raise a ``TypeError``.\n     |\n     |  default(self, o)\n     |      Implement this method in a subclass such that it returns\n     |      a serializable object for ``o``, or calls the base implementation\n     |      (to raise a ``TypeError``).\n     |\n     |      For example, to support arbitrary iterators, you could\n     |      implement default like this::\n     |\n     |          def default(self, o):\n     |              try:\n     |                  iterable = iter(o)\n     |              except TypeError:\n     |                  pass\n     |              else:\n     |                  return list(iterable)\n     |              # Let the base class default method raise the TypeError\n     |              return JSONEncoder.default(self, o)\n     |\n     |  encode(self, o)\n     |      Return a JSON string representation of a Python data structure.\n     |\n     |      >>> from json.encoder import JSONEncoder\n     |      >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n     |      '{\"foo\": [\"bar\", \"baz\"]}'\n     |\n     |  iterencode(self, o, _one_shot=False)\n     |      Encode the given object and yield each string\n     |      representation as available.\n     |\n     |      For example::\n     |\n     |          for chunk in JSONEncoder().iterencode(bigobject):\n     |              mysocket.write(chunk)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  item_separator = ', '\n     |\n     |  key_separator = ': '\n```\n\n# FUNCTIONS\n\n```py\n    dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\n        Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n        ``.write()``-supporting file-like object).\n\n        If ``skipkeys`` is true then ``dict`` keys that are not basic types\n        (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n        instead of raising a ``TypeError``.\n\n        If ``ensure_ascii`` is false, then the strings written to ``fp`` can\n        contain non-ASCII characters if they appear in strings contained in\n        ``obj``. Otherwise, all such characters are escaped in JSON strings.\n\n        If ``check_circular`` is false, then the circular reference check\n        for container types will be skipped and a circular reference will\n        result in an ``OverflowError`` (or worse).\n\n        If ``allow_nan`` is false, then it will be a ``ValueError`` to\n        serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)\n        in strict compliance of the JSON specification, instead of using the\n        JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n\n        If ``indent`` is a non-negative integer, then JSON array elements and\n        object members will be pretty-printed with that indent level. An indent\n        level of 0 will only insert newlines. ``None`` is the most compact\n        representation.\n\n        If specified, ``separators`` should be an ``(item_separator, key_separator)``\n        tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n        ``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n        you should specify ``(',', ':')`` to eliminate whitespace.\n\n        ``default(obj)`` is a function that should return a serializable version\n        of obj or raise TypeError. The default simply raises TypeError.\n\n        If *sort_keys* is true (default: ``False``), then the output of\n        dictionaries will be sorted by key.\n\n        To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n        ``.default()`` method to serialize additional types), specify it with\n        the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n\n    dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\n        Serialize ``obj`` to a JSON formatted ``str``.\n\n        If ``skipkeys`` is true then ``dict`` keys that are not basic types\n        (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n        instead of raising a ``TypeError``.\n\n        If ``ensure_ascii`` is false, then the return value can contain non-ASCII\n        characters if they appear in strings contained in ``obj``. Otherwise, all\n        such characters are escaped in JSON strings.\n\n        If ``check_circular`` is false, then the circular reference check\n        for container types will be skipped and a circular reference will\n        result in an ``OverflowError`` (or worse).\n\n        If ``allow_nan`` is false, then it will be a ``ValueError`` to\n        serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in\n        strict compliance of the JSON specification, instead of using the\n        JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n\n        If ``indent`` is a non-negative integer, then JSON array elements and\n        object members will be pretty-printed with that indent level. An indent\n        level of 0 will only insert newlines. ``None`` is the most compact\n        representation.\n\n        If specified, ``separators`` should be an ``(item_separator, key_separator)``\n        tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n        ``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n        you should specify ``(',', ':')`` to eliminate whitespace.\n\n        ``default(obj)`` is a function that should return a serializable version\n        of obj or raise TypeError. The default simply raises TypeError.\n\n        If *sort_keys* is true (default: ``False``), then the output of\n        dictionaries will be sorted by key.\n\n        To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n        ``.default()`` method to serialize additional types), specify it with\n        the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n\n    load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)\n        Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n        a JSON document) to a Python object.\n\n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n\n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n\n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n\n    loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)\n        Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n\n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n\n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n\n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n\n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n\n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n\n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n\n        The ``encoding`` argument is ignored and deprecated.\n```\n\n# DATA\n\n```py\n__all__ = ['dump', 'dumps', 'load', 'loads', 'JSONDecoder', 'JSONDecod...\n```\n\n# VERSION\n\n2.0.9\n\n# AUTHOR\n\n```\nBob Ippolito <bob@redivi.com>\n```\n\n# FILE\n\n```\npython3\\lib\\json\\__init__.py\n```","date":"2018-08-23T07:55:08.606Z","updated":"2018-08-20T03:02:46.000Z","path":"assert/resources/json.__doc__.html","title":"","comments":1,"layout":"page","_id":"cjl8vtwg70040w8lkdwdhy1ri","content":"<p><a href=\"/assert/repos/python/json.__doc__\">Origin-File</a></p>\r\n<blockquote>\r\n<p>Help on package json:</p>\r\n</blockquote>\r\n<h1 id=\"name\">NAME</h1>\r\n<pre><code>json</code></pre>\r\n<h1 id=\"描述\">描述</h1>\r\n<p><a href=\"http://json.org\" target=\"_blank\" rel=\"noopener\">JSON(JavaScript Object Notation)</a> 是用作轻量级数据交换格式的JavaScript语法(ECMA-262第3版)的子集.</p>\r\n<p><code>json</code> 向用户公开了一个类似于标准库模块 <code>marshal</code> 和 <code>pickle</code> 的 API. 它源自外部维护的 simplejson 库的一个版本.</p>\r\n<h2 id=\"对基本-python-对象层级结构编码\">对基本 Python 对象层级结构编码</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps([<span class=\"string\">'foo'</span>, &#123;<span class=\"string\">'bar'</span>: (<span class=\"string\">'baz'</span>, <span class=\"keyword\">None</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2</span>)&#125;])</span><br><span class=\"line\"><span class=\"string\">'[\"foo\", &#123;\"bar\": [\"baz\", null, 1.0, 2]&#125;]'</span> </span><br><span class=\"line\"><span class=\"comment\"># json.dumps() 函数返回序列化 json 字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(<span class=\"string\">\"\\\"foo\\bar\"</span>))</span><br><span class=\"line\"><span class=\"string\">\"\\\"foo\\bar\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(<span class=\"string\">'\\u1234'</span>))</span><br><span class=\"line\"><span class=\"string\">\"\\u1234\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(<span class=\"string\">'\\\\'</span>))</span><br><span class=\"line\"><span class=\"string\">\"\\\\\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class=\"string\">\"c\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"a\"</span>: <span class=\"number\">0</span>&#125;, sort_keys=<span class=\"keyword\">True</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">\"a\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"c\"</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io = StringIO()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dump([<span class=\"string\">'streaming API'</span>], io)</span><br><span class=\"line\"><span class=\"comment\"># json.dump(obj, io) 将 obj 序列化后输出到 io</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io.getvalue()</span><br><span class=\"line\"><span class=\"string\">'[\"streaming API\"]'</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"紧凑编码\">紧凑编码</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mydict = &#123;<span class=\"string\">'4'</span>: <span class=\"number\">5</span>, <span class=\"string\">'6'</span>: <span class=\"number\">7</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,mydict], separators=(<span class=\"string\">','</span>, <span class=\"string\">':'</span>))</span><br><span class=\"line\"><span class=\"string\">'[1,2,3,&#123;\"4\":5,\"6\":7&#125;]'</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"漂亮的打印输出\">漂亮的打印输出</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class=\"string\">'4'</span>: <span class=\"number\">5</span>, <span class=\"string\">'6'</span>: <span class=\"number\">7</span>&#125;, sort_keys=<span class=\"keyword\">True</span>, indent=<span class=\"number\">4</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"4\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"string\">\"6\"</span>: <span class=\"number\">7</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"解码-json\">解码 JSON</h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj = [<span class=\"string\">'foo'</span>, &#123;<span class=\"string\">'bar'</span>: [<span class=\"string\">'baz'</span>, <span class=\"keyword\">None</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2</span>]&#125;]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'[\"foo\", &#123;\"bar\":[\"baz\", null, 1.0, 2]&#125;]'</span>) == obj</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'\"\\\\\"foo\\\\bar\"'</span>) == <span class=\"string\">'\"foo\\x08ar'</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io = StringIO(<span class=\"string\">'[\"streaming API\"]'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.load(io)[<span class=\"number\">0</span>] == <span class=\"string\">'streaming API'</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指定-json-对象解码\">指定 JSON 对象解码</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">as_complex</span><span class=\"params\">(dct)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">if</span> <span class=\"string\">'__complex__'</span> <span class=\"keyword\">in</span> dct:</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> complex(dct[<span class=\"string\">'real'</span>], dct[<span class=\"string\">'imag'</span>])</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> dct</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'&#123;\"__complex__\": true, \"real\": 1, \"imag\": 2&#125;'</span>,</span><br><span class=\"line\"><span class=\"meta\">... </span>    object_hook=as_complex)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> decimal <span class=\"keyword\">import</span> Decimal</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'1.1'</span>, parse_float=Decimal) == Decimal(<span class=\"string\">'1.1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指定-json-对象编码\">指定 JSON 对象编码</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encode_complex</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">if</span> isinstance(obj, complex):</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> [obj.real, obj.imag]</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">f'Object of type <span class=\"subst\">&#123;obj.__class__.__name__&#125;</span> '</span></span><br><span class=\"line\"><span class=\"meta\">... </span>                    <span class=\"string\">f'is not JSON serializable'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps(<span class=\"number\">2</span> + <span class=\"number\">1j</span>, default=encode_complex)</span><br><span class=\"line\"><span class=\"string\">'[2.0, 1.0]'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.JSONEncoder(default=encode_complex).encode(<span class=\"number\">2</span> + <span class=\"number\">1j</span>)</span><br><span class=\"line\"><span class=\"string\">'[2.0, 1.0]'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span>.join(json.JSONEncoder(default=encode_complex).iterencode(<span class=\"number\">2</span> + <span class=\"number\">1j</span>))</span><br><span class=\"line\"><span class=\"string\">'[2.0, 1.0]'</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"使用shell中的-json.tool-来验证和美化打印输出\">使用shell中的 <code>json.tool</code> 来验证和美化打印输出</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'&#123;\"json\":\"obj\"&#125;'</span> | python -m json.tool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"json\"</span>: <span class=\"string\">\"obj\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'&#123; 1.2:3.4&#125;'</span> | python -m json.tool</span><br><span class=\"line\">Expecting property name enclosed <span class=\"keyword\">in</span> double quotes: line 1 column 3 (char 2)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"包内容\">包内容</h1>\r\n<ul>\r\n<li><code>decoder</code></li>\r\n<li><code>encoder</code></li>\r\n<li><code>scanner</code></li>\r\n<li><code>tool</code></li>\r\n</ul>\r\n<h1 id=\"class\">CLASS</h1>\r\n<ul>\r\n<li><code>builtins.ValueError(builtins.Exception)</code>\r\n<ul>\r\n<li><code>json.decoder.JSONDecodeError</code></li>\r\n</ul></li>\r\n<li><code>builtins.object</code>\r\n<ul>\r\n<li><code>json.decoder.JSONDecoder</code></li>\r\n<li><code>json.encoder.JSONEncoder</code></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JSONDecodeError(builtins.ValueError)</span><br><span class=\"line\"> |  JSONDecodeError(msg, doc, pos)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Subclass of ValueError with the following additional properties:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  msg: 未格式化的错误信息</span><br><span class=\"line\"> |  doc: 正在解析的JSON文档</span><br><span class=\"line\"> |  pos: 解析失败处的 index</span><br><span class=\"line\"> |  lineno: 对应于 pos 的行</span><br><span class=\"line\"> |  colno: 对应于 pos 的列</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  方法解析顺序:</span><br><span class=\"line\"> |      JSONDecodeError</span><br><span class=\"line\"> |      builtins.ValueError</span><br><span class=\"line\"> |      builtins.Exception</span><br><span class=\"line\"> |      builtins.BaseException</span><br><span class=\"line\"> |      builtins.object</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  这里定义的方法:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __init__(self, msg, doc, pos)</span><br><span class=\"line\"> |      初始化 self.  参阅 help(type(self)) 得到准确的 signature.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __reduce__(self)</span><br><span class=\"line\"> |      Helper for pickle.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  这里定义的数据描述符:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __weakref__</span><br><span class=\"line\"> |      对象的弱引用列表(如果定义)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Static methods inherited from builtins.ValueError:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __new__(*args, **kwargs) from builtins.type</span><br><span class=\"line\"> |      创建并返回一个新对象. 参阅 help(type) 获得准确的 signature.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Methods inherited from builtins.BaseException:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __delattr__(self, name, /)</span><br><span class=\"line\"> |      执行 delattr(self, name).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __getattribute__(self, name, /)</span><br><span class=\"line\"> |      返回 getattr(self, name).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __repr__(self, /)</span><br><span class=\"line\"> |      返回 repr(self).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __setattr__(self, name, value, /)</span><br><span class=\"line\"> |      执行 setattr(self, name, value).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __setstate__(...)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __str__(self, /)</span><br><span class=\"line\"> |      返回 str(self).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  with_traceback(...)</span><br><span class=\"line\"> |      Exception.with_traceback(tb) --</span><br><span class=\"line\"> |      set self.__traceback__ to tb and return self.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors inherited from builtins.BaseException:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __cause__</span><br><span class=\"line\"> |      exception cause     例外原因</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __context__</span><br><span class=\"line\"> |      exception context   例外内容</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __dict__</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __suppress_context__</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __traceback__</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  args</span><br><span class=\"line\"></span><br><span class=\"line\">class JSONDecoder(builtins.object)</span><br><span class=\"line\"> |  JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Simple JSON &lt;http://json.org&gt; decoder</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  解码时默认进行以下转换:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | JSON          | Python            |</span><br><span class=\"line\"> |  +===============+===================+</span><br><span class=\"line\"> |  | object        | dict              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | array         | list              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | string        | str               |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | number (int)  | int               |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | number (real) | float             |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | true          | True              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | false         | False             |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | null          | None              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  它还将 ``NaN``, ``Infinity`` 和 ``-Infinity`` 理解为对应的浮点数, 这超出</span><br><span class=\"line\"> |  了 JSON 的规范.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Methods defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __init__(self, *, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)</span><br><span class=\"line\"> |      ``object_hook``, 如果指定, 将调用每个JSON对象的结果, 并使用其返回值</span><br><span class=\"line\"> |      代替给定的 ``dict``. 这可用于提供自定义反序列化 (例如, 支持</span><br><span class=\"line\"> |      JSON-RPC 类提示).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``object_pairs_hook``, 如果指定将被调用, 每个 JSON 对象的结果都使用</span><br><span class=\"line\"> |      有序的对列表进行解码. 将使用 ``object_paires_hook`` 的返回值, </span><br><span class=\"line\"> |      而非 ``dict``. 此特性可用于实现自定义解码器. 如果还定义了</span><br><span class=\"line\"> |      ``object_hook`` , 则 ``object_hook`` 优先.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``parse_float``, 如果指定, 将使用要解码的每个 JSON float 的字符串调用. </span><br><span class=\"line\"> |      默认情况下, 这相当于 float(num_str). 这可用于为 JSON 浮点数使用另一</span><br><span class=\"line\"> |      种数据类型或解析器(例如 decimal.Decimal).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``parse_int``, 如果指定, 将使用要解码的每个 JSON int 的字符串调用. </span><br><span class=\"line\"> |      默认情况下, 这相当于 int(num_str). 这可用于为 JSON 浮点数使用另一种</span><br><span class=\"line\"> |      数据类型或解析器(例如 float).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``parse_constant``, if specified, will be called with one of the</span><br><span class=\"line\"> |      following strings: -Infinity, Infinity, NaN.</span><br><span class=\"line\"> |      This can be used to raise an exception if invalid JSON numbers</span><br><span class=\"line\"> |      are encountered.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If ``strict`` is false (true is the default), then control</span><br><span class=\"line\"> |      characters will be allowed inside strings.  Control characters in</span><br><span class=\"line\"> |      this context are those with character codes in the 0-31 range,</span><br><span class=\"line\"> |      including ``&apos;\\t&apos;`` (tab), ``&apos;\\n&apos;``, ``&apos;\\r&apos;`` and ``&apos;\\0&apos;``.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  decode(self, s, _w=&lt;built-in method match of re.Pattern object at 0x00000175F1020F30&gt;)</span><br><span class=\"line\"> |      Return the Python representation of ``s`` (a ``str`` instance</span><br><span class=\"line\"> |      containing a JSON document).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  raw_decode(self, s, idx=0)</span><br><span class=\"line\"> |      Decode a JSON document from ``s`` (a ``str`` beginning with</span><br><span class=\"line\"> |      a JSON document) and return a 2-tuple of the Python</span><br><span class=\"line\"> |      representation and the index in ``s`` where the document ended.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      This can be used to decode a JSON document from a string that may</span><br><span class=\"line\"> |      have extraneous data at the end.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __dict__</span><br><span class=\"line\"> |      dictionary for instance variables (if defined)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __weakref__</span><br><span class=\"line\"> |      list of weak references to the object (if defined)</span><br><span class=\"line\"></span><br><span class=\"line\">class JSONEncoder(builtins.object)</span><br><span class=\"line\"> |  JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Extensible JSON &lt;http://json.org&gt; encoder for Python data structures.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Supports the following objects and types by default:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | Python            | JSON          |</span><br><span class=\"line\"> |  +===================+===============+</span><br><span class=\"line\"> |  | dict              | object        |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | list, tuple       | array         |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | str               | string        |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | int, float        | number        |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | True              | true          |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | False             | false         |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | None              | null          |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  To extend this to recognize other objects, subclass and implement a</span><br><span class=\"line\"> |  ``.default()`` method with another method that returns a serializable</span><br><span class=\"line\"> |  object for ``o`` if possible, otherwise it should call the superclass</span><br><span class=\"line\"> |  implementation (to raise ``TypeError``).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Methods defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __init__(self, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)</span><br><span class=\"line\"> |      Constructor for JSONEncoder, with sensible defaults.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If skipkeys is false, then it is a TypeError to attempt</span><br><span class=\"line\"> |      encoding of keys that are not str, int, float or None.  If</span><br><span class=\"line\"> |      skipkeys is True, such items are simply skipped.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If ensure_ascii is true, the output is guaranteed to be str</span><br><span class=\"line\"> |      objects with all incoming non-ASCII characters escaped.  If</span><br><span class=\"line\"> |      ensure_ascii is false, the output can contain non-ASCII characters.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If check_circular is true, then lists, dicts, and custom encoded</span><br><span class=\"line\"> |      objects will be checked for circular references during encoding to</span><br><span class=\"line\"> |      prevent an infinite recursion (which would cause an OverflowError).</span><br><span class=\"line\"> |      Otherwise, no such check takes place.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If allow_nan is true, then NaN, Infinity, and -Infinity will be</span><br><span class=\"line\"> |      encoded as such.  This behavior is not JSON specification compliant,</span><br><span class=\"line\"> |      but is consistent with most JavaScript based encoders and decoders.</span><br><span class=\"line\"> |      Otherwise, it will be a ValueError to encode such floats.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If sort_keys is true, then the output of dictionaries will be</span><br><span class=\"line\"> |      sorted by key; this is useful for regression tests to ensure</span><br><span class=\"line\"> |      that JSON serializations can be compared on a day-to-day basis.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If indent is a non-negative integer, then JSON array</span><br><span class=\"line\"> |      elements and object members will be pretty-printed with that</span><br><span class=\"line\"> |      indent level.  An indent level of 0 will only insert newlines.</span><br><span class=\"line\"> |      None is the most compact representation.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If specified, separators should be an (item_separator, key_separator)</span><br><span class=\"line\"> |      tuple.  The default is (&apos;, &apos;, &apos;: &apos;) if *indent* is ``None`` and</span><br><span class=\"line\"> |      (&apos;,&apos;, &apos;: &apos;) otherwise.  To get the most compact JSON representation,</span><br><span class=\"line\"> |      you should specify (&apos;,&apos;, &apos;:&apos;) to eliminate whitespace.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If specified, default is a function that gets called for objects</span><br><span class=\"line\"> |      that can&apos;t otherwise be serialized.  It should return a JSON encodable</span><br><span class=\"line\"> |      version of the object or raise a ``TypeError``.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  default(self, o)</span><br><span class=\"line\"> |      Implement this method in a subclass such that it returns</span><br><span class=\"line\"> |      a serializable object for ``o``, or calls the base implementation</span><br><span class=\"line\"> |      (to raise a ``TypeError``).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      For example, to support arbitrary iterators, you could</span><br><span class=\"line\"> |      implement default like this::</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |          def default(self, o):</span><br><span class=\"line\"> |              try:</span><br><span class=\"line\"> |                  iterable = iter(o)</span><br><span class=\"line\"> |              except TypeError:</span><br><span class=\"line\"> |                  pass</span><br><span class=\"line\"> |              else:</span><br><span class=\"line\"> |                  return list(iterable)</span><br><span class=\"line\"> |              # Let the base class default method raise the TypeError</span><br><span class=\"line\"> |              return JSONEncoder.default(self, o)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  encode(self, o)</span><br><span class=\"line\"> |      Return a JSON string representation of a Python data structure.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      &gt;&gt;&gt; from json.encoder import JSONEncoder</span><br><span class=\"line\"> |      &gt;&gt;&gt; JSONEncoder().encode(&#123;&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]&#125;)</span><br><span class=\"line\"> |      &apos;&#123;&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]&#125;&apos;</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  iterencode(self, o, _one_shot=False)</span><br><span class=\"line\"> |      Encode the given object and yield each string</span><br><span class=\"line\"> |      representation as available.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      For example::</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |          for chunk in JSONEncoder().iterencode(bigobject):</span><br><span class=\"line\"> |              mysocket.write(chunk)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __dict__</span><br><span class=\"line\"> |      dictionary for instance variables (if defined)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __weakref__</span><br><span class=\"line\"> |      list of weak references to the object (if defined)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data and other attributes defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  item_separator = &apos;, &apos;</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  key_separator = &apos;: &apos;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"functions\">FUNCTIONS</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump(obj, fp, *, skipkeys=<span class=\"keyword\">False</span>, ensure_ascii=<span class=\"keyword\">True</span>, check_circular=<span class=\"keyword\">True</span>, allow_nan=<span class=\"keyword\">True</span>, cls=<span class=\"keyword\">None</span>, indent=<span class=\"keyword\">None</span>, separators=<span class=\"keyword\">None</span>, default=<span class=\"keyword\">None</span>, sort_keys=<span class=\"keyword\">False</span>, **kw)</span><br><span class=\"line\">    Serialize ``obj`` <span class=\"keyword\">as</span> a JSON formatted stream to ``fp`` (a</span><br><span class=\"line\">    ``.write()``-supporting file-like object).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``skipkeys`` <span class=\"keyword\">is</span> true then ``dict`` keys that are <span class=\"keyword\">not</span> basic types</span><br><span class=\"line\">    (``str``, ``int``, ``float``, ``bool``, ``<span class=\"keyword\">None</span>``) will be skipped</span><br><span class=\"line\">    instead of raising a ``TypeError``.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``ensure_ascii`` <span class=\"keyword\">is</span> false, then the strings written to ``fp`` can</span><br><span class=\"line\">    contain non-ASCII characters <span class=\"keyword\">if</span> they appear <span class=\"keyword\">in</span> strings contained <span class=\"keyword\">in</span></span><br><span class=\"line\">    ``obj``. Otherwise, all such characters are escaped <span class=\"keyword\">in</span> JSON strings.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``check_circular`` <span class=\"keyword\">is</span> false, then the circular reference check</span><br><span class=\"line\">    <span class=\"keyword\">for</span> container types will be skipped <span class=\"keyword\">and</span> a circular reference will</span><br><span class=\"line\">    result <span class=\"keyword\">in</span> an ``OverflowError`` (<span class=\"keyword\">or</span> worse).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``allow_nan`` <span class=\"keyword\">is</span> false, then it will be a ``ValueError`` to</span><br><span class=\"line\">    serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)</span><br><span class=\"line\">    <span class=\"keyword\">in</span> strict compliance of the JSON specification, instead of using the</span><br><span class=\"line\">    JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``indent`` <span class=\"keyword\">is</span> a non-negative integer, then JSON array elements <span class=\"keyword\">and</span></span><br><span class=\"line\">    object members will be pretty-printed <span class=\"keyword\">with</span> that indent level. An indent</span><br><span class=\"line\">    level of <span class=\"number\">0</span> will only insert newlines. ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">is</span> the most compact</span><br><span class=\"line\">    representation.</span><br><span class=\"line\"></span><br><span class=\"line\">    If specified, ``separators`` should be an ``(item_separator, key_separator)``</span><br><span class=\"line\">    tuple.  The default <span class=\"keyword\">is</span> ``(<span class=\"string\">', '</span>, <span class=\"string\">': '</span>)`` <span class=\"keyword\">if</span> *indent* <span class=\"keyword\">is</span> ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">and</span></span><br><span class=\"line\">    ``(<span class=\"string\">','</span>, <span class=\"string\">': '</span>)`` otherwise.  To get the most compact JSON representation,</span><br><span class=\"line\">    you should specify ``(<span class=\"string\">','</span>, <span class=\"string\">':'</span>)`` to eliminate whitespace.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``default(obj)`` <span class=\"keyword\">is</span> a function that should <span class=\"keyword\">return</span> a serializable version</span><br><span class=\"line\">    of obj <span class=\"keyword\">or</span> <span class=\"keyword\">raise</span> TypeError. The default simply raises TypeError.</span><br><span class=\"line\"></span><br><span class=\"line\">    If *sort_keys* <span class=\"keyword\">is</span> true (default: ``<span class=\"keyword\">False</span>``), then the output of</span><br><span class=\"line\">    dictionaries will be sorted by key.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the</span><br><span class=\"line\">    ``.default()`` method to serialize additional types), specify it <span class=\"keyword\">with</span></span><br><span class=\"line\">    the ``cls`` kwarg; otherwise ``JSONEncoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">dumps(obj, *, skipkeys=<span class=\"keyword\">False</span>, ensure_ascii=<span class=\"keyword\">True</span>, check_circular=<span class=\"keyword\">True</span>, allow_nan=<span class=\"keyword\">True</span>, cls=<span class=\"keyword\">None</span>, indent=<span class=\"keyword\">None</span>, separators=<span class=\"keyword\">None</span>, default=<span class=\"keyword\">None</span>, sort_keys=<span class=\"keyword\">False</span>, **kw)</span><br><span class=\"line\">    Serialize ``obj`` to a JSON formatted ``str``.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``skipkeys`` <span class=\"keyword\">is</span> true then ``dict`` keys that are <span class=\"keyword\">not</span> basic types</span><br><span class=\"line\">    (``str``, ``int``, ``float``, ``bool``, ``<span class=\"keyword\">None</span>``) will be skipped</span><br><span class=\"line\">    instead of raising a ``TypeError``.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``ensure_ascii`` <span class=\"keyword\">is</span> false, then the <span class=\"keyword\">return</span> value can contain non-ASCII</span><br><span class=\"line\">    characters <span class=\"keyword\">if</span> they appear <span class=\"keyword\">in</span> strings contained <span class=\"keyword\">in</span> ``obj``. Otherwise, all</span><br><span class=\"line\">    such characters are escaped <span class=\"keyword\">in</span> JSON strings.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``check_circular`` <span class=\"keyword\">is</span> false, then the circular reference check</span><br><span class=\"line\">    <span class=\"keyword\">for</span> container types will be skipped <span class=\"keyword\">and</span> a circular reference will</span><br><span class=\"line\">    result <span class=\"keyword\">in</span> an ``OverflowError`` (<span class=\"keyword\">or</span> worse).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``allow_nan`` <span class=\"keyword\">is</span> false, then it will be a ``ValueError`` to</span><br><span class=\"line\">    serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) <span class=\"keyword\">in</span></span><br><span class=\"line\">    strict compliance of the JSON specification, instead of using the</span><br><span class=\"line\">    JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``indent`` <span class=\"keyword\">is</span> a non-negative integer, then JSON array elements <span class=\"keyword\">and</span></span><br><span class=\"line\">    object members will be pretty-printed <span class=\"keyword\">with</span> that indent level. An indent</span><br><span class=\"line\">    level of <span class=\"number\">0</span> will only insert newlines. ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">is</span> the most compact</span><br><span class=\"line\">    representation.</span><br><span class=\"line\"></span><br><span class=\"line\">    If specified, ``separators`` should be an ``(item_separator, key_separator)``</span><br><span class=\"line\">    tuple.  The default <span class=\"keyword\">is</span> ``(<span class=\"string\">', '</span>, <span class=\"string\">': '</span>)`` <span class=\"keyword\">if</span> *indent* <span class=\"keyword\">is</span> ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">and</span></span><br><span class=\"line\">    ``(<span class=\"string\">','</span>, <span class=\"string\">': '</span>)`` otherwise.  To get the most compact JSON representation,</span><br><span class=\"line\">    you should specify ``(<span class=\"string\">','</span>, <span class=\"string\">':'</span>)`` to eliminate whitespace.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``default(obj)`` <span class=\"keyword\">is</span> a function that should <span class=\"keyword\">return</span> a serializable version</span><br><span class=\"line\">    of obj <span class=\"keyword\">or</span> <span class=\"keyword\">raise</span> TypeError. The default simply raises TypeError.</span><br><span class=\"line\"></span><br><span class=\"line\">    If *sort_keys* <span class=\"keyword\">is</span> true (default: ``<span class=\"keyword\">False</span>``), then the output of</span><br><span class=\"line\">    dictionaries will be sorted by key.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the</span><br><span class=\"line\">    ``.default()`` method to serialize additional types), specify it <span class=\"keyword\">with</span></span><br><span class=\"line\">    the ``cls`` kwarg; otherwise ``JSONEncoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">load(fp, *, cls=<span class=\"keyword\">None</span>, object_hook=<span class=\"keyword\">None</span>, parse_float=<span class=\"keyword\">None</span>, parse_int=<span class=\"keyword\">None</span>, parse_constant=<span class=\"keyword\">None</span>, object_pairs_hook=<span class=\"keyword\">None</span>, **kw)</span><br><span class=\"line\">    Deserialize ``fp`` (a ``.read()``-supporting file-like object containing</span><br><span class=\"line\">    a JSON document) to a Python object.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``object_hook`` <span class=\"keyword\">is</span> an optional function that will be called <span class=\"keyword\">with</span> the</span><br><span class=\"line\">    result of any object literal decode (a ``dict``). The <span class=\"keyword\">return</span> value of</span><br><span class=\"line\">    ``object_hook`` will be used instead of the ``dict``. This feature</span><br><span class=\"line\">    can be used to implement custom decoders (e.g. JSON-RPC <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hinting</span>).</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">is</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">function</span> <span class=\"title\">that</span> <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">called</span> <span class=\"title\">with</span> <span class=\"title\">the</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">result</span> <span class=\"title\">of</span> <span class=\"title\">any</span> <span class=\"title\">object</span> <span class=\"title\">literal</span> <span class=\"title\">decoded</span> <span class=\"title\">with</span> <span class=\"title\">an</span> <span class=\"title\">ordered</span> <span class=\"title\">list</span> <span class=\"title\">of</span> <span class=\"title\">pairs</span>.  <span class=\"title\">The</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">return</span> <span class=\"title\">value</span> <span class=\"title\">of</span> ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">instead</span> <span class=\"title\">of</span> <span class=\"title\">the</span> ``<span class=\"title\">dict</span>``.</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">This</span> <span class=\"title\">feature</span> <span class=\"title\">can</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">to</span> <span class=\"title\">implement</span> <span class=\"title\">custom</span> <span class=\"title\">decoders</span>.  <span class=\"title\">If</span> ``<span class=\"title\">object_hook</span>``</span></span><br><span class=\"line\">    is also defined, the ``object_pairs_hook`` takes priority.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONDecoder`` subclass, specify it <span class=\"keyword\">with</span> the ``cls``</span><br><span class=\"line\">    kwarg; otherwise ``JSONDecoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">loads(s, *, encoding=<span class=\"keyword\">None</span>, cls=<span class=\"keyword\">None</span>, object_hook=<span class=\"keyword\">None</span>, parse_float=<span class=\"keyword\">None</span>, parse_int=<span class=\"keyword\">None</span>, parse_constant=<span class=\"keyword\">None</span>, object_pairs_hook=<span class=\"keyword\">None</span>, **kw)</span><br><span class=\"line\">    Deserialize ``s`` (a ``str``, ``bytes`` <span class=\"keyword\">or</span> ``bytearray`` instance</span><br><span class=\"line\">    containing a JSON document) to a Python object.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``object_hook`` <span class=\"keyword\">is</span> an optional function that will be called <span class=\"keyword\">with</span> the</span><br><span class=\"line\">    result of any object literal decode (a ``dict``). The <span class=\"keyword\">return</span> value of</span><br><span class=\"line\">    ``object_hook`` will be used instead of the ``dict``. This feature</span><br><span class=\"line\">    can be used to implement custom decoders (e.g. JSON-RPC <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hinting</span>).</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">is</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">function</span> <span class=\"title\">that</span> <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">called</span> <span class=\"title\">with</span> <span class=\"title\">the</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">result</span> <span class=\"title\">of</span> <span class=\"title\">any</span> <span class=\"title\">object</span> <span class=\"title\">literal</span> <span class=\"title\">decoded</span> <span class=\"title\">with</span> <span class=\"title\">an</span> <span class=\"title\">ordered</span> <span class=\"title\">list</span> <span class=\"title\">of</span> <span class=\"title\">pairs</span>.  <span class=\"title\">The</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">return</span> <span class=\"title\">value</span> <span class=\"title\">of</span> ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">instead</span> <span class=\"title\">of</span> <span class=\"title\">the</span> ``<span class=\"title\">dict</span>``.</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">This</span> <span class=\"title\">feature</span> <span class=\"title\">can</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">to</span> <span class=\"title\">implement</span> <span class=\"title\">custom</span> <span class=\"title\">decoders</span>.  <span class=\"title\">If</span> ``<span class=\"title\">object_hook</span>``</span></span><br><span class=\"line\">    is also defined, the ``object_pairs_hook`` takes priority.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``parse_float``, <span class=\"keyword\">if</span> specified, will be called <span class=\"keyword\">with</span> the string</span><br><span class=\"line\">    of every JSON float to be decoded. By default this <span class=\"keyword\">is</span> equivalent to</span><br><span class=\"line\">    float(num_str). This can be used to use another datatype <span class=\"keyword\">or</span> parser</span><br><span class=\"line\">    <span class=\"keyword\">for</span> JSON floats (e.g. decimal.Decimal).</span><br><span class=\"line\"></span><br><span class=\"line\">    ``parse_int``, <span class=\"keyword\">if</span> specified, will be called <span class=\"keyword\">with</span> the string</span><br><span class=\"line\">    of every JSON int to be decoded. By default this <span class=\"keyword\">is</span> equivalent to</span><br><span class=\"line\">    int(num_str). This can be used to use another datatype <span class=\"keyword\">or</span> parser</span><br><span class=\"line\">    <span class=\"keyword\">for</span> JSON integers (e.g. float).</span><br><span class=\"line\"></span><br><span class=\"line\">    ``parse_constant``, <span class=\"keyword\">if</span> specified, will be called <span class=\"keyword\">with</span> one of the</span><br><span class=\"line\">    following strings: -Infinity, Infinity, NaN.</span><br><span class=\"line\">    This can be used to <span class=\"keyword\">raise</span> an exception <span class=\"keyword\">if</span> invalid JSON numbers</span><br><span class=\"line\">    are encountered.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONDecoder`` subclass, specify it <span class=\"keyword\">with</span> the ``cls``</span><br><span class=\"line\">    kwarg; otherwise ``JSONDecoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">    The ``encoding`` argument <span class=\"keyword\">is</span> ignored <span class=\"keyword\">and</span> deprecated.</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"data\">DATA</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__all__ = [<span class=\"string\">'dump'</span>, <span class=\"string\">'dumps'</span>, <span class=\"string\">'load'</span>, <span class=\"string\">'loads'</span>, <span class=\"string\">'JSONDecoder'</span>, <span class=\"string\">'JSONDecod...</span></span><br></pre></td></tr></table></figure>\r\n<h1 id=\"version\">VERSION</h1>\r\n<p>2.0.9</p>\r\n<h1 id=\"author\">AUTHOR</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bob Ippolito &lt;bob@redivi.com&gt;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"file\">FILE</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3\\lib\\json\\__init__.py</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/assert/repos/python/json.__doc__\">Origin-File</a></p>\r\n<blockquote>\r\n<p>Help on package json:</p>\r\n</blockquote>\r\n<h1 id=\"name\">NAME</h1>\r\n<pre><code>json</code></pre>\r\n<h1 id=\"描述\">描述</h1>\r\n<p><a href=\"http://json.org\" target=\"_blank\" rel=\"noopener\">JSON(JavaScript Object Notation)</a> 是用作轻量级数据交换格式的JavaScript语法(ECMA-262第3版)的子集.</p>\r\n<p><code>json</code> 向用户公开了一个类似于标准库模块 <code>marshal</code> 和 <code>pickle</code> 的 API. 它源自外部维护的 simplejson 库的一个版本.</p>\r\n<h2 id=\"对基本-python-对象层级结构编码\">对基本 Python 对象层级结构编码</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps([<span class=\"string\">'foo'</span>, &#123;<span class=\"string\">'bar'</span>: (<span class=\"string\">'baz'</span>, <span class=\"keyword\">None</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2</span>)&#125;])</span><br><span class=\"line\"><span class=\"string\">'[\"foo\", &#123;\"bar\": [\"baz\", null, 1.0, 2]&#125;]'</span> </span><br><span class=\"line\"><span class=\"comment\"># json.dumps() 函数返回序列化 json 字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(<span class=\"string\">\"\\\"foo\\bar\"</span>))</span><br><span class=\"line\"><span class=\"string\">\"\\\"foo\\bar\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(<span class=\"string\">'\\u1234'</span>))</span><br><span class=\"line\"><span class=\"string\">\"\\u1234\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(<span class=\"string\">'\\\\'</span>))</span><br><span class=\"line\"><span class=\"string\">\"\\\\\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class=\"string\">\"c\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"a\"</span>: <span class=\"number\">0</span>&#125;, sort_keys=<span class=\"keyword\">True</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">\"a\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"c\"</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io = StringIO()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dump([<span class=\"string\">'streaming API'</span>], io)</span><br><span class=\"line\"><span class=\"comment\"># json.dump(obj, io) 将 obj 序列化后输出到 io</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io.getvalue()</span><br><span class=\"line\"><span class=\"string\">'[\"streaming API\"]'</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"紧凑编码\">紧凑编码</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mydict = &#123;<span class=\"string\">'4'</span>: <span class=\"number\">5</span>, <span class=\"string\">'6'</span>: <span class=\"number\">7</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,mydict], separators=(<span class=\"string\">','</span>, <span class=\"string\">':'</span>))</span><br><span class=\"line\"><span class=\"string\">'[1,2,3,&#123;\"4\":5,\"6\":7&#125;]'</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"漂亮的打印输出\">漂亮的打印输出</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class=\"string\">'4'</span>: <span class=\"number\">5</span>, <span class=\"string\">'6'</span>: <span class=\"number\">7</span>&#125;, sort_keys=<span class=\"keyword\">True</span>, indent=<span class=\"number\">4</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"4\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"string\">\"6\"</span>: <span class=\"number\">7</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"解码-json\">解码 JSON</h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj = [<span class=\"string\">'foo'</span>, &#123;<span class=\"string\">'bar'</span>: [<span class=\"string\">'baz'</span>, <span class=\"keyword\">None</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2</span>]&#125;]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'[\"foo\", &#123;\"bar\":[\"baz\", null, 1.0, 2]&#125;]'</span>) == obj</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'\"\\\\\"foo\\\\bar\"'</span>) == <span class=\"string\">'\"foo\\x08ar'</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io = StringIO(<span class=\"string\">'[\"streaming API\"]'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.load(io)[<span class=\"number\">0</span>] == <span class=\"string\">'streaming API'</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指定-json-对象解码\">指定 JSON 对象解码</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">as_complex</span><span class=\"params\">(dct)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">if</span> <span class=\"string\">'__complex__'</span> <span class=\"keyword\">in</span> dct:</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> complex(dct[<span class=\"string\">'real'</span>], dct[<span class=\"string\">'imag'</span>])</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> dct</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'&#123;\"__complex__\": true, \"real\": 1, \"imag\": 2&#125;'</span>,</span><br><span class=\"line\"><span class=\"meta\">... </span>    object_hook=as_complex)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> decimal <span class=\"keyword\">import</span> Decimal</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(<span class=\"string\">'1.1'</span>, parse_float=Decimal) == Decimal(<span class=\"string\">'1.1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指定-json-对象编码\">指定 JSON 对象编码</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encode_complex</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">if</span> isinstance(obj, complex):</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> [obj.real, obj.imag]</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">f'Object of type <span class=\"subst\">&#123;obj.__class__.__name__&#125;</span> '</span></span><br><span class=\"line\"><span class=\"meta\">... </span>                    <span class=\"string\">f'is not JSON serializable'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps(<span class=\"number\">2</span> + <span class=\"number\">1j</span>, default=encode_complex)</span><br><span class=\"line\"><span class=\"string\">'[2.0, 1.0]'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.JSONEncoder(default=encode_complex).encode(<span class=\"number\">2</span> + <span class=\"number\">1j</span>)</span><br><span class=\"line\"><span class=\"string\">'[2.0, 1.0]'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span>.join(json.JSONEncoder(default=encode_complex).iterencode(<span class=\"number\">2</span> + <span class=\"number\">1j</span>))</span><br><span class=\"line\"><span class=\"string\">'[2.0, 1.0]'</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"使用shell中的-json.tool-来验证和美化打印输出\">使用shell中的 <code>json.tool</code> 来验证和美化打印输出</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'&#123;\"json\":\"obj\"&#125;'</span> | python -m json.tool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"json\"</span>: <span class=\"string\">\"obj\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'&#123; 1.2:3.4&#125;'</span> | python -m json.tool</span><br><span class=\"line\">Expecting property name enclosed <span class=\"keyword\">in</span> double quotes: line 1 column 3 (char 2)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"包内容\">包内容</h1>\r\n<ul>\r\n<li><code>decoder</code></li>\r\n<li><code>encoder</code></li>\r\n<li><code>scanner</code></li>\r\n<li><code>tool</code></li>\r\n</ul>\r\n<h1 id=\"class\">CLASS</h1>\r\n<ul>\r\n<li><code>builtins.ValueError(builtins.Exception)</code>\r\n<ul>\r\n<li><code>json.decoder.JSONDecodeError</code></li>\r\n</ul></li>\r\n<li><code>builtins.object</code>\r\n<ul>\r\n<li><code>json.decoder.JSONDecoder</code></li>\r\n<li><code>json.encoder.JSONEncoder</code></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JSONDecodeError(builtins.ValueError)</span><br><span class=\"line\"> |  JSONDecodeError(msg, doc, pos)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Subclass of ValueError with the following additional properties:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  msg: 未格式化的错误信息</span><br><span class=\"line\"> |  doc: 正在解析的JSON文档</span><br><span class=\"line\"> |  pos: 解析失败处的 index</span><br><span class=\"line\"> |  lineno: 对应于 pos 的行</span><br><span class=\"line\"> |  colno: 对应于 pos 的列</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  方法解析顺序:</span><br><span class=\"line\"> |      JSONDecodeError</span><br><span class=\"line\"> |      builtins.ValueError</span><br><span class=\"line\"> |      builtins.Exception</span><br><span class=\"line\"> |      builtins.BaseException</span><br><span class=\"line\"> |      builtins.object</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  这里定义的方法:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __init__(self, msg, doc, pos)</span><br><span class=\"line\"> |      初始化 self.  参阅 help(type(self)) 得到准确的 signature.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __reduce__(self)</span><br><span class=\"line\"> |      Helper for pickle.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  这里定义的数据描述符:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __weakref__</span><br><span class=\"line\"> |      对象的弱引用列表(如果定义)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Static methods inherited from builtins.ValueError:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __new__(*args, **kwargs) from builtins.type</span><br><span class=\"line\"> |      创建并返回一个新对象. 参阅 help(type) 获得准确的 signature.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Methods inherited from builtins.BaseException:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __delattr__(self, name, /)</span><br><span class=\"line\"> |      执行 delattr(self, name).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __getattribute__(self, name, /)</span><br><span class=\"line\"> |      返回 getattr(self, name).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __repr__(self, /)</span><br><span class=\"line\"> |      返回 repr(self).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __setattr__(self, name, value, /)</span><br><span class=\"line\"> |      执行 setattr(self, name, value).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __setstate__(...)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __str__(self, /)</span><br><span class=\"line\"> |      返回 str(self).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  with_traceback(...)</span><br><span class=\"line\"> |      Exception.with_traceback(tb) --</span><br><span class=\"line\"> |      set self.__traceback__ to tb and return self.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors inherited from builtins.BaseException:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __cause__</span><br><span class=\"line\"> |      exception cause     例外原因</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __context__</span><br><span class=\"line\"> |      exception context   例外内容</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __dict__</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __suppress_context__</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __traceback__</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  args</span><br><span class=\"line\"></span><br><span class=\"line\">class JSONDecoder(builtins.object)</span><br><span class=\"line\"> |  JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Simple JSON &lt;http://json.org&gt; decoder</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  解码时默认进行以下转换:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | JSON          | Python            |</span><br><span class=\"line\"> |  +===============+===================+</span><br><span class=\"line\"> |  | object        | dict              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | array         | list              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | string        | str               |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | number (int)  | int               |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | number (real) | float             |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | true          | True              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | false         | False             |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |  | null          | None              |</span><br><span class=\"line\"> |  +---------------+-------------------+</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  它还将 ``NaN``, ``Infinity`` 和 ``-Infinity`` 理解为对应的浮点数, 这超出</span><br><span class=\"line\"> |  了 JSON 的规范.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Methods defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __init__(self, *, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)</span><br><span class=\"line\"> |      ``object_hook``, 如果指定, 将调用每个JSON对象的结果, 并使用其返回值</span><br><span class=\"line\"> |      代替给定的 ``dict``. 这可用于提供自定义反序列化 (例如, 支持</span><br><span class=\"line\"> |      JSON-RPC 类提示).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``object_pairs_hook``, 如果指定将被调用, 每个 JSON 对象的结果都使用</span><br><span class=\"line\"> |      有序的对列表进行解码. 将使用 ``object_paires_hook`` 的返回值, </span><br><span class=\"line\"> |      而非 ``dict``. 此特性可用于实现自定义解码器. 如果还定义了</span><br><span class=\"line\"> |      ``object_hook`` , 则 ``object_hook`` 优先.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``parse_float``, 如果指定, 将使用要解码的每个 JSON float 的字符串调用. </span><br><span class=\"line\"> |      默认情况下, 这相当于 float(num_str). 这可用于为 JSON 浮点数使用另一</span><br><span class=\"line\"> |      种数据类型或解析器(例如 decimal.Decimal).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``parse_int``, 如果指定, 将使用要解码的每个 JSON int 的字符串调用. </span><br><span class=\"line\"> |      默认情况下, 这相当于 int(num_str). 这可用于为 JSON 浮点数使用另一种</span><br><span class=\"line\"> |      数据类型或解析器(例如 float).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      ``parse_constant``, if specified, will be called with one of the</span><br><span class=\"line\"> |      following strings: -Infinity, Infinity, NaN.</span><br><span class=\"line\"> |      This can be used to raise an exception if invalid JSON numbers</span><br><span class=\"line\"> |      are encountered.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If ``strict`` is false (true is the default), then control</span><br><span class=\"line\"> |      characters will be allowed inside strings.  Control characters in</span><br><span class=\"line\"> |      this context are those with character codes in the 0-31 range,</span><br><span class=\"line\"> |      including ``&apos;\\t&apos;`` (tab), ``&apos;\\n&apos;``, ``&apos;\\r&apos;`` and ``&apos;\\0&apos;``.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  decode(self, s, _w=&lt;built-in method match of re.Pattern object at 0x00000175F1020F30&gt;)</span><br><span class=\"line\"> |      Return the Python representation of ``s`` (a ``str`` instance</span><br><span class=\"line\"> |      containing a JSON document).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  raw_decode(self, s, idx=0)</span><br><span class=\"line\"> |      Decode a JSON document from ``s`` (a ``str`` beginning with</span><br><span class=\"line\"> |      a JSON document) and return a 2-tuple of the Python</span><br><span class=\"line\"> |      representation and the index in ``s`` where the document ended.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      This can be used to decode a JSON document from a string that may</span><br><span class=\"line\"> |      have extraneous data at the end.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __dict__</span><br><span class=\"line\"> |      dictionary for instance variables (if defined)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __weakref__</span><br><span class=\"line\"> |      list of weak references to the object (if defined)</span><br><span class=\"line\"></span><br><span class=\"line\">class JSONEncoder(builtins.object)</span><br><span class=\"line\"> |  JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Extensible JSON &lt;http://json.org&gt; encoder for Python data structures.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Supports the following objects and types by default:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | Python            | JSON          |</span><br><span class=\"line\"> |  +===================+===============+</span><br><span class=\"line\"> |  | dict              | object        |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | list, tuple       | array         |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | str               | string        |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | int, float        | number        |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | True              | true          |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | False             | false         |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |  | None              | null          |</span><br><span class=\"line\"> |  +-------------------+---------------+</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  To extend this to recognize other objects, subclass and implement a</span><br><span class=\"line\"> |  ``.default()`` method with another method that returns a serializable</span><br><span class=\"line\"> |  object for ``o`` if possible, otherwise it should call the superclass</span><br><span class=\"line\"> |  implementation (to raise ``TypeError``).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  Methods defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __init__(self, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)</span><br><span class=\"line\"> |      Constructor for JSONEncoder, with sensible defaults.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If skipkeys is false, then it is a TypeError to attempt</span><br><span class=\"line\"> |      encoding of keys that are not str, int, float or None.  If</span><br><span class=\"line\"> |      skipkeys is True, such items are simply skipped.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If ensure_ascii is true, the output is guaranteed to be str</span><br><span class=\"line\"> |      objects with all incoming non-ASCII characters escaped.  If</span><br><span class=\"line\"> |      ensure_ascii is false, the output can contain non-ASCII characters.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If check_circular is true, then lists, dicts, and custom encoded</span><br><span class=\"line\"> |      objects will be checked for circular references during encoding to</span><br><span class=\"line\"> |      prevent an infinite recursion (which would cause an OverflowError).</span><br><span class=\"line\"> |      Otherwise, no such check takes place.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If allow_nan is true, then NaN, Infinity, and -Infinity will be</span><br><span class=\"line\"> |      encoded as such.  This behavior is not JSON specification compliant,</span><br><span class=\"line\"> |      but is consistent with most JavaScript based encoders and decoders.</span><br><span class=\"line\"> |      Otherwise, it will be a ValueError to encode such floats.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If sort_keys is true, then the output of dictionaries will be</span><br><span class=\"line\"> |      sorted by key; this is useful for regression tests to ensure</span><br><span class=\"line\"> |      that JSON serializations can be compared on a day-to-day basis.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If indent is a non-negative integer, then JSON array</span><br><span class=\"line\"> |      elements and object members will be pretty-printed with that</span><br><span class=\"line\"> |      indent level.  An indent level of 0 will only insert newlines.</span><br><span class=\"line\"> |      None is the most compact representation.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If specified, separators should be an (item_separator, key_separator)</span><br><span class=\"line\"> |      tuple.  The default is (&apos;, &apos;, &apos;: &apos;) if *indent* is ``None`` and</span><br><span class=\"line\"> |      (&apos;,&apos;, &apos;: &apos;) otherwise.  To get the most compact JSON representation,</span><br><span class=\"line\"> |      you should specify (&apos;,&apos;, &apos;:&apos;) to eliminate whitespace.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      If specified, default is a function that gets called for objects</span><br><span class=\"line\"> |      that can&apos;t otherwise be serialized.  It should return a JSON encodable</span><br><span class=\"line\"> |      version of the object or raise a ``TypeError``.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  default(self, o)</span><br><span class=\"line\"> |      Implement this method in a subclass such that it returns</span><br><span class=\"line\"> |      a serializable object for ``o``, or calls the base implementation</span><br><span class=\"line\"> |      (to raise a ``TypeError``).</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      For example, to support arbitrary iterators, you could</span><br><span class=\"line\"> |      implement default like this::</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |          def default(self, o):</span><br><span class=\"line\"> |              try:</span><br><span class=\"line\"> |                  iterable = iter(o)</span><br><span class=\"line\"> |              except TypeError:</span><br><span class=\"line\"> |                  pass</span><br><span class=\"line\"> |              else:</span><br><span class=\"line\"> |                  return list(iterable)</span><br><span class=\"line\"> |              # Let the base class default method raise the TypeError</span><br><span class=\"line\"> |              return JSONEncoder.default(self, o)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  encode(self, o)</span><br><span class=\"line\"> |      Return a JSON string representation of a Python data structure.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      &gt;&gt;&gt; from json.encoder import JSONEncoder</span><br><span class=\"line\"> |      &gt;&gt;&gt; JSONEncoder().encode(&#123;&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]&#125;)</span><br><span class=\"line\"> |      &apos;&#123;&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]&#125;&apos;</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  iterencode(self, o, _one_shot=False)</span><br><span class=\"line\"> |      Encode the given object and yield each string</span><br><span class=\"line\"> |      representation as available.</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |      For example::</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |          for chunk in JSONEncoder().iterencode(bigobject):</span><br><span class=\"line\"> |              mysocket.write(chunk)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __dict__</span><br><span class=\"line\"> |      dictionary for instance variables (if defined)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  __weakref__</span><br><span class=\"line\"> |      list of weak references to the object (if defined)</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data and other attributes defined here:</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  item_separator = &apos;, &apos;</span><br><span class=\"line\"> |</span><br><span class=\"line\"> |  key_separator = &apos;: &apos;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"functions\">FUNCTIONS</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump(obj, fp, *, skipkeys=<span class=\"keyword\">False</span>, ensure_ascii=<span class=\"keyword\">True</span>, check_circular=<span class=\"keyword\">True</span>, allow_nan=<span class=\"keyword\">True</span>, cls=<span class=\"keyword\">None</span>, indent=<span class=\"keyword\">None</span>, separators=<span class=\"keyword\">None</span>, default=<span class=\"keyword\">None</span>, sort_keys=<span class=\"keyword\">False</span>, **kw)</span><br><span class=\"line\">    Serialize ``obj`` <span class=\"keyword\">as</span> a JSON formatted stream to ``fp`` (a</span><br><span class=\"line\">    ``.write()``-supporting file-like object).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``skipkeys`` <span class=\"keyword\">is</span> true then ``dict`` keys that are <span class=\"keyword\">not</span> basic types</span><br><span class=\"line\">    (``str``, ``int``, ``float``, ``bool``, ``<span class=\"keyword\">None</span>``) will be skipped</span><br><span class=\"line\">    instead of raising a ``TypeError``.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``ensure_ascii`` <span class=\"keyword\">is</span> false, then the strings written to ``fp`` can</span><br><span class=\"line\">    contain non-ASCII characters <span class=\"keyword\">if</span> they appear <span class=\"keyword\">in</span> strings contained <span class=\"keyword\">in</span></span><br><span class=\"line\">    ``obj``. Otherwise, all such characters are escaped <span class=\"keyword\">in</span> JSON strings.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``check_circular`` <span class=\"keyword\">is</span> false, then the circular reference check</span><br><span class=\"line\">    <span class=\"keyword\">for</span> container types will be skipped <span class=\"keyword\">and</span> a circular reference will</span><br><span class=\"line\">    result <span class=\"keyword\">in</span> an ``OverflowError`` (<span class=\"keyword\">or</span> worse).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``allow_nan`` <span class=\"keyword\">is</span> false, then it will be a ``ValueError`` to</span><br><span class=\"line\">    serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)</span><br><span class=\"line\">    <span class=\"keyword\">in</span> strict compliance of the JSON specification, instead of using the</span><br><span class=\"line\">    JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``indent`` <span class=\"keyword\">is</span> a non-negative integer, then JSON array elements <span class=\"keyword\">and</span></span><br><span class=\"line\">    object members will be pretty-printed <span class=\"keyword\">with</span> that indent level. An indent</span><br><span class=\"line\">    level of <span class=\"number\">0</span> will only insert newlines. ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">is</span> the most compact</span><br><span class=\"line\">    representation.</span><br><span class=\"line\"></span><br><span class=\"line\">    If specified, ``separators`` should be an ``(item_separator, key_separator)``</span><br><span class=\"line\">    tuple.  The default <span class=\"keyword\">is</span> ``(<span class=\"string\">', '</span>, <span class=\"string\">': '</span>)`` <span class=\"keyword\">if</span> *indent* <span class=\"keyword\">is</span> ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">and</span></span><br><span class=\"line\">    ``(<span class=\"string\">','</span>, <span class=\"string\">': '</span>)`` otherwise.  To get the most compact JSON representation,</span><br><span class=\"line\">    you should specify ``(<span class=\"string\">','</span>, <span class=\"string\">':'</span>)`` to eliminate whitespace.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``default(obj)`` <span class=\"keyword\">is</span> a function that should <span class=\"keyword\">return</span> a serializable version</span><br><span class=\"line\">    of obj <span class=\"keyword\">or</span> <span class=\"keyword\">raise</span> TypeError. The default simply raises TypeError.</span><br><span class=\"line\"></span><br><span class=\"line\">    If *sort_keys* <span class=\"keyword\">is</span> true (default: ``<span class=\"keyword\">False</span>``), then the output of</span><br><span class=\"line\">    dictionaries will be sorted by key.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the</span><br><span class=\"line\">    ``.default()`` method to serialize additional types), specify it <span class=\"keyword\">with</span></span><br><span class=\"line\">    the ``cls`` kwarg; otherwise ``JSONEncoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">dumps(obj, *, skipkeys=<span class=\"keyword\">False</span>, ensure_ascii=<span class=\"keyword\">True</span>, check_circular=<span class=\"keyword\">True</span>, allow_nan=<span class=\"keyword\">True</span>, cls=<span class=\"keyword\">None</span>, indent=<span class=\"keyword\">None</span>, separators=<span class=\"keyword\">None</span>, default=<span class=\"keyword\">None</span>, sort_keys=<span class=\"keyword\">False</span>, **kw)</span><br><span class=\"line\">    Serialize ``obj`` to a JSON formatted ``str``.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``skipkeys`` <span class=\"keyword\">is</span> true then ``dict`` keys that are <span class=\"keyword\">not</span> basic types</span><br><span class=\"line\">    (``str``, ``int``, ``float``, ``bool``, ``<span class=\"keyword\">None</span>``) will be skipped</span><br><span class=\"line\">    instead of raising a ``TypeError``.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``ensure_ascii`` <span class=\"keyword\">is</span> false, then the <span class=\"keyword\">return</span> value can contain non-ASCII</span><br><span class=\"line\">    characters <span class=\"keyword\">if</span> they appear <span class=\"keyword\">in</span> strings contained <span class=\"keyword\">in</span> ``obj``. Otherwise, all</span><br><span class=\"line\">    such characters are escaped <span class=\"keyword\">in</span> JSON strings.</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``check_circular`` <span class=\"keyword\">is</span> false, then the circular reference check</span><br><span class=\"line\">    <span class=\"keyword\">for</span> container types will be skipped <span class=\"keyword\">and</span> a circular reference will</span><br><span class=\"line\">    result <span class=\"keyword\">in</span> an ``OverflowError`` (<span class=\"keyword\">or</span> worse).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``allow_nan`` <span class=\"keyword\">is</span> false, then it will be a ``ValueError`` to</span><br><span class=\"line\">    serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) <span class=\"keyword\">in</span></span><br><span class=\"line\">    strict compliance of the JSON specification, instead of using the</span><br><span class=\"line\">    JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).</span><br><span class=\"line\"></span><br><span class=\"line\">    If ``indent`` <span class=\"keyword\">is</span> a non-negative integer, then JSON array elements <span class=\"keyword\">and</span></span><br><span class=\"line\">    object members will be pretty-printed <span class=\"keyword\">with</span> that indent level. An indent</span><br><span class=\"line\">    level of <span class=\"number\">0</span> will only insert newlines. ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">is</span> the most compact</span><br><span class=\"line\">    representation.</span><br><span class=\"line\"></span><br><span class=\"line\">    If specified, ``separators`` should be an ``(item_separator, key_separator)``</span><br><span class=\"line\">    tuple.  The default <span class=\"keyword\">is</span> ``(<span class=\"string\">', '</span>, <span class=\"string\">': '</span>)`` <span class=\"keyword\">if</span> *indent* <span class=\"keyword\">is</span> ``<span class=\"keyword\">None</span>`` <span class=\"keyword\">and</span></span><br><span class=\"line\">    ``(<span class=\"string\">','</span>, <span class=\"string\">': '</span>)`` otherwise.  To get the most compact JSON representation,</span><br><span class=\"line\">    you should specify ``(<span class=\"string\">','</span>, <span class=\"string\">':'</span>)`` to eliminate whitespace.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``default(obj)`` <span class=\"keyword\">is</span> a function that should <span class=\"keyword\">return</span> a serializable version</span><br><span class=\"line\">    of obj <span class=\"keyword\">or</span> <span class=\"keyword\">raise</span> TypeError. The default simply raises TypeError.</span><br><span class=\"line\"></span><br><span class=\"line\">    If *sort_keys* <span class=\"keyword\">is</span> true (default: ``<span class=\"keyword\">False</span>``), then the output of</span><br><span class=\"line\">    dictionaries will be sorted by key.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the</span><br><span class=\"line\">    ``.default()`` method to serialize additional types), specify it <span class=\"keyword\">with</span></span><br><span class=\"line\">    the ``cls`` kwarg; otherwise ``JSONEncoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">load(fp, *, cls=<span class=\"keyword\">None</span>, object_hook=<span class=\"keyword\">None</span>, parse_float=<span class=\"keyword\">None</span>, parse_int=<span class=\"keyword\">None</span>, parse_constant=<span class=\"keyword\">None</span>, object_pairs_hook=<span class=\"keyword\">None</span>, **kw)</span><br><span class=\"line\">    Deserialize ``fp`` (a ``.read()``-supporting file-like object containing</span><br><span class=\"line\">    a JSON document) to a Python object.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``object_hook`` <span class=\"keyword\">is</span> an optional function that will be called <span class=\"keyword\">with</span> the</span><br><span class=\"line\">    result of any object literal decode (a ``dict``). The <span class=\"keyword\">return</span> value of</span><br><span class=\"line\">    ``object_hook`` will be used instead of the ``dict``. This feature</span><br><span class=\"line\">    can be used to implement custom decoders (e.g. JSON-RPC <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hinting</span>).</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">is</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">function</span> <span class=\"title\">that</span> <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">called</span> <span class=\"title\">with</span> <span class=\"title\">the</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">result</span> <span class=\"title\">of</span> <span class=\"title\">any</span> <span class=\"title\">object</span> <span class=\"title\">literal</span> <span class=\"title\">decoded</span> <span class=\"title\">with</span> <span class=\"title\">an</span> <span class=\"title\">ordered</span> <span class=\"title\">list</span> <span class=\"title\">of</span> <span class=\"title\">pairs</span>.  <span class=\"title\">The</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">return</span> <span class=\"title\">value</span> <span class=\"title\">of</span> ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">instead</span> <span class=\"title\">of</span> <span class=\"title\">the</span> ``<span class=\"title\">dict</span>``.</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">This</span> <span class=\"title\">feature</span> <span class=\"title\">can</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">to</span> <span class=\"title\">implement</span> <span class=\"title\">custom</span> <span class=\"title\">decoders</span>.  <span class=\"title\">If</span> ``<span class=\"title\">object_hook</span>``</span></span><br><span class=\"line\">    is also defined, the ``object_pairs_hook`` takes priority.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONDecoder`` subclass, specify it <span class=\"keyword\">with</span> the ``cls``</span><br><span class=\"line\">    kwarg; otherwise ``JSONDecoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">loads(s, *, encoding=<span class=\"keyword\">None</span>, cls=<span class=\"keyword\">None</span>, object_hook=<span class=\"keyword\">None</span>, parse_float=<span class=\"keyword\">None</span>, parse_int=<span class=\"keyword\">None</span>, parse_constant=<span class=\"keyword\">None</span>, object_pairs_hook=<span class=\"keyword\">None</span>, **kw)</span><br><span class=\"line\">    Deserialize ``s`` (a ``str``, ``bytes`` <span class=\"keyword\">or</span> ``bytearray`` instance</span><br><span class=\"line\">    containing a JSON document) to a Python object.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``object_hook`` <span class=\"keyword\">is</span> an optional function that will be called <span class=\"keyword\">with</span> the</span><br><span class=\"line\">    result of any object literal decode (a ``dict``). The <span class=\"keyword\">return</span> value of</span><br><span class=\"line\">    ``object_hook`` will be used instead of the ``dict``. This feature</span><br><span class=\"line\">    can be used to implement custom decoders (e.g. JSON-RPC <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hinting</span>).</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">is</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">function</span> <span class=\"title\">that</span> <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">called</span> <span class=\"title\">with</span> <span class=\"title\">the</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">result</span> <span class=\"title\">of</span> <span class=\"title\">any</span> <span class=\"title\">object</span> <span class=\"title\">literal</span> <span class=\"title\">decoded</span> <span class=\"title\">with</span> <span class=\"title\">an</span> <span class=\"title\">ordered</span> <span class=\"title\">list</span> <span class=\"title\">of</span> <span class=\"title\">pairs</span>.  <span class=\"title\">The</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">return</span> <span class=\"title\">value</span> <span class=\"title\">of</span> ``<span class=\"title\">object_pairs_hook</span>`` <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">instead</span> <span class=\"title\">of</span> <span class=\"title\">the</span> ``<span class=\"title\">dict</span>``.</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">This</span> <span class=\"title\">feature</span> <span class=\"title\">can</span> <span class=\"title\">be</span> <span class=\"title\">used</span> <span class=\"title\">to</span> <span class=\"title\">implement</span> <span class=\"title\">custom</span> <span class=\"title\">decoders</span>.  <span class=\"title\">If</span> ``<span class=\"title\">object_hook</span>``</span></span><br><span class=\"line\">    is also defined, the ``object_pairs_hook`` takes priority.</span><br><span class=\"line\"></span><br><span class=\"line\">    ``parse_float``, <span class=\"keyword\">if</span> specified, will be called <span class=\"keyword\">with</span> the string</span><br><span class=\"line\">    of every JSON float to be decoded. By default this <span class=\"keyword\">is</span> equivalent to</span><br><span class=\"line\">    float(num_str). This can be used to use another datatype <span class=\"keyword\">or</span> parser</span><br><span class=\"line\">    <span class=\"keyword\">for</span> JSON floats (e.g. decimal.Decimal).</span><br><span class=\"line\"></span><br><span class=\"line\">    ``parse_int``, <span class=\"keyword\">if</span> specified, will be called <span class=\"keyword\">with</span> the string</span><br><span class=\"line\">    of every JSON int to be decoded. By default this <span class=\"keyword\">is</span> equivalent to</span><br><span class=\"line\">    int(num_str). This can be used to use another datatype <span class=\"keyword\">or</span> parser</span><br><span class=\"line\">    <span class=\"keyword\">for</span> JSON integers (e.g. float).</span><br><span class=\"line\"></span><br><span class=\"line\">    ``parse_constant``, <span class=\"keyword\">if</span> specified, will be called <span class=\"keyword\">with</span> one of the</span><br><span class=\"line\">    following strings: -Infinity, Infinity, NaN.</span><br><span class=\"line\">    This can be used to <span class=\"keyword\">raise</span> an exception <span class=\"keyword\">if</span> invalid JSON numbers</span><br><span class=\"line\">    are encountered.</span><br><span class=\"line\"></span><br><span class=\"line\">    To use a custom ``JSONDecoder`` subclass, specify it <span class=\"keyword\">with</span> the ``cls``</span><br><span class=\"line\">    kwarg; otherwise ``JSONDecoder`` <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"></span><br><span class=\"line\">    The ``encoding`` argument <span class=\"keyword\">is</span> ignored <span class=\"keyword\">and</span> deprecated.</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"data\">DATA</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__all__ = [<span class=\"string\">'dump'</span>, <span class=\"string\">'dumps'</span>, <span class=\"string\">'load'</span>, <span class=\"string\">'loads'</span>, <span class=\"string\">'JSONDecoder'</span>, <span class=\"string\">'JSONDecod...</span></span><br></pre></td></tr></table></figure>\r\n<h1 id=\"version\">VERSION</h1>\r\n<p>2.0.9</p>\r\n<h1 id=\"author\">AUTHOR</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bob Ippolito &lt;bob@redivi.com&gt;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"file\">FILE</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3\\lib\\json\\__init__.py</span><br></pre></td></tr></table></figure>\r\n"},{"title":"测试","tags":["Python","Note"],"categories":["Python"],"_content":"\n# 看看 markdown 文档\n\n在非 `_drafts` `_posts` 目录下会怎么样.\n\n```py\nprint(\"测试代码块功能\")\n```\n\n[测试超链接](/index.html)","source":"assert/resources/test.md","raw":"---\ntitle: '测试'\ntags:\n    - Python\n    - Note\ncategories:\n    - Python\n---\n\n# 看看 markdown 文档\n\n在非 `_drafts` `_posts` 目录下会怎么样.\n\n```py\nprint(\"测试代码块功能\")\n```\n\n[测试超链接](/index.html)","date":"2018-08-23T07:55:08.504Z","updated":"2018-08-19T14:17:26.000Z","path":"assert/resources/test.html","comments":1,"layout":"page","_id":"cjl8vtwg70041w8lk0pqxtfu2","content":"<h1 id=\"看看-markdown-文档\">看看 markdown 文档</h1>\r\n<p>在非 <code>_drafts</code> <code>_posts</code> 目录下会怎么样.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"测试代码块功能\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"/index.html\">测试超链接</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"看看-markdown-文档\">看看 markdown 文档</h1>\r\n<p>在非 <code>_drafts</code> <code>_posts</code> 目录下会怎么样.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"测试代码块功能\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"/index.html\">测试超链接</a></p>\r\n"},{"_content":"# 下载 AnkiServer\n\n[AnkiServer](https://pypi.org/project/AnkiServer/2.0.6/) 基于 Python2 运行. \n\n```sh\npip2 install AnkiServer\n```\n\n# 配置 AnkiServer\n\n0. 首先, 创建一个单独的目录, 要同步的文件存储在此.\n0. 从 `python_prefix/lib/python2.X/site-packages/AnkiServer-2.X.X-py2.X.egg/examples` 复制一个配置文件模板. 不过在下载的发行版中没有发现该文件, 于是去 [GitHub 项目页](https://github.com/dsnopek/anki-sync-server) 找了. 注意有两个重要的配置文件. 使用方法如下:\n\n> 无意间发现模板被放在这个目录下了. `/data/data/com.termux/files/usr/examples`\n\n```ini\n# example.ini 需要重命名为 production.ini 并移动到为 AnkiServer 创建的目录\n\n[server:main]\nuse = egg:AnkiServer#server\nhost = 127.0.0.1        # 运行服务的主机 IP 地址\nport = 27701            # 服务使用的端口\n\n[filter-app:main]\nuse = egg:Paste#translogger\nnext = real\n\n[app:real]\nuse = egg:Paste#urlmap\n/ = rest_app\n/msync = sync_app\n/sync = sync_app\n\n[app:rest_app]\nuse = egg:AnkiServer#rest_app\ndata_root = ./collections\nallowed_hosts = 127.0.0.1       # 允许使用服务的客户机的 IP 地址, 可设置为 0.0.0.0 以允许任何 IP 连接.\n;logging.config_file = logging.conf\n\n[app:sync_app]\nuse = egg:AnkiServer#sync_app\ndata_root = ./collections\nbase_url = /sync/\nbase_media_url = /msync/\nsession_db_path = ./session.db\nauth_db_path = ./auth.db\n```\n\n如果是在 Termux 中运行 AnkiServer 的话, 以下文件中的路径都要改!\n不知道路径在哪里的话, 用 `locate -r XXX$` 通过正则表达式搜索. (`$` 匹配字符串末尾.)\n\n```conf\n; supervisor-anki-server.conf , 这是个监控服务的配置文件, 需要放在 supervisor/conf.d/ 目录中.\n[program:anki-server]\n\n\n; The command used to execute the Anki Server. If you setup a virtualenv like described\n; in the README.md, then be sure to point to the \"paster\" command inside of it! All files\n; are relative to the \"directory\" variable given below\n; command=/usr/local/bin/paster serve production.ini\ncommand= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令\n\n; This is the directory to execute the Anki Server from. All files will be relative to this\n; directory. This includes arguments to the \"command\" above and in the configuration files.\ndirectory=/var/lib/anki\n\n; This is the user the Anki Server will run as. It should have permission to read and write\n; the Anki collections referred to in the configuration file, but, for security reasons it\n; shouldn't be \"root\"!\nuser=u0_174     ; 需要配置为运行 AnkiServer 的 Linux 用户名\n\nautostart=true\nautorestart=true\nredirect_stderr=true\n\n; Sometimes necessary if Anki is complaining about a UTF-8 locale. Make sure\n; that the local you pick is actually installed on your system.\n;environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8,LC_LANG=en_US.UTF-8\n```\n\n但是我的手机没法使用 `supervisor` 而现在大多数 Linux 系统都使用 `systemd` 了. 所以这个文件的东西看看就好.\n\n## 小结\n\n需要注意的几条配置:\n\n```ini\n# 在 production.ini 中\nallowed_hosts = 0.0.0.0       # 允许使用服务的客户机的 IP 地址, 可设置为 0.0.0.0 以允许任何 IP 连接.\nhost = 127.0.0.1        # 运行服务的主机 IP 地址\nport = 18909            # 服务使用的端口\n\n# 在 supervisor-anki-server.conf 中\n# 这项内容可在配置 systemd 时用于参考\n; command=/usr/local/bin/paster serve production.ini\ncommand= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令\n```\n\n# 使用 AnkiServer\n\nAnki server 主要通过 `/data/data/com.termux/files/usr/bin/ankiserverctl.py` 文件来运行.\n\n添加用户:\n\n```sh\nankiserverctl.py adduser <username>           # 添加用户, 与 anki app 上的用户保持一致\n```\n\n测试服务:\n\n```sh\nankiserverctl.py debug\n```\n\n启动服务:\n\n```sh\nankiserverctl.py start\n```\n\n停止服务:\n\n```sh\nankiserverctl.py stop\n```","source":"assert/repos/anki/ankiserver.failed.md","raw":"# 下载 AnkiServer\n\n[AnkiServer](https://pypi.org/project/AnkiServer/2.0.6/) 基于 Python2 运行. \n\n```sh\npip2 install AnkiServer\n```\n\n# 配置 AnkiServer\n\n0. 首先, 创建一个单独的目录, 要同步的文件存储在此.\n0. 从 `python_prefix/lib/python2.X/site-packages/AnkiServer-2.X.X-py2.X.egg/examples` 复制一个配置文件模板. 不过在下载的发行版中没有发现该文件, 于是去 [GitHub 项目页](https://github.com/dsnopek/anki-sync-server) 找了. 注意有两个重要的配置文件. 使用方法如下:\n\n> 无意间发现模板被放在这个目录下了. `/data/data/com.termux/files/usr/examples`\n\n```ini\n# example.ini 需要重命名为 production.ini 并移动到为 AnkiServer 创建的目录\n\n[server:main]\nuse = egg:AnkiServer#server\nhost = 127.0.0.1        # 运行服务的主机 IP 地址\nport = 27701            # 服务使用的端口\n\n[filter-app:main]\nuse = egg:Paste#translogger\nnext = real\n\n[app:real]\nuse = egg:Paste#urlmap\n/ = rest_app\n/msync = sync_app\n/sync = sync_app\n\n[app:rest_app]\nuse = egg:AnkiServer#rest_app\ndata_root = ./collections\nallowed_hosts = 127.0.0.1       # 允许使用服务的客户机的 IP 地址, 可设置为 0.0.0.0 以允许任何 IP 连接.\n;logging.config_file = logging.conf\n\n[app:sync_app]\nuse = egg:AnkiServer#sync_app\ndata_root = ./collections\nbase_url = /sync/\nbase_media_url = /msync/\nsession_db_path = ./session.db\nauth_db_path = ./auth.db\n```\n\n如果是在 Termux 中运行 AnkiServer 的话, 以下文件中的路径都要改!\n不知道路径在哪里的话, 用 `locate -r XXX$` 通过正则表达式搜索. (`$` 匹配字符串末尾.)\n\n```conf\n; supervisor-anki-server.conf , 这是个监控服务的配置文件, 需要放在 supervisor/conf.d/ 目录中.\n[program:anki-server]\n\n\n; The command used to execute the Anki Server. If you setup a virtualenv like described\n; in the README.md, then be sure to point to the \"paster\" command inside of it! All files\n; are relative to the \"directory\" variable given below\n; command=/usr/local/bin/paster serve production.ini\ncommand= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令\n\n; This is the directory to execute the Anki Server from. All files will be relative to this\n; directory. This includes arguments to the \"command\" above and in the configuration files.\ndirectory=/var/lib/anki\n\n; This is the user the Anki Server will run as. It should have permission to read and write\n; the Anki collections referred to in the configuration file, but, for security reasons it\n; shouldn't be \"root\"!\nuser=u0_174     ; 需要配置为运行 AnkiServer 的 Linux 用户名\n\nautostart=true\nautorestart=true\nredirect_stderr=true\n\n; Sometimes necessary if Anki is complaining about a UTF-8 locale. Make sure\n; that the local you pick is actually installed on your system.\n;environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8,LC_LANG=en_US.UTF-8\n```\n\n但是我的手机没法使用 `supervisor` 而现在大多数 Linux 系统都使用 `systemd` 了. 所以这个文件的东西看看就好.\n\n## 小结\n\n需要注意的几条配置:\n\n```ini\n# 在 production.ini 中\nallowed_hosts = 0.0.0.0       # 允许使用服务的客户机的 IP 地址, 可设置为 0.0.0.0 以允许任何 IP 连接.\nhost = 127.0.0.1        # 运行服务的主机 IP 地址\nport = 18909            # 服务使用的端口\n\n# 在 supervisor-anki-server.conf 中\n# 这项内容可在配置 systemd 时用于参考\n; command=/usr/local/bin/paster serve production.ini\ncommand= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令\n```\n\n# 使用 AnkiServer\n\nAnki server 主要通过 `/data/data/com.termux/files/usr/bin/ankiserverctl.py` 文件来运行.\n\n添加用户:\n\n```sh\nankiserverctl.py adduser <username>           # 添加用户, 与 anki app 上的用户保持一致\n```\n\n测试服务:\n\n```sh\nankiserverctl.py debug\n```\n\n启动服务:\n\n```sh\nankiserverctl.py start\n```\n\n停止服务:\n\n```sh\nankiserverctl.py stop\n```","date":"2018-08-25T03:44:21.310Z","updated":"2018-08-25T03:44:21.310Z","path":"assert/repos/anki/ankiserver.failed.html","title":"","comments":1,"layout":"page","_id":"cjl8vtwgn0042w8lkx9vi33tq","content":"<h1 id=\"下载-ankiserver\">下载 AnkiServer</h1>\r\n<p><a href=\"https://pypi.org/project/AnkiServer/2.0.6/\" target=\"_blank\" rel=\"noopener\">AnkiServer</a> 基于 Python2 运行.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip2 install AnkiServer</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"配置-ankiserver\">配置 AnkiServer</h1>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 创建一个单独的目录, 要同步的文件存储在此.</li>\r\n<li>从 <code>python_prefix/lib/python2.X/site-packages/AnkiServer-2.X.X-py2.X.egg/examples</code> 复制一个配置文件模板. 不过在下载的发行版中没有发现该文件, 于是去 <a href=\"https://github.com/dsnopek/anki-sync-server\" target=\"_blank\" rel=\"noopener\">GitHub 项目页</a> 找了. 注意有两个重要的配置文件. 使用方法如下:</li>\r\n</ol>\r\n<blockquote>\r\n<p>无意间发现模板被放在这个目录下了. <code>/data/data/com.termux/files/usr/examples</code></p>\r\n</blockquote>\r\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># example.ini 需要重命名为 production.ini 并移动到为 AnkiServer 创建的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[server:main]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:AnkiServer#server</span><br><span class=\"line\"><span class=\"attr\">host</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>        # 运行服务的主机 IP 地址</span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">27701</span>            # 服务使用的端口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[filter-app:main]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:Paste#translogger</span><br><span class=\"line\"><span class=\"attr\">next</span> = real</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[app:real]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:Paste#urlmap</span><br><span class=\"line\">/ = rest_app</span><br><span class=\"line\">/msync = sync_app</span><br><span class=\"line\">/sync = sync_app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[app:rest_app]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:AnkiServer#rest_app</span><br><span class=\"line\"><span class=\"attr\">data_root</span> = ./collections</span><br><span class=\"line\"><span class=\"attr\">allowed_hosts</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>       # 允许使用服务的客户机的 IP 地址, 可设置为 <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span> 以允许任何 IP 连接.</span><br><span class=\"line\"><span class=\"comment\">;logging.config_file = logging.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[app:sync_app]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:AnkiServer#sync_app</span><br><span class=\"line\"><span class=\"attr\">data_root</span> = ./collections</span><br><span class=\"line\"><span class=\"attr\">base_url</span> = /sync/</span><br><span class=\"line\"><span class=\"attr\">base_media_url</span> = /msync/</span><br><span class=\"line\"><span class=\"attr\">session_db_path</span> = ./session.db</span><br><span class=\"line\"><span class=\"attr\">auth_db_path</span> = ./auth.db</span><br></pre></td></tr></table></figure>\r\n<p>如果是在 Termux 中运行 AnkiServer 的话, 以下文件中的路径都要改! 不知道路径在哪里的话, 用 <code>locate -r XXX$</code> 通过正则表达式搜索. (<code>$</code> 匹配字符串末尾.)</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; supervisor-anki-server.conf , 这是个监控服务的配置文件, 需要放在 supervisor/conf.d/ 目录中.</span><br><span class=\"line\">[program:anki-server]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; The command used to execute the Anki Server. If you setup a virtualenv like described</span><br><span class=\"line\">; in the README.md, then be sure to point to the &quot;paster&quot; command inside of it! All files</span><br><span class=\"line\">; are relative to the &quot;directory&quot; variable given below</span><br><span class=\"line\">; command=/usr/local/bin/paster serve production.ini</span><br><span class=\"line\">command= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令</span><br><span class=\"line\"></span><br><span class=\"line\">; This is the directory to execute the Anki Server from. All files will be relative to this</span><br><span class=\"line\">; directory. This includes arguments to the &quot;command&quot; above and in the configuration files.</span><br><span class=\"line\">directory=/var/lib/anki</span><br><span class=\"line\"></span><br><span class=\"line\">; This is the user the Anki Server will run as. It should have permission to read and write</span><br><span class=\"line\">; the Anki collections referred to in the configuration file, but, for security reasons it</span><br><span class=\"line\">; shouldn&apos;t be &quot;root&quot;!</span><br><span class=\"line\">user=u0_174     ; 需要配置为运行 AnkiServer 的 Linux 用户名</span><br><span class=\"line\"></span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\"></span><br><span class=\"line\">; Sometimes necessary if Anki is complaining about a UTF-8 locale. Make sure</span><br><span class=\"line\">; that the local you pick is actually installed on your system.</span><br><span class=\"line\">;environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8,LC_LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>\r\n<p>但是我的手机没法使用 <code>supervisor</code> 而现在大多数 Linux 系统都使用 <code>systemd</code> 了. 所以这个文件的东西看看就好.</p>\r\n<h2 id=\"小结\">小结</h2>\r\n<p>需要注意的几条配置:</p>\r\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 production.ini 中</span></span><br><span class=\"line\"><span class=\"attr\">allowed_hosts</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>       # 允许使用服务的客户机的 IP 地址, 可设置为 <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span> 以允许任何 IP 连接.</span><br><span class=\"line\"><span class=\"attr\">host</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>        # 运行服务的主机 IP 地址</span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">18909</span>            # 服务使用的端口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 supervisor-anki-server.conf 中</span></span><br><span class=\"line\"><span class=\"comment\"># 这项内容可在配置 systemd 时用于参考</span></span><br><span class=\"line\"><span class=\"comment\">; command=/usr/local/bin/paster serve production.ini</span></span><br><span class=\"line\"><span class=\"attr\">command</span>= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"使用-ankiserver\">使用 AnkiServer</h1>\r\n<p>Anki server 主要通过 <code>/data/data/com.termux/files/usr/bin/ankiserverctl.py</code> 文件来运行.</p>\r\n<p>添加用户:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py adduser &lt;username&gt;           <span class=\"comment\"># 添加用户, 与 anki app 上的用户保持一致</span></span><br></pre></td></tr></table></figure>\r\n<p>测试服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py debug</span><br></pre></td></tr></table></figure>\r\n<p>启动服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py start</span><br></pre></td></tr></table></figure>\r\n<p>停止服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py stop</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载-ankiserver\">下载 AnkiServer</h1>\r\n<p><a href=\"https://pypi.org/project/AnkiServer/2.0.6/\" target=\"_blank\" rel=\"noopener\">AnkiServer</a> 基于 Python2 运行.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip2 install AnkiServer</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"配置-ankiserver\">配置 AnkiServer</h1>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 创建一个单独的目录, 要同步的文件存储在此.</li>\r\n<li>从 <code>python_prefix/lib/python2.X/site-packages/AnkiServer-2.X.X-py2.X.egg/examples</code> 复制一个配置文件模板. 不过在下载的发行版中没有发现该文件, 于是去 <a href=\"https://github.com/dsnopek/anki-sync-server\" target=\"_blank\" rel=\"noopener\">GitHub 项目页</a> 找了. 注意有两个重要的配置文件. 使用方法如下:</li>\r\n</ol>\r\n<blockquote>\r\n<p>无意间发现模板被放在这个目录下了. <code>/data/data/com.termux/files/usr/examples</code></p>\r\n</blockquote>\r\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># example.ini 需要重命名为 production.ini 并移动到为 AnkiServer 创建的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[server:main]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:AnkiServer#server</span><br><span class=\"line\"><span class=\"attr\">host</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>        # 运行服务的主机 IP 地址</span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">27701</span>            # 服务使用的端口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[filter-app:main]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:Paste#translogger</span><br><span class=\"line\"><span class=\"attr\">next</span> = real</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[app:real]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:Paste#urlmap</span><br><span class=\"line\">/ = rest_app</span><br><span class=\"line\">/msync = sync_app</span><br><span class=\"line\">/sync = sync_app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[app:rest_app]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:AnkiServer#rest_app</span><br><span class=\"line\"><span class=\"attr\">data_root</span> = ./collections</span><br><span class=\"line\"><span class=\"attr\">allowed_hosts</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>       # 允许使用服务的客户机的 IP 地址, 可设置为 <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span> 以允许任何 IP 连接.</span><br><span class=\"line\"><span class=\"comment\">;logging.config_file = logging.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[app:sync_app]</span></span><br><span class=\"line\"><span class=\"attr\">use</span> = egg:AnkiServer#sync_app</span><br><span class=\"line\"><span class=\"attr\">data_root</span> = ./collections</span><br><span class=\"line\"><span class=\"attr\">base_url</span> = /sync/</span><br><span class=\"line\"><span class=\"attr\">base_media_url</span> = /msync/</span><br><span class=\"line\"><span class=\"attr\">session_db_path</span> = ./session.db</span><br><span class=\"line\"><span class=\"attr\">auth_db_path</span> = ./auth.db</span><br></pre></td></tr></table></figure>\r\n<p>如果是在 Termux 中运行 AnkiServer 的话, 以下文件中的路径都要改! 不知道路径在哪里的话, 用 <code>locate -r XXX$</code> 通过正则表达式搜索. (<code>$</code> 匹配字符串末尾.)</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; supervisor-anki-server.conf , 这是个监控服务的配置文件, 需要放在 supervisor/conf.d/ 目录中.</span><br><span class=\"line\">[program:anki-server]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; The command used to execute the Anki Server. If you setup a virtualenv like described</span><br><span class=\"line\">; in the README.md, then be sure to point to the &quot;paster&quot; command inside of it! All files</span><br><span class=\"line\">; are relative to the &quot;directory&quot; variable given below</span><br><span class=\"line\">; command=/usr/local/bin/paster serve production.ini</span><br><span class=\"line\">command= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令</span><br><span class=\"line\"></span><br><span class=\"line\">; This is the directory to execute the Anki Server from. All files will be relative to this</span><br><span class=\"line\">; directory. This includes arguments to the &quot;command&quot; above and in the configuration files.</span><br><span class=\"line\">directory=/var/lib/anki</span><br><span class=\"line\"></span><br><span class=\"line\">; This is the user the Anki Server will run as. It should have permission to read and write</span><br><span class=\"line\">; the Anki collections referred to in the configuration file, but, for security reasons it</span><br><span class=\"line\">; shouldn&apos;t be &quot;root&quot;!</span><br><span class=\"line\">user=u0_174     ; 需要配置为运行 AnkiServer 的 Linux 用户名</span><br><span class=\"line\"></span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\"></span><br><span class=\"line\">; Sometimes necessary if Anki is complaining about a UTF-8 locale. Make sure</span><br><span class=\"line\">; that the local you pick is actually installed on your system.</span><br><span class=\"line\">;environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8,LC_LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>\r\n<p>但是我的手机没法使用 <code>supervisor</code> 而现在大多数 Linux 系统都使用 <code>systemd</code> 了. 所以这个文件的东西看看就好.</p>\r\n<h2 id=\"小结\">小结</h2>\r\n<p>需要注意的几条配置:</p>\r\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 production.ini 中</span></span><br><span class=\"line\"><span class=\"attr\">allowed_hosts</span> = <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>       # 允许使用服务的客户机的 IP 地址, 可设置为 <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span> 以允许任何 IP 连接.</span><br><span class=\"line\"><span class=\"attr\">host</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>        # 运行服务的主机 IP 地址</span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">18909</span>            # 服务使用的端口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 supervisor-anki-server.conf 中</span></span><br><span class=\"line\"><span class=\"comment\"># 这项内容可在配置 systemd 时用于参考</span></span><br><span class=\"line\"><span class=\"comment\">; command=/usr/local/bin/paster serve production.ini</span></span><br><span class=\"line\"><span class=\"attr\">command</span>= /data/data/com.termux/files/usr/bin/paster serve production.ini    ; 用于运行服务的命令</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"使用-ankiserver\">使用 AnkiServer</h1>\r\n<p>Anki server 主要通过 <code>/data/data/com.termux/files/usr/bin/ankiserverctl.py</code> 文件来运行.</p>\r\n<p>添加用户:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py adduser &lt;username&gt;           <span class=\"comment\"># 添加用户, 与 anki app 上的用户保持一致</span></span><br></pre></td></tr></table></figure>\r\n<p>测试服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py debug</span><br></pre></td></tr></table></figure>\r\n<p>启动服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py start</span><br></pre></td></tr></table></figure>\r\n<p>停止服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankiserverctl.py stop</span><br></pre></td></tr></table></figure>\r\n"},{"_content":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</pre></code>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)","source":"assert/js/src/insert_local_text.js","raw":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</pre></code>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)","date":"2018-08-23T07:55:08.464Z","updated":"2018-08-18T06:27:56.000Z","path":"assert/js/src/insert_local_text.js","layout":"false","title":"","comments":1,"_id":"cjl8vtwgn0043w8lku5uqfukr","content":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</code></pre>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)","site":{"data":{}},"excerpt":"","more":"// function readfile(url) {\n\n// }\n\nvar url = \"/assert/repos/docker/docker.run.help\"\n    //var file_content = readfile(url)\nvar file_content = \"TEST\"\nvar string = \"<pre><code>\" + file_content + \"</code></pre>\"\ndocument.getElementById(\"to_instead\").innerHTML(string)"}],"Post":[{"title":"[PyNote]-json解析","date":"2018-08-20T01:39:14.000Z","_content":"\n# Python 的 json 模块\n\n`json` 是 Python 的标准库之一, 用于解析 `.json` 格式的文件.\n\n在模块中提供了 `dumps()` , `dump()` 函数用于编码/解码\n\n","source":"_drafts/PyNote-json解析.md","raw":"---\ntitle: '[PyNote]-json解析'\ntags:\n  - Python\n  - Note\n  - json\ncategories:\n  - Python\ndate: 2018-08-20 09:39:14\n---\n\n# Python 的 json 模块\n\n`json` 是 Python 的标准库之一, 用于解析 `.json` 格式的文件.\n\n在模块中提供了 `dumps()` , `dump()` 函数用于编码/解码\n\n","slug":"PyNote-json解析","published":0,"updated":"2018-08-22T19:31:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw5y0000w8lkhustrq5q","content":"<h1 id=\"python-的-json-模块\">Python 的 json 模块</h1>\r\n<p><code>json</code> 是 Python 的标准库之一, 用于解析 <code>.json</code> 格式的文件.</p>\r\n<p>在模块中提供了 <code>dumps()</code> , <code>dump()</code> 函数用于编码/解码</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-的-json-模块\">Python 的 json 模块</h1>\r\n<p><code>json</code> 是 Python 的标准库之一, 用于解析 <code>.json</code> 格式的文件.</p>\r\n<p>在模块中提供了 <code>dumps()</code> , <code>dump()</code> 函数用于编码/解码</p>\r\n"},{"title":"HTML5-link标签","date":"2018-08-18T13:29:36.000Z","_content":"\n# <link> 是干什么用的?\n\n希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂...\n\n后来看了博客的 public 文件夹, 发现首页的 `index.html` 通过 \n\n```html\n<link itemprop=\"mainEntityOfPage\" href=\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\">\n```\n\n来插入文章. 于是针对性地搜索了一番.\n\n---\n\n- `<link>` 标签定义两个连接文档的关系\n- `<link>` 元素是空元素, 它只有属性\n> 也就是说 `<link>` 标签总是这样子的: `<link 属性列表 />`\n- `<link>` 元素有以下属性:\n    - `href` 定义目标文档或资源的位置. 可使用绝对路径或相对路径.\n    - `hreflang` 定义目标 URL 的基准语言\n    - `media` 规定文档显示设备.\n    - `rel`  定义当前文档与目标的关系\n        - `alternate` \n        - `author`\n        - `dns-prefetch`\n        - `help`\n        - `icon`\n        - `license`\n        - `next`\n        - `pingback`\n        - `preconnect`\n        - `prefetch`\n        - `preload`\n        - `prerender`\n        - `prev`\n        - `search`\n        - `stylesheet` 表明目标是当前文档的样式表\n    - `type` 规定目标 URL 的 MIME 类型\n        - `text/css` 表明是一个 CSS 文件","source":"_drafts/HTML5-link标签.md","raw":"---\ntitle: HTML5-link标签\ndate: 2018-08-18 21:29:36\ntags:\n    - HTML5\ncategories:\n    - 网站\n---\n\n# <link> 是干什么用的?\n\n希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂...\n\n后来看了博客的 public 文件夹, 发现首页的 `index.html` 通过 \n\n```html\n<link itemprop=\"mainEntityOfPage\" href=\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\">\n```\n\n来插入文章. 于是针对性地搜索了一番.\n\n---\n\n- `<link>` 标签定义两个连接文档的关系\n- `<link>` 元素是空元素, 它只有属性\n> 也就是说 `<link>` 标签总是这样子的: `<link 属性列表 />`\n- `<link>` 元素有以下属性:\n    - `href` 定义目标文档或资源的位置. 可使用绝对路径或相对路径.\n    - `hreflang` 定义目标 URL 的基准语言\n    - `media` 规定文档显示设备.\n    - `rel`  定义当前文档与目标的关系\n        - `alternate` \n        - `author`\n        - `dns-prefetch`\n        - `help`\n        - `icon`\n        - `license`\n        - `next`\n        - `pingback`\n        - `preconnect`\n        - `prefetch`\n        - `preload`\n        - `prerender`\n        - `prev`\n        - `search`\n        - `stylesheet` 表明目标是当前文档的样式表\n    - `type` 规定目标 URL 的 MIME 类型\n        - `text/css` 表明是一个 CSS 文件","slug":"HTML5-link标签","published":0,"updated":"2018-08-19T10:17:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6i0001w8lk73wnfm46","content":"<h1 id=\"是干什么用的\"><link> 是干什么用的?</h1>\r\n<p>希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂...</p>\r\n<p>后来看了博客的 public 文件夹, 发现首页的 <code>index.html</code> 通过</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">\"mainEntityOfPage\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<p>来插入文章. 于是针对性地搜索了一番.</p>\r\n<hr>\r\n<ul>\r\n<li><code>&lt;link&gt;</code> 标签定义两个连接文档的关系</li>\r\n<li><code>&lt;link&gt;</code> 元素是空元素, 它只有属性 &gt; 也就是说 <code>&lt;link&gt;</code> 标签总是这样子的: <code>&lt;link 属性列表 /&gt;</code></li>\r\n<li><code>&lt;link&gt;</code> 元素有以下属性:\r\n<ul>\r\n<li><code>href</code> 定义目标文档或资源的位置. 可使用绝对路径或相对路径.</li>\r\n<li><code>hreflang</code> 定义目标 URL 的基准语言</li>\r\n<li><code>media</code> 规定文档显示设备.</li>\r\n<li><code>rel</code> 定义当前文档与目标的关系\r\n<ul>\r\n<li><code>alternate</code></li>\r\n<li><code>author</code></li>\r\n<li><code>dns-prefetch</code></li>\r\n<li><code>help</code></li>\r\n<li><code>icon</code></li>\r\n<li><code>license</code></li>\r\n<li><code>next</code></li>\r\n<li><code>pingback</code></li>\r\n<li><code>preconnect</code></li>\r\n<li><code>prefetch</code></li>\r\n<li><code>preload</code></li>\r\n<li><code>prerender</code></li>\r\n<li><code>prev</code></li>\r\n<li><code>search</code></li>\r\n<li><code>stylesheet</code> 表明目标是当前文档的样式表</li>\r\n</ul></li>\r\n<li><code>type</code> 规定目标 URL 的 MIME 类型\r\n<ul>\r\n<li><code>text/css</code> 表明是一个 CSS 文件</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"是干什么用的\"><link> 是干什么用的?</h1>\r\n<p>希望在一个网页中嵌入其他网页的文本, 上网搜了不少, 先是搜了 Hexo 是否有相关的功能, 发现并没有. 然后又考虑使用 JavaScript, 但对于一个从来没学过 HTML+CSS+JavaScript 的新手来说, 根本看不懂...</p>\r\n<p>后来看了博客的 public 文件夹, 发现首页的 <code>index.html</code> 通过</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">\"mainEntityOfPage\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://zombie110year.github.io/public/public/2018/08/docker笔记/\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<p>来插入文章. 于是针对性地搜索了一番.</p>\r\n<hr>\r\n<ul>\r\n<li><code>&lt;link&gt;</code> 标签定义两个连接文档的关系</li>\r\n<li><code>&lt;link&gt;</code> 元素是空元素, 它只有属性 &gt; 也就是说 <code>&lt;link&gt;</code> 标签总是这样子的: <code>&lt;link 属性列表 /&gt;</code></li>\r\n<li><code>&lt;link&gt;</code> 元素有以下属性:\r\n<ul>\r\n<li><code>href</code> 定义目标文档或资源的位置. 可使用绝对路径或相对路径.</li>\r\n<li><code>hreflang</code> 定义目标 URL 的基准语言</li>\r\n<li><code>media</code> 规定文档显示设备.</li>\r\n<li><code>rel</code> 定义当前文档与目标的关系\r\n<ul>\r\n<li><code>alternate</code></li>\r\n<li><code>author</code></li>\r\n<li><code>dns-prefetch</code></li>\r\n<li><code>help</code></li>\r\n<li><code>icon</code></li>\r\n<li><code>license</code></li>\r\n<li><code>next</code></li>\r\n<li><code>pingback</code></li>\r\n<li><code>preconnect</code></li>\r\n<li><code>prefetch</code></li>\r\n<li><code>preload</code></li>\r\n<li><code>prerender</code></li>\r\n<li><code>prev</code></li>\r\n<li><code>search</code></li>\r\n<li><code>stylesheet</code> 表明目标是当前文档的样式表</li>\r\n</ul></li>\r\n<li><code>type</code> 规定目标 URL 的 MIME 类型\r\n<ul>\r\n<li><code>text/css</code> 表明是一个 CSS 文件</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"Docker-Samba","date":"2018-08-18T13:22:33.000Z","_content":"\n# 创建 Docker 数据卷 (volumes)\n\n```sh\ndocker volume create samba\n# 创建一个名为 samba 的数据卷.\n```\n\n```sh\n# 配置数据卷","source":"_drafts/Docker-Samba.md","raw":"---\ntitle: Docker-Samba\ndate: 2018-08-18 21:22:33\ntags:\n    - Samba\n    - Docker\ncategories:\n    - 日常\n---\n\n# 创建 Docker 数据卷 (volumes)\n\n```sh\ndocker volume create samba\n# 创建一个名为 samba 的数据卷.\n```\n\n```sh\n# 配置数据卷","slug":"Docker-Samba","published":0,"updated":"2018-08-18T13:28:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6l0004w8lk64q1438g","content":"<h1 id=\"创建-docker-数据卷-volumes\">创建 Docker 数据卷 (volumes)</h1>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create samba</span><br><span class=\"line\"><span class=\"comment\"># 创建一个名为 samba 的数据卷.</span></span><br></pre></td></tr></table></figure>\r\n<p>```sh # 配置数据卷</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建-docker-数据卷-volumes\">创建 Docker 数据卷 (volumes)</h1>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create samba</span><br><span class=\"line\"><span class=\"comment\"># 创建一个名为 samba 的数据卷.</span></span><br></pre></td></tr></table></figure>\r\n<p>```sh # 配置数据卷</p>\r\n"},{"title":"SSH 使用","date":"2018-08-21T16:18:20.000Z","_content":"\n# ssh-keygen\n\n使用 ssh-keygen 生成 公钥-私钥对.\n\n\n\n<!--\n# ssh 命令的参数\n\n- `-b`\n- `-c`\n- `-D`\n- `-E`\n- `-e`\n- `-F`\n- `-I`\n- `-e`\n- `-J`\n- `-L`\n- `-l`\n- `-m`\n- `-O`\n- `-o`\n- `-p`\n- `-Q`\n- `-R`\n- `-S`\n- `-W`\n- `-w`\n-->\n\n# ~/.ssh 下的配置文件\n\n## `known_hosts`\n\n位于客户端.\n\n记录 SSH 连接过的主机, 如果发现本次连接的主机在此有记录, 但有不符之处 (例如连接已有域名, 但 IP 地址不同) , 就会打印安全警报并退出.\n\n## `config`\n\n位于客户端.\n\n配置连接选项, 格式为:\n\n```\nHost mysite                     # 在本机登陆时使用的别名\n        HostName 192.168.1.2    # 连接目标的 IP 地址或域名\n        PreferredAuthentications publickey  # 连接方式, 采用 公钥-私钥对 方式\n        IdentityFile ~/.ssh/id-rsa      # 身份文件, 私钥文件的路径.\n        User root               # 登陆的用户\n        Port 8022               # 登陆的端口\n```\n\n从此, 以下两命令起到相同效果:\n\n```sh\nssh root@192.168.1.2 -p 8022 -i ~/.ssh/id-rsa\nssh mysite\n```\n\n## `authorized_keys`\n\n位于服务端.\n\n记录允许使用 公钥-私钥对 连接本机此用户的客户端的公钥.\n\n# /etc/ssh/ 下的配置文件\n\n此处配置文件用于配置服务端.\n\n# scp 与 sftp","source":"_drafts/SSH-使用.md","raw":"---\ntitle: SSH 使用\ntags:\n  - SSH\ncategories:\n  - 日常\ndate: 2018-08-22 00:18:20\n---\n\n# ssh-keygen\n\n使用 ssh-keygen 生成 公钥-私钥对.\n\n\n\n<!--\n# ssh 命令的参数\n\n- `-b`\n- `-c`\n- `-D`\n- `-E`\n- `-e`\n- `-F`\n- `-I`\n- `-e`\n- `-J`\n- `-L`\n- `-l`\n- `-m`\n- `-O`\n- `-o`\n- `-p`\n- `-Q`\n- `-R`\n- `-S`\n- `-W`\n- `-w`\n-->\n\n# ~/.ssh 下的配置文件\n\n## `known_hosts`\n\n位于客户端.\n\n记录 SSH 连接过的主机, 如果发现本次连接的主机在此有记录, 但有不符之处 (例如连接已有域名, 但 IP 地址不同) , 就会打印安全警报并退出.\n\n## `config`\n\n位于客户端.\n\n配置连接选项, 格式为:\n\n```\nHost mysite                     # 在本机登陆时使用的别名\n        HostName 192.168.1.2    # 连接目标的 IP 地址或域名\n        PreferredAuthentications publickey  # 连接方式, 采用 公钥-私钥对 方式\n        IdentityFile ~/.ssh/id-rsa      # 身份文件, 私钥文件的路径.\n        User root               # 登陆的用户\n        Port 8022               # 登陆的端口\n```\n\n从此, 以下两命令起到相同效果:\n\n```sh\nssh root@192.168.1.2 -p 8022 -i ~/.ssh/id-rsa\nssh mysite\n```\n\n## `authorized_keys`\n\n位于服务端.\n\n记录允许使用 公钥-私钥对 连接本机此用户的客户端的公钥.\n\n# /etc/ssh/ 下的配置文件\n\n此处配置文件用于配置服务端.\n\n# scp 与 sftp","slug":"SSH-使用","published":0,"updated":"2018-08-23T06:04:37.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6n0005w8lketmhpycc","content":"<h1 id=\"ssh-keygen\">ssh-keygen</h1>\r\n<p>使用 ssh-keygen 生成 公钥-私钥对.</p>\r\n<!--\r\n# ssh 命令的参数\r\n\r\n- `-b`\r\n- `-c`\r\n- `-D`\r\n- `-E`\r\n- `-e`\r\n- `-F`\r\n- `-I`\r\n- `-e`\r\n- `-J`\r\n- `-L`\r\n- `-l`\r\n- `-m`\r\n- `-O`\r\n- `-o`\r\n- `-p`\r\n- `-Q`\r\n- `-R`\r\n- `-S`\r\n- `-W`\r\n- `-w`\r\n-->\r\n<h1 id=\"ssh-下的配置文件\">~/.ssh 下的配置文件</h1>\r\n<h2 id=\"known_hosts\"><code>known_hosts</code></h2>\r\n<p>位于客户端.</p>\r\n<p>记录 SSH 连接过的主机, 如果发现本次连接的主机在此有记录, 但有不符之处 (例如连接已有域名, 但 IP 地址不同) , 就会打印安全警报并退出.</p>\r\n<h2 id=\"config\"><code>config</code></h2>\r\n<p>位于客户端.</p>\r\n<p>配置连接选项, 格式为:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host mysite                     # 在本机登陆时使用的别名</span><br><span class=\"line\">        HostName 192.168.1.2    # 连接目标的 IP 地址或域名</span><br><span class=\"line\">        PreferredAuthentications publickey  # 连接方式, 采用 公钥-私钥对 方式</span><br><span class=\"line\">        IdentityFile ~/.ssh/id-rsa      # 身份文件, 私钥文件的路径.</span><br><span class=\"line\">        User root               # 登陆的用户</span><br><span class=\"line\">        Port 8022               # 登陆的端口</span><br></pre></td></tr></table></figure>\r\n<p>从此, 以下两命令起到相同效果:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.1.2 -p 8022 -i ~/.ssh/id-rsa</span><br><span class=\"line\">ssh mysite</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"authorized_keys\"><code>authorized_keys</code></h2>\r\n<p>位于服务端.</p>\r\n<p>记录允许使用 公钥-私钥对 连接本机此用户的客户端的公钥.</p>\r\n<h1 id=\"etcssh-下的配置文件\">/etc/ssh/ 下的配置文件</h1>\r\n<p>此处配置文件用于配置服务端.</p>\r\n<h1 id=\"scp-与-sftp\">scp 与 sftp</h1>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ssh-keygen\">ssh-keygen</h1>\r\n<p>使用 ssh-keygen 生成 公钥-私钥对.</p>\r\n<!--\r\n# ssh 命令的参数\r\n\r\n- `-b`\r\n- `-c`\r\n- `-D`\r\n- `-E`\r\n- `-e`\r\n- `-F`\r\n- `-I`\r\n- `-e`\r\n- `-J`\r\n- `-L`\r\n- `-l`\r\n- `-m`\r\n- `-O`\r\n- `-o`\r\n- `-p`\r\n- `-Q`\r\n- `-R`\r\n- `-S`\r\n- `-W`\r\n- `-w`\r\n-->\r\n<h1 id=\"ssh-下的配置文件\">~/.ssh 下的配置文件</h1>\r\n<h2 id=\"known_hosts\"><code>known_hosts</code></h2>\r\n<p>位于客户端.</p>\r\n<p>记录 SSH 连接过的主机, 如果发现本次连接的主机在此有记录, 但有不符之处 (例如连接已有域名, 但 IP 地址不同) , 就会打印安全警报并退出.</p>\r\n<h2 id=\"config\"><code>config</code></h2>\r\n<p>位于客户端.</p>\r\n<p>配置连接选项, 格式为:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host mysite                     # 在本机登陆时使用的别名</span><br><span class=\"line\">        HostName 192.168.1.2    # 连接目标的 IP 地址或域名</span><br><span class=\"line\">        PreferredAuthentications publickey  # 连接方式, 采用 公钥-私钥对 方式</span><br><span class=\"line\">        IdentityFile ~/.ssh/id-rsa      # 身份文件, 私钥文件的路径.</span><br><span class=\"line\">        User root               # 登陆的用户</span><br><span class=\"line\">        Port 8022               # 登陆的端口</span><br></pre></td></tr></table></figure>\r\n<p>从此, 以下两命令起到相同效果:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.1.2 -p 8022 -i ~/.ssh/id-rsa</span><br><span class=\"line\">ssh mysite</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"authorized_keys\"><code>authorized_keys</code></h2>\r\n<p>位于服务端.</p>\r\n<p>记录允许使用 公钥-私钥对 连接本机此用户的客户端的公钥.</p>\r\n<h1 id=\"etcssh-下的配置文件\">/etc/ssh/ 下的配置文件</h1>\r\n<p>此处配置文件用于配置服务端.</p>\r\n<h1 id=\"scp-与-sftp\">scp 与 sftp</h1>\r\n"},{"title":"[PyNote]-定义函数","mathjax":false,"date":"2018-08-12T16:35:59.000Z","_content":"\n# 语法\n\n```py\ndef function_name(args):\n    pass\n```\n\n别忘了冒号与缩进!\n\n# 参数\n\n定义函数时需要向函数设定形式参数表.\n\n设置形参表有以下格式:\n\n- 一般参数\n- 默认参数\n- 可变参数\n\n以下是例子:\n\n```py\ndef func(a, b, c=12, *args, **kwargs):\n    pass\n```\n\n以上的 `a` , `b` 就是一般参数, `c=12` 就是一个默认参数, 而 `*args` 和 `**kwargs` 则是可变参数.\n\n在调用函数的时候, 一般参数和默认参数可以使用按位置传参, 和按命名传参的方式传递实际参数.\n如果没有向默认参数传参, 则该参数会被设置为默认参数.\n而可变参数则会把前面未给定名称的参数储存起来, `*args` 将会就以元组的形式存储所有多余的按位置传参的参数,\n而 `**kwargs` 则会以字典的形式存储命名参数. `*args` 和 `**kwargs` 可以改成其他名称.\n\n例如\n\n```py\nfunc(1,b=2,c=3)\n```\n\n中, `1` 被赋值给了 `a` , 而 `b` 和 `c` 则分别被赋值为 `2`, `3`. 而没有其他多余的\n\n- **对于非可变参数, 按位置赋值的参数必须在整个列表的最前方, 按命名赋值的参数可以乱序排列.**\n- **对于可变参数, \n\n# 返回值","source":"_drafts/pynote-定义函数.md","raw":"---\ntitle: '[PyNote]-定义函数'\nmathjax: false\ntags:\n  - null\ncategories:\n  - null\ndate: 2018-08-13 00:35:59\n---\n\n# 语法\n\n```py\ndef function_name(args):\n    pass\n```\n\n别忘了冒号与缩进!\n\n# 参数\n\n定义函数时需要向函数设定形式参数表.\n\n设置形参表有以下格式:\n\n- 一般参数\n- 默认参数\n- 可变参数\n\n以下是例子:\n\n```py\ndef func(a, b, c=12, *args, **kwargs):\n    pass\n```\n\n以上的 `a` , `b` 就是一般参数, `c=12` 就是一个默认参数, 而 `*args` 和 `**kwargs` 则是可变参数.\n\n在调用函数的时候, 一般参数和默认参数可以使用按位置传参, 和按命名传参的方式传递实际参数.\n如果没有向默认参数传参, 则该参数会被设置为默认参数.\n而可变参数则会把前面未给定名称的参数储存起来, `*args` 将会就以元组的形式存储所有多余的按位置传参的参数,\n而 `**kwargs` 则会以字典的形式存储命名参数. `*args` 和 `**kwargs` 可以改成其他名称.\n\n例如\n\n```py\nfunc(1,b=2,c=3)\n```\n\n中, `1` 被赋值给了 `a` , 而 `b` 和 `c` 则分别被赋值为 `2`, `3`. 而没有其他多余的\n\n- **对于非可变参数, 按位置赋值的参数必须在整个列表的最前方, 按命名赋值的参数可以乱序排列.**\n- **对于可变参数, \n\n# 返回值","slug":"pynote-定义函数","published":0,"updated":"2018-08-23T01:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6o0006w8lkzzxji0jy","content":"<h1 id=\"语法\">语法</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function_name</span><span class=\"params\">(args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>别忘了冒号与缩进!</p>\r\n<h1 id=\"参数\">参数</h1>\r\n<p>定义函数时需要向函数设定形式参数表.</p>\r\n<p>设置形参表有以下格式:</p>\r\n<ul>\r\n<li>一般参数</li>\r\n<li>默认参数</li>\r\n<li>可变参数</li>\r\n</ul>\r\n<p>以下是例子:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, b, c=<span class=\"number\">12</span>, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>以上的 <code>a</code> , <code>b</code> 就是一般参数, <code>c=12</code> 就是一个默认参数, 而 <code>*args</code> 和 <code>**kwargs</code> 则是可变参数.</p>\r\n<p>在调用函数的时候, 一般参数和默认参数可以使用按位置传参, 和按命名传参的方式传递实际参数. 如果没有向默认参数传参, 则该参数会被设置为默认参数. 而可变参数则会把前面未给定名称的参数储存起来, <code>*args</code> 将会就以元组的形式存储所有多余的按位置传参的参数, 而 <code>**kwargs</code> 则会以字典的形式存储命名参数. <code>*args</code> 和 <code>**kwargs</code> 可以改成其他名称.</p>\r\n<p>例如</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func(<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\r\n<p>中, <code>1</code> 被赋值给了 <code>a</code> , 而 <code>b</code> 和 <code>c</code> 则分别被赋值为 <code>2</code>, <code>3</code>. 而没有其他多余的</p>\r\n<ul>\r\n<li><strong>对于非可变参数, 按位置赋值的参数必须在整个列表的最前方, 按命名赋值的参数可以乱序排列.</strong></li>\r\n<li>**对于可变参数,</li>\r\n</ul>\r\n<h1 id=\"返回值\">返回值</h1>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"语法\">语法</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function_name</span><span class=\"params\">(args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>别忘了冒号与缩进!</p>\r\n<h1 id=\"参数\">参数</h1>\r\n<p>定义函数时需要向函数设定形式参数表.</p>\r\n<p>设置形参表有以下格式:</p>\r\n<ul>\r\n<li>一般参数</li>\r\n<li>默认参数</li>\r\n<li>可变参数</li>\r\n</ul>\r\n<p>以下是例子:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, b, c=<span class=\"number\">12</span>, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>以上的 <code>a</code> , <code>b</code> 就是一般参数, <code>c=12</code> 就是一个默认参数, 而 <code>*args</code> 和 <code>**kwargs</code> 则是可变参数.</p>\r\n<p>在调用函数的时候, 一般参数和默认参数可以使用按位置传参, 和按命名传参的方式传递实际参数. 如果没有向默认参数传参, 则该参数会被设置为默认参数. 而可变参数则会把前面未给定名称的参数储存起来, <code>*args</code> 将会就以元组的形式存储所有多余的按位置传参的参数, 而 <code>**kwargs</code> 则会以字典的形式存储命名参数. <code>*args</code> 和 <code>**kwargs</code> 可以改成其他名称.</p>\r\n<p>例如</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func(<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\r\n<p>中, <code>1</code> 被赋值给了 <code>a</code> , 而 <code>b</code> 和 <code>c</code> 则分别被赋值为 <code>2</code>, <code>3</code>. 而没有其他多余的</p>\r\n<ul>\r\n<li><strong>对于非可变参数, 按位置赋值的参数必须在整个列表的最前方, 按命名赋值的参数可以乱序排列.</strong></li>\r\n<li>**对于可变参数,</li>\r\n</ul>\r\n<h1 id=\"返回值\">返回值</h1>\r\n"},{"_content":"# Termux: API\n\n附加应用程序, 它将设备功能作为 API 公开给 Termux 中的命令行程序.\n\n## 内容\n\n0. 安装\n    0. 安装 `termux-api` 包\n    0. 设置\n0. 当前的 API 实现\n0. 用法\n\n# 安装\n\n[F-Droid](https://f-droid.org/packages/com.termux.api/)\n\n[Google Play](https://play.google.com/store/apps/details?id=com.termux.api)\n\n**重要提示: 请勿在 Google Play 和 F-Droid 之间混合安装 Termux 和它的扩展程序.**  从这些 Internet 门户混合安装时存在兼容性问题. 这是因为每个下载站都使用一个特定的密钥来安装 Termux 及其扩展.\n\n## 安装 Termux-api 包\n\n在安装了 `Termux: API` 的 `.apk` 包之后, 还需要在 Termux 中安装 `termux-api`.\n\n```sh\npkg install termux-api\n# 或者使用 apt \napt install termux-api\n```\n\n## 设置\n\n在 Android 7 上, 您必须通过进入 \"设置/受保护的应用程序\" 菜单来来保护 \"Termux: API\", 否则, 调用像 `termux-battery-status` 这样的 API 将永远挂起.\n\n# 当前的 API 实现\n\n- `termux-battery-status` 获取设备的电池信息.\n- `termux-brightness` 设置屏幕亮度, 值域为 [0, 255].\n- `termux-call-log` 列出历史通话记录.\n- `termux-camera-info` 获取设备摄像头的信息.\n- `termux-camera-photo` 调用相机拍摄照片, 保存为 `JPEG` 格式.\n- `termux-clipboard-get` 获取系统剪贴板.\n- `termux-clipboard-set` 设置系统剪贴板.\n- `termux-contact-list` 列出联系人信息.\n- `termux-dialog` 显示文本输入对话框.\n- `termux-download` 使用系统下载器下载资源.\n- `termux-fingerprint` 在设备上使用指纹传感器验证身份.\n- `termux-infrared-frequencies` 查询红外发射器支持的载波频率.\n- `termux-infrared-transmit` 传输红外图案.\n- `termux-location` 获取地理位置信息.\n- `termux-media-player` 播放媒体文件.\n- `termux-media-scan` MediaScanner 界面, 使 Android 相册可以看到文件更改.\n- `termux-microphone-record` 使用设备上的麦克风录制.\n- `termux-notification` 显示系统通知.\n- `termux-norification-remove` 删除之前使用 `termux-notification --id` 显示的通知.\n- `termux-sensor` 获取有关传感器类型和实时数据的信息.\n- `termux-share` 共享参数指定的文件或在 stdin 上接收的文本.\n- `termux-sms-inbox` 列出收到的短信.\n- `termux-sms-send` 将 SMS 信息发送到指定号码.\n- `termux-storage-get` 从系统请求文件, 并将其输出到指定的文件.\n- `termux-telephony-call` 拨打电话号码.\n- `termux-telephony-cellinfo` 从设备上的所有无线电获取有关所有观察到的小区信息的信息, 包括主要和相邻小区.\n- `termux-telephony-deviceinfo` 获取有关设备的信息.\n- `termux-toast` 显示临时弹出通知.\n- `termux-torch` 在设备上切换 LED 灯.\n- `termux-tts-engines` 获取可用的TTS引擎的相关信息.\n- `termux-tts-speak` 使用系统 TTS 转换文本到语音.\n- `termux-vibrate` 振动设备.\n- `termux-volume` 更改系统音量.\n- `termux-wallpaper` 更改桌面壁纸.\n- `termux-wifi-connectioninfo` 获取当前连接的 WIFI 信息.\n- `termux-wifi-enable` 连接/断开 WIFI.\n- `termux-wifi-scaninfo` 获取上次 WIFI 扫描信息.\n\n# 用法\n\n可以在脚本或者交互式 Shell 中使用 API 命令.\n\n一个使用 `termux-clipboard API` 的例子:\n\n```sh\n$ echo hello | termux-clipboard-set\n$ termux-clipboard-get\nhello\n```","source":"_drafts/Termux-API.md","raw":"# Termux: API\n\n附加应用程序, 它将设备功能作为 API 公开给 Termux 中的命令行程序.\n\n## 内容\n\n0. 安装\n    0. 安装 `termux-api` 包\n    0. 设置\n0. 当前的 API 实现\n0. 用法\n\n# 安装\n\n[F-Droid](https://f-droid.org/packages/com.termux.api/)\n\n[Google Play](https://play.google.com/store/apps/details?id=com.termux.api)\n\n**重要提示: 请勿在 Google Play 和 F-Droid 之间混合安装 Termux 和它的扩展程序.**  从这些 Internet 门户混合安装时存在兼容性问题. 这是因为每个下载站都使用一个特定的密钥来安装 Termux 及其扩展.\n\n## 安装 Termux-api 包\n\n在安装了 `Termux: API` 的 `.apk` 包之后, 还需要在 Termux 中安装 `termux-api`.\n\n```sh\npkg install termux-api\n# 或者使用 apt \napt install termux-api\n```\n\n## 设置\n\n在 Android 7 上, 您必须通过进入 \"设置/受保护的应用程序\" 菜单来来保护 \"Termux: API\", 否则, 调用像 `termux-battery-status` 这样的 API 将永远挂起.\n\n# 当前的 API 实现\n\n- `termux-battery-status` 获取设备的电池信息.\n- `termux-brightness` 设置屏幕亮度, 值域为 [0, 255].\n- `termux-call-log` 列出历史通话记录.\n- `termux-camera-info` 获取设备摄像头的信息.\n- `termux-camera-photo` 调用相机拍摄照片, 保存为 `JPEG` 格式.\n- `termux-clipboard-get` 获取系统剪贴板.\n- `termux-clipboard-set` 设置系统剪贴板.\n- `termux-contact-list` 列出联系人信息.\n- `termux-dialog` 显示文本输入对话框.\n- `termux-download` 使用系统下载器下载资源.\n- `termux-fingerprint` 在设备上使用指纹传感器验证身份.\n- `termux-infrared-frequencies` 查询红外发射器支持的载波频率.\n- `termux-infrared-transmit` 传输红外图案.\n- `termux-location` 获取地理位置信息.\n- `termux-media-player` 播放媒体文件.\n- `termux-media-scan` MediaScanner 界面, 使 Android 相册可以看到文件更改.\n- `termux-microphone-record` 使用设备上的麦克风录制.\n- `termux-notification` 显示系统通知.\n- `termux-norification-remove` 删除之前使用 `termux-notification --id` 显示的通知.\n- `termux-sensor` 获取有关传感器类型和实时数据的信息.\n- `termux-share` 共享参数指定的文件或在 stdin 上接收的文本.\n- `termux-sms-inbox` 列出收到的短信.\n- `termux-sms-send` 将 SMS 信息发送到指定号码.\n- `termux-storage-get` 从系统请求文件, 并将其输出到指定的文件.\n- `termux-telephony-call` 拨打电话号码.\n- `termux-telephony-cellinfo` 从设备上的所有无线电获取有关所有观察到的小区信息的信息, 包括主要和相邻小区.\n- `termux-telephony-deviceinfo` 获取有关设备的信息.\n- `termux-toast` 显示临时弹出通知.\n- `termux-torch` 在设备上切换 LED 灯.\n- `termux-tts-engines` 获取可用的TTS引擎的相关信息.\n- `termux-tts-speak` 使用系统 TTS 转换文本到语音.\n- `termux-vibrate` 振动设备.\n- `termux-volume` 更改系统音量.\n- `termux-wallpaper` 更改桌面壁纸.\n- `termux-wifi-connectioninfo` 获取当前连接的 WIFI 信息.\n- `termux-wifi-enable` 连接/断开 WIFI.\n- `termux-wifi-scaninfo` 获取上次 WIFI 扫描信息.\n\n# 用法\n\n可以在脚本或者交互式 Shell 中使用 API 命令.\n\n一个使用 `termux-clipboard API` 的例子:\n\n```sh\n$ echo hello | termux-clipboard-set\n$ termux-clipboard-get\nhello\n```","slug":"Termux-API","published":0,"date":"2018-08-22T16:18:06.392Z","updated":"2018-08-22T16:18:06.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6q0009w8lk1k8xg9uy","content":"<h1 id=\"termux-api\">Termux: API</h1>\r\n<p>附加应用程序, 它将设备功能作为 API 公开给 Termux 中的命令行程序.</p>\r\n<h2 id=\"内容\">内容</h2>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>安装\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>安装 <code>termux-api</code> 包</li>\r\n<li>设置</li>\r\n</ol></li>\r\n<li>当前的 API 实现</li>\r\n<li>用法</li>\r\n</ol>\r\n<h1 id=\"安装\">安装</h1>\r\n<p><a href=\"https://f-droid.org/packages/com.termux.api/\" target=\"_blank\" rel=\"noopener\">F-Droid</a></p>\r\n<p><a href=\"https://play.google.com/store/apps/details?id=com.termux.api\" target=\"_blank\" rel=\"noopener\">Google Play</a></p>\r\n<p><strong>重要提示: 请勿在 Google Play 和 F-Droid 之间混合安装 Termux 和它的扩展程序.</strong> 从这些 Internet 门户混合安装时存在兼容性问题. 这是因为每个下载站都使用一个特定的密钥来安装 Termux 及其扩展.</p>\r\n<h2 id=\"安装-termux-api-包\">安装 Termux-api 包</h2>\r\n<p>在安装了 <code>Termux: API</code> 的 <code>.apk</code> 包之后, 还需要在 Termux 中安装 <code>termux-api</code>.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install termux-api</span><br><span class=\"line\"><span class=\"comment\"># 或者使用 apt </span></span><br><span class=\"line\">apt install termux-api</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"设置\">设置</h2>\r\n<p>在 Android 7 上, 您必须通过进入 &quot;设置/受保护的应用程序&quot; 菜单来来保护 &quot;Termux: API&quot;, 否则, 调用像 <code>termux-battery-status</code> 这样的 API 将永远挂起.</p>\r\n<h1 id=\"当前的-api-实现\">当前的 API 实现</h1>\r\n<ul>\r\n<li><code>termux-battery-status</code> 获取设备的电池信息.</li>\r\n<li><code>termux-brightness</code> 设置屏幕亮度, 值域为 [0, 255].</li>\r\n<li><code>termux-call-log</code> 列出历史通话记录.</li>\r\n<li><code>termux-camera-info</code> 获取设备摄像头的信息.</li>\r\n<li><code>termux-camera-photo</code> 调用相机拍摄照片, 保存为 <code>JPEG</code> 格式.</li>\r\n<li><code>termux-clipboard-get</code> 获取系统剪贴板.</li>\r\n<li><code>termux-clipboard-set</code> 设置系统剪贴板.</li>\r\n<li><code>termux-contact-list</code> 列出联系人信息.</li>\r\n<li><code>termux-dialog</code> 显示文本输入对话框.</li>\r\n<li><code>termux-download</code> 使用系统下载器下载资源.</li>\r\n<li><code>termux-fingerprint</code> 在设备上使用指纹传感器验证身份.</li>\r\n<li><code>termux-infrared-frequencies</code> 查询红外发射器支持的载波频率.</li>\r\n<li><code>termux-infrared-transmit</code> 传输红外图案.</li>\r\n<li><code>termux-location</code> 获取地理位置信息.</li>\r\n<li><code>termux-media-player</code> 播放媒体文件.</li>\r\n<li><code>termux-media-scan</code> MediaScanner 界面, 使 Android 相册可以看到文件更改.</li>\r\n<li><code>termux-microphone-record</code> 使用设备上的麦克风录制.</li>\r\n<li><code>termux-notification</code> 显示系统通知.</li>\r\n<li><code>termux-norification-remove</code> 删除之前使用 <code>termux-notification --id</code> 显示的通知.</li>\r\n<li><code>termux-sensor</code> 获取有关传感器类型和实时数据的信息.</li>\r\n<li><code>termux-share</code> 共享参数指定的文件或在 stdin 上接收的文本.</li>\r\n<li><code>termux-sms-inbox</code> 列出收到的短信.</li>\r\n<li><code>termux-sms-send</code> 将 SMS 信息发送到指定号码.</li>\r\n<li><code>termux-storage-get</code> 从系统请求文件, 并将其输出到指定的文件.</li>\r\n<li><code>termux-telephony-call</code> 拨打电话号码.</li>\r\n<li><code>termux-telephony-cellinfo</code> 从设备上的所有无线电获取有关所有观察到的小区信息的信息, 包括主要和相邻小区.</li>\r\n<li><code>termux-telephony-deviceinfo</code> 获取有关设备的信息.</li>\r\n<li><code>termux-toast</code> 显示临时弹出通知.</li>\r\n<li><code>termux-torch</code> 在设备上切换 LED 灯.</li>\r\n<li><code>termux-tts-engines</code> 获取可用的TTS引擎的相关信息.</li>\r\n<li><code>termux-tts-speak</code> 使用系统 TTS 转换文本到语音.</li>\r\n<li><code>termux-vibrate</code> 振动设备.</li>\r\n<li><code>termux-volume</code> 更改系统音量.</li>\r\n<li><code>termux-wallpaper</code> 更改桌面壁纸.</li>\r\n<li><code>termux-wifi-connectioninfo</code> 获取当前连接的 WIFI 信息.</li>\r\n<li><code>termux-wifi-enable</code> 连接/断开 WIFI.</li>\r\n<li><code>termux-wifi-scaninfo</code> 获取上次 WIFI 扫描信息.</li>\r\n</ul>\r\n<h1 id=\"用法\">用法</h1>\r\n<p>可以在脚本或者交互式 Shell 中使用 API 命令.</p>\r\n<p>一个使用 <code>termux-clipboard API</code> 的例子:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> hello | termux-clipboard-set</span><br><span class=\"line\">$ termux-clipboard-get</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"termux-api\">Termux: API</h1>\r\n<p>附加应用程序, 它将设备功能作为 API 公开给 Termux 中的命令行程序.</p>\r\n<h2 id=\"内容\">内容</h2>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>安装\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>安装 <code>termux-api</code> 包</li>\r\n<li>设置</li>\r\n</ol></li>\r\n<li>当前的 API 实现</li>\r\n<li>用法</li>\r\n</ol>\r\n<h1 id=\"安装\">安装</h1>\r\n<p><a href=\"https://f-droid.org/packages/com.termux.api/\" target=\"_blank\" rel=\"noopener\">F-Droid</a></p>\r\n<p><a href=\"https://play.google.com/store/apps/details?id=com.termux.api\" target=\"_blank\" rel=\"noopener\">Google Play</a></p>\r\n<p><strong>重要提示: 请勿在 Google Play 和 F-Droid 之间混合安装 Termux 和它的扩展程序.</strong> 从这些 Internet 门户混合安装时存在兼容性问题. 这是因为每个下载站都使用一个特定的密钥来安装 Termux 及其扩展.</p>\r\n<h2 id=\"安装-termux-api-包\">安装 Termux-api 包</h2>\r\n<p>在安装了 <code>Termux: API</code> 的 <code>.apk</code> 包之后, 还需要在 Termux 中安装 <code>termux-api</code>.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install termux-api</span><br><span class=\"line\"><span class=\"comment\"># 或者使用 apt </span></span><br><span class=\"line\">apt install termux-api</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"设置\">设置</h2>\r\n<p>在 Android 7 上, 您必须通过进入 &quot;设置/受保护的应用程序&quot; 菜单来来保护 &quot;Termux: API&quot;, 否则, 调用像 <code>termux-battery-status</code> 这样的 API 将永远挂起.</p>\r\n<h1 id=\"当前的-api-实现\">当前的 API 实现</h1>\r\n<ul>\r\n<li><code>termux-battery-status</code> 获取设备的电池信息.</li>\r\n<li><code>termux-brightness</code> 设置屏幕亮度, 值域为 [0, 255].</li>\r\n<li><code>termux-call-log</code> 列出历史通话记录.</li>\r\n<li><code>termux-camera-info</code> 获取设备摄像头的信息.</li>\r\n<li><code>termux-camera-photo</code> 调用相机拍摄照片, 保存为 <code>JPEG</code> 格式.</li>\r\n<li><code>termux-clipboard-get</code> 获取系统剪贴板.</li>\r\n<li><code>termux-clipboard-set</code> 设置系统剪贴板.</li>\r\n<li><code>termux-contact-list</code> 列出联系人信息.</li>\r\n<li><code>termux-dialog</code> 显示文本输入对话框.</li>\r\n<li><code>termux-download</code> 使用系统下载器下载资源.</li>\r\n<li><code>termux-fingerprint</code> 在设备上使用指纹传感器验证身份.</li>\r\n<li><code>termux-infrared-frequencies</code> 查询红外发射器支持的载波频率.</li>\r\n<li><code>termux-infrared-transmit</code> 传输红外图案.</li>\r\n<li><code>termux-location</code> 获取地理位置信息.</li>\r\n<li><code>termux-media-player</code> 播放媒体文件.</li>\r\n<li><code>termux-media-scan</code> MediaScanner 界面, 使 Android 相册可以看到文件更改.</li>\r\n<li><code>termux-microphone-record</code> 使用设备上的麦克风录制.</li>\r\n<li><code>termux-notification</code> 显示系统通知.</li>\r\n<li><code>termux-norification-remove</code> 删除之前使用 <code>termux-notification --id</code> 显示的通知.</li>\r\n<li><code>termux-sensor</code> 获取有关传感器类型和实时数据的信息.</li>\r\n<li><code>termux-share</code> 共享参数指定的文件或在 stdin 上接收的文本.</li>\r\n<li><code>termux-sms-inbox</code> 列出收到的短信.</li>\r\n<li><code>termux-sms-send</code> 将 SMS 信息发送到指定号码.</li>\r\n<li><code>termux-storage-get</code> 从系统请求文件, 并将其输出到指定的文件.</li>\r\n<li><code>termux-telephony-call</code> 拨打电话号码.</li>\r\n<li><code>termux-telephony-cellinfo</code> 从设备上的所有无线电获取有关所有观察到的小区信息的信息, 包括主要和相邻小区.</li>\r\n<li><code>termux-telephony-deviceinfo</code> 获取有关设备的信息.</li>\r\n<li><code>termux-toast</code> 显示临时弹出通知.</li>\r\n<li><code>termux-torch</code> 在设备上切换 LED 灯.</li>\r\n<li><code>termux-tts-engines</code> 获取可用的TTS引擎的相关信息.</li>\r\n<li><code>termux-tts-speak</code> 使用系统 TTS 转换文本到语音.</li>\r\n<li><code>termux-vibrate</code> 振动设备.</li>\r\n<li><code>termux-volume</code> 更改系统音量.</li>\r\n<li><code>termux-wallpaper</code> 更改桌面壁纸.</li>\r\n<li><code>termux-wifi-connectioninfo</code> 获取当前连接的 WIFI 信息.</li>\r\n<li><code>termux-wifi-enable</code> 连接/断开 WIFI.</li>\r\n<li><code>termux-wifi-scaninfo</code> 获取上次 WIFI 扫描信息.</li>\r\n</ul>\r\n<h1 id=\"用法\">用法</h1>\r\n<p>可以在脚本或者交互式 Shell 中使用 API 命令.</p>\r\n<p>一个使用 <code>termux-clipboard API</code> 的例子:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> hello | termux-clipboard-set</span><br><span class=\"line\">$ termux-clipboard-get</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Docker笔记","mathjax":false,"date":"2018-08-17T19:09:11.000Z","_content":"\n# 在 Linux 上安装 Docker\n\n[GetDocker](https://get.docker.com) 准备了一个安装脚本.\n\n```sh\nwget -qO- https://get.docker.com | sh\n```\n\n# Docker 基本概念\n\nDocker 和虚拟机有所相似也有所不同:\n\n相似在于:\n\n- Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰\n\n不同在于:\n\n- Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的\"进程\". 而虚拟机则是直接从系统中划走了额定的资源.\n- Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.\n\n![Docker](https://www.docker.com/sites/default/files/Container%402x.png)\n![Vitual Machine](https://www.docker.com/sites/default/files/VM%402x.png)\n\n## Docker 镜像\n\nDocker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.\n\n## Docker 容器\n\n容器和镜像关系, 就类似于面对对象编程中的 `实例` 与 `类` 一样. 镜像是静态的定义, 容器是运行的实体.\n\n容器实质上是一个进程, 但是运行于独立的 `命名空间` . 容器可以有自己的用户, 系统配置, 文件系统.\n\n每一个容器运行时, 是以镜像为 `基础层` , 在其上创建一个当前容器的 `存储层`, 我们可以称这个为容器运行时读写而准备的存储层为 `容器存储层`.\n\n容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.\n\n按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 `数据卷(Volume)`, 或者绑定 `宿主目录` , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.\n\n数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失. \n\n## DockerFile\n\n# Docker 使用\n\n**运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组**\n\n```sh\n# 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.\nsudo cat /etc/group | grep docker\n# 2. 创建 docker 用户组\nsudo groupadd -g docker\n# 3. 将当前用户添加到 docker 用户组\nsudo usermode -aG docker current_user\n# 4. 重启 docker 服务, 使权限生效\nsudo systemctl restart docker\n# 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限\nsudo chmod a+rw /var/run/docker.sock\n```\n\n## 根据已有镜像运行容器\n\n```sh\ndocker run [image] [command]\n```\n\n- `docker run` 如果成功, 就会创建一个容器, 此容器基于 `image` 建立. `command` 是在容器中执行的指令.\n- 如果未在本地找到 `image` , docker 会自动前往官方仓库下载.\n\n一些有用的参数 [^docker.run.help]\n\n- `-a` 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. `--attach`\n- `-d` 后台运行, 并打印容器 ID, 长指令形式为 `--detach`\n- `-i` 开放容器的 stdin, 长指令形式为 `--interactive`\n- `-t` 创建一个终端(tty), `--tty`\n- `-h` 指定容器的 hostname, `--hostname`, 例如, `-h MyC` 或 `--hostname MyC` 将容器的 hostname 设置为 \"MyC\"\n- `--env` 设置环境变量\n- `--memory (int)bytes` 限制容器使用的内存, 例如 `--memory 1024m` 限制容器最多使用 1024MB 内存\n- `-p`, `--publish list` 公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n- `-P` 公开容器内部所有使用的端口, 随机映射到主机.\n\n## 使用参数运行容器\n\n```sh\ndocker run [options] [image] [command]\n```\n\n- 对 docker 使用的参数必须紧挨着 `docker run ` .\n\n### 交互式容器\n\n```sh\ndocker run -i -t ubuntu /bin/bash\n```\n\n- `-i` 参数表示允许向容器内的 stdin 输入.\n- `-t` 参数表示向容器外部生成一个终端.\n\n当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境.\n输入 `exit` 返回主机的 Shell, 同时, 容器被停止.\n\n```\nc64513b74145: Already exists\n01b8b12bad90: Already exists\nc5d85cf7a05f: Already exists\nb6b268720157: Already exists\ne12192999ff1: Already exists\nDigest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7\nStatus: Downloaded newer image for ubuntu:latest\nroot@43912502ede1:/#\n```\n\n### 后台运行容器\n\n```sh\ndocker run -d [image] [command]\n```\n\n- `-d` 参数会将此容器放在系统后台运行.\n\n## 停止容器\n\n要停止容器, 需要先获取容器 ID\n\n```sh\ndocker ps       # 列出当前正在运行的容器\ndocker ps -a    # 列出所有容器\n```\n\n```\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n5512151d0144        training/webapp     \"python app.py\"     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen\n```\n\n之后使用\n\n```sh\ndocker stop [ID]\n```\n\n停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.\n\n# Docker 管理\n\n## 添加容器\n## 添加镜像\n## 列出容器\n## 列出镜像\n## 移除容器\n## 移除镜像\n\n```sh\ndocker image ls                 # 列出本地镜像\ndocker image rm -f [images]     # 强制删除镜像\n```\n\n如果 `docker image rm [images]` 没有 `-f` 参数的话, 删除操作无法成功, 且报错:\n\n```sh\nError response from daemon:\nconflict: unable to remove repository reference \"hello-world:latest\" (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d\n```\n\n---\n\n[^docker.run.help]: [Docker.run.help](/assert/resources/docker.run.help.html)","source":"_drafts/docker笔记.md","raw":"---\ntitle: Docker笔记\nmathjax: false\ntags:\n  - Docker\ncategories:\n  - Linux\ndate: 2018-08-18 03:09:11\n---\n\n# 在 Linux 上安装 Docker\n\n[GetDocker](https://get.docker.com) 准备了一个安装脚本.\n\n```sh\nwget -qO- https://get.docker.com | sh\n```\n\n# Docker 基本概念\n\nDocker 和虚拟机有所相似也有所不同:\n\n相似在于:\n\n- Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰\n\n不同在于:\n\n- Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的\"进程\". 而虚拟机则是直接从系统中划走了额定的资源.\n- Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.\n\n![Docker](https://www.docker.com/sites/default/files/Container%402x.png)\n![Vitual Machine](https://www.docker.com/sites/default/files/VM%402x.png)\n\n## Docker 镜像\n\nDocker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.\n\n## Docker 容器\n\n容器和镜像关系, 就类似于面对对象编程中的 `实例` 与 `类` 一样. 镜像是静态的定义, 容器是运行的实体.\n\n容器实质上是一个进程, 但是运行于独立的 `命名空间` . 容器可以有自己的用户, 系统配置, 文件系统.\n\n每一个容器运行时, 是以镜像为 `基础层` , 在其上创建一个当前容器的 `存储层`, 我们可以称这个为容器运行时读写而准备的存储层为 `容器存储层`.\n\n容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.\n\n按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 `数据卷(Volume)`, 或者绑定 `宿主目录` , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.\n\n数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失. \n\n## DockerFile\n\n# Docker 使用\n\n**运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组**\n\n```sh\n# 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.\nsudo cat /etc/group | grep docker\n# 2. 创建 docker 用户组\nsudo groupadd -g docker\n# 3. 将当前用户添加到 docker 用户组\nsudo usermode -aG docker current_user\n# 4. 重启 docker 服务, 使权限生效\nsudo systemctl restart docker\n# 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限\nsudo chmod a+rw /var/run/docker.sock\n```\n\n## 根据已有镜像运行容器\n\n```sh\ndocker run [image] [command]\n```\n\n- `docker run` 如果成功, 就会创建一个容器, 此容器基于 `image` 建立. `command` 是在容器中执行的指令.\n- 如果未在本地找到 `image` , docker 会自动前往官方仓库下载.\n\n一些有用的参数 [^docker.run.help]\n\n- `-a` 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. `--attach`\n- `-d` 后台运行, 并打印容器 ID, 长指令形式为 `--detach`\n- `-i` 开放容器的 stdin, 长指令形式为 `--interactive`\n- `-t` 创建一个终端(tty), `--tty`\n- `-h` 指定容器的 hostname, `--hostname`, 例如, `-h MyC` 或 `--hostname MyC` 将容器的 hostname 设置为 \"MyC\"\n- `--env` 设置环境变量\n- `--memory (int)bytes` 限制容器使用的内存, 例如 `--memory 1024m` 限制容器最多使用 1024MB 内存\n- `-p`, `--publish list` 公开容器内部端口, 并将其映射到对应主机端口. 例如 `-p [80:80, 8080:8080]` 或 `--publish=[80:80, 8080:8080]` 每一项都是 `主机端口号:容器端口号` 的组合.\n- `-P` 公开容器内部所有使用的端口, 随机映射到主机.\n\n## 使用参数运行容器\n\n```sh\ndocker run [options] [image] [command]\n```\n\n- 对 docker 使用的参数必须紧挨着 `docker run ` .\n\n### 交互式容器\n\n```sh\ndocker run -i -t ubuntu /bin/bash\n```\n\n- `-i` 参数表示允许向容器内的 stdin 输入.\n- `-t` 参数表示向容器外部生成一个终端.\n\n当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境.\n输入 `exit` 返回主机的 Shell, 同时, 容器被停止.\n\n```\nc64513b74145: Already exists\n01b8b12bad90: Already exists\nc5d85cf7a05f: Already exists\nb6b268720157: Already exists\ne12192999ff1: Already exists\nDigest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7\nStatus: Downloaded newer image for ubuntu:latest\nroot@43912502ede1:/#\n```\n\n### 后台运行容器\n\n```sh\ndocker run -d [image] [command]\n```\n\n- `-d` 参数会将此容器放在系统后台运行.\n\n## 停止容器\n\n要停止容器, 需要先获取容器 ID\n\n```sh\ndocker ps       # 列出当前正在运行的容器\ndocker ps -a    # 列出所有容器\n```\n\n```\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n5512151d0144        training/webapp     \"python app.py\"     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen\n```\n\n之后使用\n\n```sh\ndocker stop [ID]\n```\n\n停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.\n\n# Docker 管理\n\n## 添加容器\n## 添加镜像\n## 列出容器\n## 列出镜像\n## 移除容器\n## 移除镜像\n\n```sh\ndocker image ls                 # 列出本地镜像\ndocker image rm -f [images]     # 强制删除镜像\n```\n\n如果 `docker image rm [images]` 没有 `-f` 参数的话, 删除操作无法成功, 且报错:\n\n```sh\nError response from daemon:\nconflict: unable to remove repository reference \"hello-world:latest\" (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d\n```\n\n---\n\n[^docker.run.help]: [Docker.run.help](/assert/resources/docker.run.help.html)","slug":"docker笔记","published":0,"updated":"2018-08-19T15:16:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6s000aw8lka5fkj76e","content":"<h1 id=\"在-linux-上安装-docker\">在 Linux 上安装 Docker</h1>\r\n<p><a href=\"https://get.docker.com\" target=\"_blank\" rel=\"noopener\">GetDocker</a> 准备了一个安装脚本.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://get.docker.com | sh</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"docker-基本概念\">Docker 基本概念</h1>\r\n<p>Docker 和虚拟机有所相似也有所不同:</p>\r\n<p>相似在于:</p>\r\n<ul>\r\n<li>Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰</li>\r\n</ul>\r\n<p>不同在于:</p>\r\n<ul>\r\n<li>Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的&quot;进程&quot;. 而虚拟机则是直接从系统中划走了额定的资源.</li>\r\n<li>Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.</li>\r\n</ul>\r\n<p><img src=\"https://www.docker.com/sites/default/files/Container%402x.png\" alt=\"Docker\"> <img src=\"https://www.docker.com/sites/default/files/VM%402x.png\" alt=\"Vitual Machine\"></p>\r\n<h2 id=\"docker-镜像\">Docker 镜像</h2>\r\n<p>Docker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.</p>\r\n<h2 id=\"docker-容器\">Docker 容器</h2>\r\n<p>容器和镜像关系, 就类似于面对对象编程中的 <code>实例</code> 与 <code>类</code> 一样. 镜像是静态的定义, 容器是运行的实体.</p>\r\n<p>容器实质上是一个进程, 但是运行于独立的 <code>命名空间</code> . 容器可以有自己的用户, 系统配置, 文件系统.</p>\r\n<p>每一个容器运行时, 是以镜像为 <code>基础层</code> , 在其上创建一个当前容器的 <code>存储层</code>, 我们可以称这个为容器运行时读写而准备的存储层为 <code>容器存储层</code>.</p>\r\n<p>容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.</p>\r\n<p>按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 <code>数据卷(Volume)</code>, 或者绑定 <code>宿主目录</code> , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.</p>\r\n<p>数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失.</p>\r\n<h2 id=\"dockerfile\">DockerFile</h2>\r\n<h1 id=\"docker-使用\">Docker 使用</h1>\r\n<p><strong>运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组</strong></p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.</span></span><br><span class=\"line\">sudo cat /etc/group | grep docker</span><br><span class=\"line\"><span class=\"comment\"># 2. 创建 docker 用户组</span></span><br><span class=\"line\">sudo groupadd -g docker</span><br><span class=\"line\"><span class=\"comment\"># 3. 将当前用户添加到 docker 用户组</span></span><br><span class=\"line\">sudo usermode -aG docker current_user</span><br><span class=\"line\"><span class=\"comment\"># 4. 重启 docker 服务, 使权限生效</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\"><span class=\"comment\"># 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限</span></span><br><span class=\"line\">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"根据已有镜像运行容器\">根据已有镜像运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>docker run</code> 如果成功, 就会创建一个容器, 此容器基于 <code>image</code> 建立. <code>command</code> 是在容器中执行的指令.</li>\r\n<li>如果未在本地找到 <code>image</code> , docker 会自动前往官方仓库下载.</li>\r\n</ul>\r\n<p>一些有用的参数 <a href=\"#fn1\" class=\"footnoteRef\" id=\"fnref1\"><sup>1</sup></a></p>\r\n<ul>\r\n<li><code>-a</code> 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. <code>--attach</code></li>\r\n<li><code>-d</code> 后台运行, 并打印容器 ID, 长指令形式为 <code>--detach</code></li>\r\n<li><code>-i</code> 开放容器的 stdin, 长指令形式为 <code>--interactive</code></li>\r\n<li><code>-t</code> 创建一个终端(tty), <code>--tty</code></li>\r\n<li><code>-h</code> 指定容器的 hostname, <code>--hostname</code>, 例如, <code>-h MyC</code> 或 <code>--hostname MyC</code> 将容器的 hostname 设置为 &quot;MyC&quot;</li>\r\n<li><code>--env</code> 设置环境变量</li>\r\n<li><code>--memory (int)bytes</code> 限制容器使用的内存, 例如 <code>--memory 1024m</code> 限制容器最多使用 1024MB 内存</li>\r\n<li><code>-p</code>, <code>--publish list</code> 公开容器内部端口, 并将其映射到对应主机端口. 例如 <code>-p [80:80, 8080:8080]</code> 或 <code>--publish=[80:80, 8080:8080]</code> 每一项都是 <code>主机端口号:容器端口号</code> 的组合.</li>\r\n<li><code>-P</code> 公开容器内部所有使用的端口, 随机映射到主机.</li>\r\n</ul>\r\n<h2 id=\"使用参数运行容器\">使用参数运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [options] [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>对 docker 使用的参数必须紧挨着 <code>docker run</code> .</li>\r\n</ul>\r\n<h3 id=\"交互式容器\">交互式容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-i</code> 参数表示允许向容器内的 stdin 输入.</li>\r\n<li><code>-t</code> 参数表示向容器外部生成一个终端.</li>\r\n</ul>\r\n<p>当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境. 输入 <code>exit</code> 返回主机的 Shell, 同时, 容器被停止.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c64513b74145: Already exists</span><br><span class=\"line\">01b8b12bad90: Already exists</span><br><span class=\"line\">c5d85cf7a05f: Already exists</span><br><span class=\"line\">b6b268720157: Already exists</span><br><span class=\"line\">e12192999ff1: Already exists</span><br><span class=\"line\">Digest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7</span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:latest</span><br><span class=\"line\">root@43912502ede1:/#</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"后台运行容器\">后台运行容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-d</code> 参数会将此容器放在系统后台运行.</li>\r\n</ul>\r\n<h2 id=\"停止容器\">停止容器</h2>\r\n<p>要停止容器, 需要先获取容器 ID</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps       <span class=\"comment\"># 列出当前正在运行的容器</span></span><br><span class=\"line\">docker ps -a    <span class=\"comment\"># 列出所有容器</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">5512151d0144        training/webapp     &quot;python app.py&quot;     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen</span><br></pre></td></tr></table></figure>\r\n<p>之后使用</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop [ID]</span><br></pre></td></tr></table></figure>\r\n<p>停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.</p>\r\n<h1 id=\"docker-管理\">Docker 管理</h1>\r\n<h2 id=\"添加容器\">添加容器</h2>\r\n<h2 id=\"添加镜像\">添加镜像</h2>\r\n<h2 id=\"列出容器\">列出容器</h2>\r\n<h2 id=\"列出镜像\">列出镜像</h2>\r\n<h2 id=\"移除容器\">移除容器</h2>\r\n<h2 id=\"移除镜像\">移除镜像</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls                 <span class=\"comment\"># 列出本地镜像</span></span><br><span class=\"line\">docker image rm -f [images]     <span class=\"comment\"># 强制删除镜像</span></span><br></pre></td></tr></table></figure>\r\n<p>如果 <code>docker image rm [images]</code> 没有 <code>-f</code> 参数的话, 删除操作无法成功, 且报错:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error response from daemon:</span><br><span class=\"line\">conflict: unable to remove repository reference <span class=\"string\">\"hello-world:latest\"</span> (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d</span><br></pre></td></tr></table></figure>\r\n<hr>\r\n<div class=\"footnotes\">\r\n<hr>\r\n<ol>\r\n<li id=\"fn1\"><p><a href=\"/assert/resources/docker.run.help.html\">Docker.run.help</a><a href=\"#fnref1\">↩</a></p></li>\r\n</ol>\r\n</div>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在-linux-上安装-docker\">在 Linux 上安装 Docker</h1>\r\n<p><a href=\"https://get.docker.com\" target=\"_blank\" rel=\"noopener\">GetDocker</a> 准备了一个安装脚本.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://get.docker.com | sh</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"docker-基本概念\">Docker 基本概念</h1>\r\n<p>Docker 和虚拟机有所相似也有所不同:</p>\r\n<p>相似在于:</p>\r\n<ul>\r\n<li>Docker 与 虚拟机都可以将任务所用的资源隔离开, 不同的 Docker 容器或虚拟机之间的进程互不干扰</li>\r\n</ul>\r\n<p>不同在于:</p>\r\n<ul>\r\n<li>Docker 使用的是系统内核, 而虚拟机则是使用虚拟化技术. 在运行过程中, Docker 对系统资源的占用是动态化的, 类似于一个特殊的&quot;进程&quot;. 而虚拟机则是直接从系统中划走了额定的资源.</li>\r\n<li>Docker 只隔离了程序的依赖关系, 没有隔离主机对程序的监控. 而虚拟机创造了一个独立的操作系统, 主机对该系统是完全隔绝的.</li>\r\n</ul>\r\n<p><img src=\"https://www.docker.com/sites/default/files/Container%402x.png\" alt=\"Docker\"> <img src=\"https://www.docker.com/sites/default/files/VM%402x.png\" alt=\"Vitual Machine\"></p>\r\n<h2 id=\"docker-镜像\">Docker 镜像</h2>\r\n<p>Docker 镜像是一个特殊的文件系统, 提供了供容器运行所需的程序, 库, 配置等文件, 还包含了配置参数(如环境变量, 用户, 匿名卷等). 镜像里所有数据都是静态的, 在构建之后也不会改变.</p>\r\n<h2 id=\"docker-容器\">Docker 容器</h2>\r\n<p>容器和镜像关系, 就类似于面对对象编程中的 <code>实例</code> 与 <code>类</code> 一样. 镜像是静态的定义, 容器是运行的实体.</p>\r\n<p>容器实质上是一个进程, 但是运行于独立的 <code>命名空间</code> . 容器可以有自己的用户, 系统配置, 文件系统.</p>\r\n<p>每一个容器运行时, 是以镜像为 <code>基础层</code> , 在其上创建一个当前容器的 <code>存储层</code>, 我们可以称这个为容器运行时读写而准备的存储层为 <code>容器存储层</code>.</p>\r\n<p>容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此, 任何保存于容器存储层的信息都会随容器删除而丢失.</p>\r\n<p>按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 <code>数据卷(Volume)</code>, 或者绑定 <code>宿主目录</code> , 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.</p>\r\n<p>数据卷的生存周期独立于容器, 容器消亡, 数据卷不会消亡. 因此, 使用数据卷后, 容器可以随意删除, 重新 run, 数据却不会丢失.</p>\r\n<h2 id=\"dockerfile\">DockerFile</h2>\r\n<h1 id=\"docker-使用\">Docker 使用</h1>\r\n<p><strong>运行 Docker 必须要有 root 权限, 除非将当前用户添加到 docker 用户组</strong></p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 查询用户组中是否已添加了 docker 组. 若已有, 则跳到第 3 步.</span></span><br><span class=\"line\">sudo cat /etc/group | grep docker</span><br><span class=\"line\"><span class=\"comment\"># 2. 创建 docker 用户组</span></span><br><span class=\"line\">sudo groupadd -g docker</span><br><span class=\"line\"><span class=\"comment\"># 3. 将当前用户添加到 docker 用户组</span></span><br><span class=\"line\">sudo usermode -aG docker current_user</span><br><span class=\"line\"><span class=\"comment\"># 4. 重启 docker 服务, 使权限生效</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\"><span class=\"comment\"># 如果提示get ......dial unix /var/run/docker.sock权限不够, 则修改/var/run/docker.sock权限</span></span><br><span class=\"line\">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"根据已有镜像运行容器\">根据已有镜像运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>docker run</code> 如果成功, 就会创建一个容器, 此容器基于 <code>image</code> 建立. <code>command</code> 是在容器中执行的指令.</li>\r\n<li>如果未在本地找到 <code>image</code> , docker 会自动前往官方仓库下载.</li>\r\n</ul>\r\n<p>一些有用的参数 <a href=\"#fn1\" class=\"footnoteRef\" id=\"fnref1\"><sup>1</sup></a></p>\r\n<ul>\r\n<li><code>-a</code> 连接至一个 docker 容器, 开放其 stdin, stdout 和 stderr. <code>--attach</code></li>\r\n<li><code>-d</code> 后台运行, 并打印容器 ID, 长指令形式为 <code>--detach</code></li>\r\n<li><code>-i</code> 开放容器的 stdin, 长指令形式为 <code>--interactive</code></li>\r\n<li><code>-t</code> 创建一个终端(tty), <code>--tty</code></li>\r\n<li><code>-h</code> 指定容器的 hostname, <code>--hostname</code>, 例如, <code>-h MyC</code> 或 <code>--hostname MyC</code> 将容器的 hostname 设置为 &quot;MyC&quot;</li>\r\n<li><code>--env</code> 设置环境变量</li>\r\n<li><code>--memory (int)bytes</code> 限制容器使用的内存, 例如 <code>--memory 1024m</code> 限制容器最多使用 1024MB 内存</li>\r\n<li><code>-p</code>, <code>--publish list</code> 公开容器内部端口, 并将其映射到对应主机端口. 例如 <code>-p [80:80, 8080:8080]</code> 或 <code>--publish=[80:80, 8080:8080]</code> 每一项都是 <code>主机端口号:容器端口号</code> 的组合.</li>\r\n<li><code>-P</code> 公开容器内部所有使用的端口, 随机映射到主机.</li>\r\n</ul>\r\n<h2 id=\"使用参数运行容器\">使用参数运行容器</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [options] [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>对 docker 使用的参数必须紧挨着 <code>docker run</code> .</li>\r\n</ul>\r\n<h3 id=\"交互式容器\">交互式容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-i</code> 参数表示允许向容器内的 stdin 输入.</li>\r\n<li><code>-t</code> 参数表示向容器外部生成一个终端.</li>\r\n</ul>\r\n<p>当运行完上面的指令后, 系统返回如下信息, 然后进入了容器内的 bash 环境. 输入 <code>exit</code> 返回主机的 Shell, 同时, 容器被停止.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c64513b74145: Already exists</span><br><span class=\"line\">01b8b12bad90: Already exists</span><br><span class=\"line\">c5d85cf7a05f: Already exists</span><br><span class=\"line\">b6b268720157: Already exists</span><br><span class=\"line\">e12192999ff1: Already exists</span><br><span class=\"line\">Digest: sha256:3f119dc0737f57f704ebecac8a6d8477b0f6ca1ca0332c7ee1395ed2c6a82be7</span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:latest</span><br><span class=\"line\">root@43912502ede1:/#</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"后台运行容器\">后台运行容器</h3>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d [image] [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>-d</code> 参数会将此容器放在系统后台运行.</li>\r\n</ul>\r\n<h2 id=\"停止容器\">停止容器</h2>\r\n<p>要停止容器, 需要先获取容器 ID</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps       <span class=\"comment\"># 列出当前正在运行的容器</span></span><br><span class=\"line\">docker ps -a    <span class=\"comment\"># 列出所有容器</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">5512151d0144        training/webapp     &quot;python app.py&quot;     5 seconds ago       Up 4 seconds        5000/tcp            relaxed_roentgen</span><br></pre></td></tr></table></figure>\r\n<p>之后使用</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop [ID]</span><br></pre></td></tr></table></figure>\r\n<p>停止容器. ID 可以不输完, 在没有歧义的情况下, 只输入 ID 的前半段也能停止目标容器.</p>\r\n<h1 id=\"docker-管理\">Docker 管理</h1>\r\n<h2 id=\"添加容器\">添加容器</h2>\r\n<h2 id=\"添加镜像\">添加镜像</h2>\r\n<h2 id=\"列出容器\">列出容器</h2>\r\n<h2 id=\"列出镜像\">列出镜像</h2>\r\n<h2 id=\"移除容器\">移除容器</h2>\r\n<h2 id=\"移除镜像\">移除镜像</h2>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls                 <span class=\"comment\"># 列出本地镜像</span></span><br><span class=\"line\">docker image rm -f [images]     <span class=\"comment\"># 强制删除镜像</span></span><br></pre></td></tr></table></figure>\r\n<p>如果 <code>docker image rm [images]</code> 没有 <code>-f</code> 参数的话, 删除操作无法成功, 且报错:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error response from daemon:</span><br><span class=\"line\">conflict: unable to remove repository reference <span class=\"string\">\"hello-world:latest\"</span> (must force) - container 79a139769099 is using its referenced image 2cb0d9787c4d</span><br></pre></td></tr></table></figure>\r\n<hr>\r\n<div class=\"footnotes\">\r\n<hr>\r\n<ol>\r\n<li id=\"fn1\"><p><a href=\"/assert/resources/docker.run.help.html\">Docker.run.help</a><a href=\"#fnref1\">↩</a></p></li>\r\n</ol>\r\n</div>\r\n"},{"title":"[PyNote]-类的定义与继承","mathjax":false,"date":"2018-08-13T16:35:35.000Z","_content":"\n# 定义一个类\n\n```py\nclass ClassName(object):\n    def __init__(self):\n        pass\n```\n\n以上代码定义了一个什么都没有的类.\n\n- `ClassName` 按照代码规范, 应使用 `驼峰命名法`.\n- `CLassName(object)` 是一个继承自 `object` 的类. `object` 是 Python 中的基类, 可以留空, 默认值就是它.\n- `__init__()` 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.\n- `self` 变量代表了属于该类的实例.\n\n```py\nclass RandomNumber():\n    def __init__(self, count):\n        from random import randint\n        self.body = []\n        for i in range(0, count):\n          self.body.append(randint(0, 100))\nc = RandomNumber(100)\n```\n\n在定义实例 `c` 时, `100` 作为 `count` 的实际参数传递给了 `__init__()` 方法. 而 `c` 传递给了 `self` 参数.","source":"_drafts/pynote-类的定义与继承.md","raw":"---\ntitle: '[PyNote]-类的定义与继承'\nmathjax: false\ntags:\n  - null\ncategories:\n  - null\ndate: 2018-08-14 00:35:35\n---\n\n# 定义一个类\n\n```py\nclass ClassName(object):\n    def __init__(self):\n        pass\n```\n\n以上代码定义了一个什么都没有的类.\n\n- `ClassName` 按照代码规范, 应使用 `驼峰命名法`.\n- `CLassName(object)` 是一个继承自 `object` 的类. `object` 是 Python 中的基类, 可以留空, 默认值就是它.\n- `__init__()` 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.\n- `self` 变量代表了属于该类的实例.\n\n```py\nclass RandomNumber():\n    def __init__(self, count):\n        from random import randint\n        self.body = []\n        for i in range(0, count):\n          self.body.append(randint(0, 100))\nc = RandomNumber(100)\n```\n\n在定义实例 `c` 时, `100` 作为 `count` 的实际参数传递给了 `__init__()` 方法. 而 `c` 传递给了 `self` 参数.","slug":"pynote-类的定义与继承","published":0,"updated":"2018-08-17T18:42:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6u000ew8lkmu2fmqz7","content":"<h1 id=\"定义一个类\">定义一个类</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>以上代码定义了一个什么都没有的类.</p>\r\n<ul>\r\n<li><code>ClassName</code> 按照代码规范, 应使用 <code>驼峰命名法</code>.</li>\r\n<li><code>CLassName(object)</code> 是一个继承自 <code>object</code> 的类. <code>object</code> 是 Python 中的基类, 可以留空, 默认值就是它.</li>\r\n<li><code>__init__()</code> 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.</li>\r\n<li><code>self</code> 变量代表了属于该类的实例.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomNumber</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, count)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\">        self.body = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, count):</span><br><span class=\"line\">          self.body.append(randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">c = RandomNumber(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\r\n<p>在定义实例 <code>c</code> 时, <code>100</code> 作为 <code>count</code> 的实际参数传递给了 <code>__init__()</code> 方法. 而 <code>c</code> 传递给了 <code>self</code> 参数.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义一个类\">定义一个类</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>以上代码定义了一个什么都没有的类.</p>\r\n<ul>\r\n<li><code>ClassName</code> 按照代码规范, 应使用 <code>驼峰命名法</code>.</li>\r\n<li><code>CLassName(object)</code> 是一个继承自 <code>object</code> 的类. <code>object</code> 是 Python 中的基类, 可以留空, 默认值就是它.</li>\r\n<li><code>__init__()</code> 方法用于初始化. 一旦为该类创建了一个实例, 就会调用该方法. 该方法中的参数可以在定义实例时传递.</li>\r\n<li><code>self</code> 变量代表了属于该类的实例.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomNumber</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, count)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\">        self.body = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, count):</span><br><span class=\"line\">          self.body.append(randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">c = RandomNumber(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\r\n<p>在定义实例 <code>c</code> 时, <code>100</code> 作为 <code>count</code> 的实际参数传递给了 <code>__init__()</code> 方法. 而 <code>c</code> 传递给了 <code>self</code> 参数.</p>\r\n"},{"title":"[PyNote]-读写文件","mathjax":false,"date":"2018-08-15T16:38:16.000Z","_content":"\n# `open()` 打开文件\n\nPython 内置函数 `open()` 可以完成对文件的打开.\n\n## `open()`\n\n```py\nopen(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\n```\n\n`open()` 函数是 Python 内建函数, 以 `mode` 指定模式打开 `file` 指定文件, 返回一个文件对象. 例如\n\n```py\nf = open(\"./test.txt\", \"r\")\n# 以 只读(r) 模式打开工作目录下的 test.txt 文件. 返回一个 file 类型的对象, 赋值给变量 f\n# file 参数同时接受 DOS 路径分隔符 \\ 和 Unix 路径分隔符 /\n```\n\n[open() 的文档](/assert/resources/buildin.open.__doc__.html)\n\n### 参数 `file`\n\n**参数** `file` 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 `closefd=False`).\n\nTODO:\n\n- 什么是文件描述符?\n- wrap 文件描述符是什么意思?\n\n### 参数 `mode`\n\n`mode` 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 \"r\", 意味着 文本只读(text readonly) 模式打开.\n\n所有接受的模式:\n\n```\n========= ================== ===================================================\n字符      读/写指针初始位置  Meaning\n--------- ----------------------- ----------------------------------------------\n'r'       头部               文本 只读. (默认模式)\n'w'       头部               文本 只写, 如果文本已存在则截断文件.\n'x'       头部               创建新文件, 并以写模式打开它. 如果文件已存在则抛出 \n                             FileExistsError\n'a'       尾部               以写模式打开, 如果文件存在则在末尾添加.\n'b'                          二进制模式.\n't'                          文本模式.\n'+'                          打开文件以更新. (读写)\n========= ================== ===================================================\n```\n\n打开模式与对象类型的关系:\n\n```\nrt  <class '_io.TextIOWrapper'>\nwt  <class '_io.TextIOWrapper'>\nxt  <class '_io.TextIOWrapper'>\nr+t <class '_io.TextIOWrapper'>\nw+t <class '_io.TextIOWrapper'>\nx+t <class '_io.TextIOWrapper'>\nrb  <class '_io.BufferedReader'>\nwb  <class '_io.BufferedWriter'>\nxb  <class '_io.BufferedWriter'>\nr+b <class '_io.BufferedRandom'>\nw+b <class '_io.BufferedRandom'>\nx+b <class '_io.BufferedRandom'>\n```\n\n### 其他参数\n\n```\n=============== =============== ================================================\nArgs            ValueType       Meaning\n--------------- --------------- ------------------------------------------------\nbuffering       int             设置缓冲区大小\nencoding        str             设置字符编码\nerrors          str             设置错误处理策略\nnewline         str             设置对换行的处理方式\nclosefd         bool            设置对文件描述符的处理方式\nopener          Unknown         Unknown\n=============== =============== ================================================\n```\n\n### 挖坑代填\n\n<div id=\"todo\">TODO:</div>\n\n```\nopen() 的参数:\nclosefd         什么是文件描述符?\nopener          这是什么鬼东西?\n\n?Python 内置 class :\nrt  <class '_io.TextIOWrapper'>\nwt  <class '_io.TextIOWrapper'>\nrb  <class '_io.BufferedReader'>\nwb  <class '_io.BufferedWriter'>\nr+t <class '_io.TextIOWrapper'>\nw+t <class '_io.TextIOWrapper'>\nr+b <class '_io.BufferedRandom'>\nw+b <class '_io.BufferedRandom'>\n```\n\n> 读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。\n> \n> ---[廖雪峰](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917715991ef1ebc19d15a4afdace1169a464eecc2000)\n\n# `file` 类可用的方法\n\n```\n=============== =============== ================================================\nMethod          Args (self,...) Meaning\n--------------- --------------- ------------------------------------------------\nclose()                         关闭文件.\nflush()                         刷新文件内部缓冲, 将缓冲区数据立即写入.\n? fileno()                      返回一个整型的文件描述符.\nisatty()                        判断文件是否是终端 (例如 Linux 下的 /dev/ttyX)\nread()          [int size]      读取文件, 得到文件所有内容, 返回一个字符串. 可选\n                                参数 size, 指定读取字节数, 如果未指定或为负数, \n                                则读取至 EOF.\nreadline()      [int size]      读取一行, 以换行符结尾. 可选参数 四则, 读取指定\n                                字节数, 如果未指定或为负数或超过本行字符数, 则读\n                                取至本行换行符.\n                                返回值带有换行符, 读到文件末尾会返回空字符串.\nreadlines()                     读取文件, 获取所有行的内容, 返回一个列表, 其中一\n                                行一项. 读取到 EOF 时返回空字符串.\nwrite()         str             向文件中写入字符串.\nseek()          int, \n=============== =============== ================================================\n```\n\n# ","source":"_drafts/pynote-读写文件.md","raw":"---\ntitle: '[PyNote]-读写文件'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-08-16 00:38:16\n---\n\n# `open()` 打开文件\n\nPython 内置函数 `open()` 可以完成对文件的打开.\n\n## `open()`\n\n```py\nopen(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\n```\n\n`open()` 函数是 Python 内建函数, 以 `mode` 指定模式打开 `file` 指定文件, 返回一个文件对象. 例如\n\n```py\nf = open(\"./test.txt\", \"r\")\n# 以 只读(r) 模式打开工作目录下的 test.txt 文件. 返回一个 file 类型的对象, 赋值给变量 f\n# file 参数同时接受 DOS 路径分隔符 \\ 和 Unix 路径分隔符 /\n```\n\n[open() 的文档](/assert/resources/buildin.open.__doc__.html)\n\n### 参数 `file`\n\n**参数** `file` 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 `closefd=False`).\n\nTODO:\n\n- 什么是文件描述符?\n- wrap 文件描述符是什么意思?\n\n### 参数 `mode`\n\n`mode` 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 \"r\", 意味着 文本只读(text readonly) 模式打开.\n\n所有接受的模式:\n\n```\n========= ================== ===================================================\n字符      读/写指针初始位置  Meaning\n--------- ----------------------- ----------------------------------------------\n'r'       头部               文本 只读. (默认模式)\n'w'       头部               文本 只写, 如果文本已存在则截断文件.\n'x'       头部               创建新文件, 并以写模式打开它. 如果文件已存在则抛出 \n                             FileExistsError\n'a'       尾部               以写模式打开, 如果文件存在则在末尾添加.\n'b'                          二进制模式.\n't'                          文本模式.\n'+'                          打开文件以更新. (读写)\n========= ================== ===================================================\n```\n\n打开模式与对象类型的关系:\n\n```\nrt  <class '_io.TextIOWrapper'>\nwt  <class '_io.TextIOWrapper'>\nxt  <class '_io.TextIOWrapper'>\nr+t <class '_io.TextIOWrapper'>\nw+t <class '_io.TextIOWrapper'>\nx+t <class '_io.TextIOWrapper'>\nrb  <class '_io.BufferedReader'>\nwb  <class '_io.BufferedWriter'>\nxb  <class '_io.BufferedWriter'>\nr+b <class '_io.BufferedRandom'>\nw+b <class '_io.BufferedRandom'>\nx+b <class '_io.BufferedRandom'>\n```\n\n### 其他参数\n\n```\n=============== =============== ================================================\nArgs            ValueType       Meaning\n--------------- --------------- ------------------------------------------------\nbuffering       int             设置缓冲区大小\nencoding        str             设置字符编码\nerrors          str             设置错误处理策略\nnewline         str             设置对换行的处理方式\nclosefd         bool            设置对文件描述符的处理方式\nopener          Unknown         Unknown\n=============== =============== ================================================\n```\n\n### 挖坑代填\n\n<div id=\"todo\">TODO:</div>\n\n```\nopen() 的参数:\nclosefd         什么是文件描述符?\nopener          这是什么鬼东西?\n\n?Python 内置 class :\nrt  <class '_io.TextIOWrapper'>\nwt  <class '_io.TextIOWrapper'>\nrb  <class '_io.BufferedReader'>\nwb  <class '_io.BufferedWriter'>\nr+t <class '_io.TextIOWrapper'>\nw+t <class '_io.TextIOWrapper'>\nr+b <class '_io.BufferedRandom'>\nw+b <class '_io.BufferedRandom'>\n```\n\n> 读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。\n> \n> ---[廖雪峰](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917715991ef1ebc19d15a4afdace1169a464eecc2000)\n\n# `file` 类可用的方法\n\n```\n=============== =============== ================================================\nMethod          Args (self,...) Meaning\n--------------- --------------- ------------------------------------------------\nclose()                         关闭文件.\nflush()                         刷新文件内部缓冲, 将缓冲区数据立即写入.\n? fileno()                      返回一个整型的文件描述符.\nisatty()                        判断文件是否是终端 (例如 Linux 下的 /dev/ttyX)\nread()          [int size]      读取文件, 得到文件所有内容, 返回一个字符串. 可选\n                                参数 size, 指定读取字节数, 如果未指定或为负数, \n                                则读取至 EOF.\nreadline()      [int size]      读取一行, 以换行符结尾. 可选参数 四则, 读取指定\n                                字节数, 如果未指定或为负数或超过本行字符数, 则读\n                                取至本行换行符.\n                                返回值带有换行符, 读到文件末尾会返回空字符串.\nreadlines()                     读取文件, 获取所有行的内容, 返回一个列表, 其中一\n                                行一项. 读取到 EOF 时返回空字符串.\nwrite()         str             向文件中写入字符串.\nseek()          int, \n=============== =============== ================================================\n```\n\n# ","slug":"pynote-读写文件","published":0,"updated":"2018-08-22T21:29:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6w000fw8lkl033490u","content":"<h1 id=\"open-打开文件\"><code>open()</code> 打开文件</h1>\r\n<p>Python 内置函数 <code>open()</code> 可以完成对文件的打开.</p>\r\n<h2 id=\"open\"><code>open()</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(file, mode=<span class=\"string\">'r'</span>, buffering=<span class=\"number\">-1</span>, encoding=<span class=\"keyword\">None</span>, errors=<span class=\"keyword\">None</span>, newline=<span class=\"keyword\">None</span>, closefd=<span class=\"keyword\">True</span>, opener=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\r\n<p><code>open()</code> 函数是 Python 内建函数, 以 <code>mode</code> 指定模式打开 <code>file</code> 指定文件, 返回一个文件对象. 例如</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">\"./test.txt\"</span>, <span class=\"string\">\"r\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 以 只读(r) 模式打开工作目录下的 test.txt 文件. 返回一个 file 类型的对象, 赋值给变量 f</span></span><br><span class=\"line\"><span class=\"comment\"># file 参数同时接受 DOS 路径分隔符 \\ 和 Unix 路径分隔符 /</span></span><br></pre></td></tr></table></figure>\r\n<p><a href=\"/assert/resources/buildin.open.__doc__.html\">open() 的文档</a></p>\r\n<h3 id=\"参数-file\">参数 <code>file</code></h3>\r\n<p><strong>参数</strong> <code>file</code> 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 <code>closefd=False</code>).</p>\r\n<p>TODO:</p>\r\n<ul>\r\n<li>什么是文件描述符?</li>\r\n<li>wrap 文件描述符是什么意思?</li>\r\n</ul>\r\n<h3 id=\"参数-mode\">参数 <code>mode</code></h3>\r\n<p><code>mode</code> 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 &quot;r&quot;, 意味着 文本只读(text readonly) 模式打开.</p>\r\n<p>所有接受的模式:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">========= ================== ===================================================</span><br><span class=\"line\">字符      读/写指针初始位置  Meaning</span><br><span class=\"line\">--------- ----------------------- ----------------------------------------------</span><br><span class=\"line\">&apos;r&apos;       头部               文本 只读. (默认模式)</span><br><span class=\"line\">&apos;w&apos;       头部               文本 只写, 如果文本已存在则截断文件.</span><br><span class=\"line\">&apos;x&apos;       头部               创建新文件, 并以写模式打开它. 如果文件已存在则抛出 </span><br><span class=\"line\">                             FileExistsError</span><br><span class=\"line\">&apos;a&apos;       尾部               以写模式打开, 如果文件存在则在末尾添加.</span><br><span class=\"line\">&apos;b&apos;                          二进制模式.</span><br><span class=\"line\">&apos;t&apos;                          文本模式.</span><br><span class=\"line\">&apos;+&apos;                          打开文件以更新. (读写)</span><br><span class=\"line\">========= ================== ===================================================</span><br></pre></td></tr></table></figure>\r\n<p>打开模式与对象类型的关系:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">wt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">xt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">r+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">w+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">x+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">rb  &lt;class &apos;_io.BufferedReader&apos;&gt;</span><br><span class=\"line\">wb  &lt;class &apos;_io.BufferedWriter&apos;&gt;</span><br><span class=\"line\">xb  &lt;class &apos;_io.BufferedWriter&apos;&gt;</span><br><span class=\"line\">r+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br><span class=\"line\">w+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br><span class=\"line\">x+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"其他参数\">其他参数</h3>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=============== =============== ================================================</span><br><span class=\"line\">Args            ValueType       Meaning</span><br><span class=\"line\">--------------- --------------- ------------------------------------------------</span><br><span class=\"line\">buffering       int             设置缓冲区大小</span><br><span class=\"line\">encoding        str             设置字符编码</span><br><span class=\"line\">errors          str             设置错误处理策略</span><br><span class=\"line\">newline         str             设置对换行的处理方式</span><br><span class=\"line\">closefd         bool            设置对文件描述符的处理方式</span><br><span class=\"line\">opener          Unknown         Unknown</span><br><span class=\"line\">=============== =============== ================================================</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"挖坑代填\">挖坑代填</h3>\r\n<div id=\"todo\">\r\nTODO:\r\n</div>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open() 的参数:</span><br><span class=\"line\">closefd         什么是文件描述符?</span><br><span class=\"line\">opener          这是什么鬼东西?</span><br><span class=\"line\"></span><br><span class=\"line\">?Python 内置 class :</span><br><span class=\"line\">rt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">wt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">rb  &lt;class &apos;_io.BufferedReader&apos;&gt;</span><br><span class=\"line\">wb  &lt;class &apos;_io.BufferedWriter&apos;&gt;</span><br><span class=\"line\">r+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">w+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">r+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br><span class=\"line\">w+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p>\r\n<p>---<a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917715991ef1ebc19d15a4afdace1169a464eecc2000\" target=\"_blank\" rel=\"noopener\">廖雪峰</a></p>\r\n</blockquote>\r\n<h1 id=\"file-类可用的方法\"><code>file</code> 类可用的方法</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=============== =============== ================================================</span><br><span class=\"line\">Method          Args (self,...) Meaning</span><br><span class=\"line\">--------------- --------------- ------------------------------------------------</span><br><span class=\"line\">close()                         关闭文件.</span><br><span class=\"line\">flush()                         刷新文件内部缓冲, 将缓冲区数据立即写入.</span><br><span class=\"line\">? fileno()                      返回一个整型的文件描述符.</span><br><span class=\"line\">isatty()                        判断文件是否是终端 (例如 Linux 下的 /dev/ttyX)</span><br><span class=\"line\">read()          [int size]      读取文件, 得到文件所有内容, 返回一个字符串. 可选</span><br><span class=\"line\">                                参数 size, 指定读取字节数, 如果未指定或为负数, </span><br><span class=\"line\">                                则读取至 EOF.</span><br><span class=\"line\">readline()      [int size]      读取一行, 以换行符结尾. 可选参数 四则, 读取指定</span><br><span class=\"line\">                                字节数, 如果未指定或为负数或超过本行字符数, 则读</span><br><span class=\"line\">                                取至本行换行符.</span><br><span class=\"line\">                                返回值带有换行符, 读到文件末尾会返回空字符串.</span><br><span class=\"line\">readlines()                     读取文件, 获取所有行的内容, 返回一个列表, 其中一</span><br><span class=\"line\">                                行一项. 读取到 EOF 时返回空字符串.</span><br><span class=\"line\">write()         str             向文件中写入字符串.</span><br><span class=\"line\">seek()          int, </span><br><span class=\"line\">=============== =============== ================================================</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"section\"></h1>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"open-打开文件\"><code>open()</code> 打开文件</h1>\r\n<p>Python 内置函数 <code>open()</code> 可以完成对文件的打开.</p>\r\n<h2 id=\"open\"><code>open()</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(file, mode=<span class=\"string\">'r'</span>, buffering=<span class=\"number\">-1</span>, encoding=<span class=\"keyword\">None</span>, errors=<span class=\"keyword\">None</span>, newline=<span class=\"keyword\">None</span>, closefd=<span class=\"keyword\">True</span>, opener=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\r\n<p><code>open()</code> 函数是 Python 内建函数, 以 <code>mode</code> 指定模式打开 <code>file</code> 指定文件, 返回一个文件对象. 例如</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">\"./test.txt\"</span>, <span class=\"string\">\"r\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 以 只读(r) 模式打开工作目录下的 test.txt 文件. 返回一个 file 类型的对象, 赋值给变量 f</span></span><br><span class=\"line\"><span class=\"comment\"># file 参数同时接受 DOS 路径分隔符 \\ 和 Unix 路径分隔符 /</span></span><br></pre></td></tr></table></figure>\r\n<p><a href=\"/assert/resources/buildin.open.__doc__.html\">open() 的文档</a></p>\r\n<h3 id=\"参数-file\">参数 <code>file</code></h3>\r\n<p><strong>参数</strong> <code>file</code> 是字符串类型数据, 可以是普通文本, 也可以是二进制编码的字符串. 给出需要打开的文件名 (如果文件不在当前目录, 需要给出文件的路径, 绝对路径或相对路径.) 或者要 wrap 的文件的整数文件描述符. (如果给出了文件描述符, 则在关闭 I/O 对象时关闭它, 除非设置 <code>closefd=False</code>).</p>\r\n<p>TODO:</p>\r\n<ul>\r\n<li>什么是文件描述符?</li>\r\n<li>wrap 文件描述符是什么意思?</li>\r\n</ul>\r\n<h3 id=\"参数-mode\">参数 <code>mode</code></h3>\r\n<p><code>mode</code> 是一个字符串类型的数据, 用于指定文件的打开方式. 默认为 &quot;r&quot;, 意味着 文本只读(text readonly) 模式打开.</p>\r\n<p>所有接受的模式:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">========= ================== ===================================================</span><br><span class=\"line\">字符      读/写指针初始位置  Meaning</span><br><span class=\"line\">--------- ----------------------- ----------------------------------------------</span><br><span class=\"line\">&apos;r&apos;       头部               文本 只读. (默认模式)</span><br><span class=\"line\">&apos;w&apos;       头部               文本 只写, 如果文本已存在则截断文件.</span><br><span class=\"line\">&apos;x&apos;       头部               创建新文件, 并以写模式打开它. 如果文件已存在则抛出 </span><br><span class=\"line\">                             FileExistsError</span><br><span class=\"line\">&apos;a&apos;       尾部               以写模式打开, 如果文件存在则在末尾添加.</span><br><span class=\"line\">&apos;b&apos;                          二进制模式.</span><br><span class=\"line\">&apos;t&apos;                          文本模式.</span><br><span class=\"line\">&apos;+&apos;                          打开文件以更新. (读写)</span><br><span class=\"line\">========= ================== ===================================================</span><br></pre></td></tr></table></figure>\r\n<p>打开模式与对象类型的关系:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">wt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">xt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">r+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">w+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">x+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">rb  &lt;class &apos;_io.BufferedReader&apos;&gt;</span><br><span class=\"line\">wb  &lt;class &apos;_io.BufferedWriter&apos;&gt;</span><br><span class=\"line\">xb  &lt;class &apos;_io.BufferedWriter&apos;&gt;</span><br><span class=\"line\">r+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br><span class=\"line\">w+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br><span class=\"line\">x+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"其他参数\">其他参数</h3>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=============== =============== ================================================</span><br><span class=\"line\">Args            ValueType       Meaning</span><br><span class=\"line\">--------------- --------------- ------------------------------------------------</span><br><span class=\"line\">buffering       int             设置缓冲区大小</span><br><span class=\"line\">encoding        str             设置字符编码</span><br><span class=\"line\">errors          str             设置错误处理策略</span><br><span class=\"line\">newline         str             设置对换行的处理方式</span><br><span class=\"line\">closefd         bool            设置对文件描述符的处理方式</span><br><span class=\"line\">opener          Unknown         Unknown</span><br><span class=\"line\">=============== =============== ================================================</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"挖坑代填\">挖坑代填</h3>\r\n<div id=\"todo\">\r\nTODO:\r\n</div>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open() 的参数:</span><br><span class=\"line\">closefd         什么是文件描述符?</span><br><span class=\"line\">opener          这是什么鬼东西?</span><br><span class=\"line\"></span><br><span class=\"line\">?Python 内置 class :</span><br><span class=\"line\">rt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">wt  &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">rb  &lt;class &apos;_io.BufferedReader&apos;&gt;</span><br><span class=\"line\">wb  &lt;class &apos;_io.BufferedWriter&apos;&gt;</span><br><span class=\"line\">r+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">w+t &lt;class &apos;_io.TextIOWrapper&apos;&gt;</span><br><span class=\"line\">r+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br><span class=\"line\">w+b &lt;class &apos;_io.BufferedRandom&apos;&gt;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p>\r\n<p>---<a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917715991ef1ebc19d15a4afdace1169a464eecc2000\" target=\"_blank\" rel=\"noopener\">廖雪峰</a></p>\r\n</blockquote>\r\n<h1 id=\"file-类可用的方法\"><code>file</code> 类可用的方法</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=============== =============== ================================================</span><br><span class=\"line\">Method          Args (self,...) Meaning</span><br><span class=\"line\">--------------- --------------- ------------------------------------------------</span><br><span class=\"line\">close()                         关闭文件.</span><br><span class=\"line\">flush()                         刷新文件内部缓冲, 将缓冲区数据立即写入.</span><br><span class=\"line\">? fileno()                      返回一个整型的文件描述符.</span><br><span class=\"line\">isatty()                        判断文件是否是终端 (例如 Linux 下的 /dev/ttyX)</span><br><span class=\"line\">read()          [int size]      读取文件, 得到文件所有内容, 返回一个字符串. 可选</span><br><span class=\"line\">                                参数 size, 指定读取字节数, 如果未指定或为负数, </span><br><span class=\"line\">                                则读取至 EOF.</span><br><span class=\"line\">readline()      [int size]      读取一行, 以换行符结尾. 可选参数 四则, 读取指定</span><br><span class=\"line\">                                字节数, 如果未指定或为负数或超过本行字符数, 则读</span><br><span class=\"line\">                                取至本行换行符.</span><br><span class=\"line\">                                返回值带有换行符, 读到文件末尾会返回空字符串.</span><br><span class=\"line\">readlines()                     读取文件, 获取所有行的内容, 返回一个列表, 其中一</span><br><span class=\"line\">                                行一项. 读取到 EOF 时返回空字符串.</span><br><span class=\"line\">write()         str             向文件中写入字符串.</span><br><span class=\"line\">seek()          int, </span><br><span class=\"line\">=============== =============== ================================================</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"section\"></h1>\r\n"},{"title":"[PyNote]-3.2-Python集合类型","mathjax":false,"date":"2018-07-29T13:37:35.000Z","_content":"\n- 集合\n  - 列表\n  - 元组\n  - 字典\n\n## 集合-set\n\n`set` 是一个无序列表, 用 `set(objects)` 生成一个集合类型的数据.\n\n## 列表-list\n\nPython 中使用 `[]` 包括多个元素来表示 list.\n\n```py\nlist = [\"高数\", 59, \"挂科\", 0.99] # 将 list 类型的对象赋值给一个命名为 list 的变量.\nprint(list)\n\n# 输出信息:\n['高数', 59, '挂科', 0.99]        # list 中可以包含任意类型的对象, 且有序排列.\n```\n\n\n\n## 元组-tuple\n\n\n\n## 字典-dictionary (dict)\n\n","source":"_drafts/pynote-集合类型.md","raw":"---\ntitle: '[PyNote]-3.2-Python集合类型'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-29 21:37:35\n---\n\n- 集合\n  - 列表\n  - 元组\n  - 字典\n\n## 集合-set\n\n`set` 是一个无序列表, 用 `set(objects)` 生成一个集合类型的数据.\n\n## 列表-list\n\nPython 中使用 `[]` 包括多个元素来表示 list.\n\n```py\nlist = [\"高数\", 59, \"挂科\", 0.99] # 将 list 类型的对象赋值给一个命名为 list 的变量.\nprint(list)\n\n# 输出信息:\n['高数', 59, '挂科', 0.99]        # list 中可以包含任意类型的对象, 且有序排列.\n```\n\n\n\n## 元组-tuple\n\n\n\n## 字典-dictionary (dict)\n\n","slug":"pynote-集合类型","published":0,"updated":"2018-08-23T00:40:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw6y000jw8lk3grho5p7","content":"<ul>\r\n<li>集合</li>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul>\r\n<h2 id=\"集合-set\">集合-set</h2>\r\n<p><code>set</code> 是一个无序列表, 用 <code>set(objects)</code> 生成一个集合类型的数据.</p>\r\n<h2 id=\"列表-list\">列表-list</h2>\r\n<p>Python 中使用 <code>[]</code> 包括多个元素来表示 list.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">\"高数\"</span>, <span class=\"number\">59</span>, <span class=\"string\">\"挂科\"</span>, <span class=\"number\">0.99</span>] <span class=\"comment\"># 将 list 类型的对象赋值给一个命名为 list 的变量.</span></span><br><span class=\"line\">print(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出信息:</span></span><br><span class=\"line\">[<span class=\"string\">'高数'</span>, <span class=\"number\">59</span>, <span class=\"string\">'挂科'</span>, <span class=\"number\">0.99</span>]        <span class=\"comment\"># list 中可以包含任意类型的对象, 且有序排列.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"元组-tuple\">元组-tuple</h2>\r\n<h2 id=\"字典-dictionary-dict\">字典-dictionary (dict)</h2>\r\n","site":{"data":{}},"excerpt":"","more":"<ul>\r\n<li>集合</li>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul>\r\n<h2 id=\"集合-set\">集合-set</h2>\r\n<p><code>set</code> 是一个无序列表, 用 <code>set(objects)</code> 生成一个集合类型的数据.</p>\r\n<h2 id=\"列表-list\">列表-list</h2>\r\n<p>Python 中使用 <code>[]</code> 包括多个元素来表示 list.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">\"高数\"</span>, <span class=\"number\">59</span>, <span class=\"string\">\"挂科\"</span>, <span class=\"number\">0.99</span>] <span class=\"comment\"># 将 list 类型的对象赋值给一个命名为 list 的变量.</span></span><br><span class=\"line\">print(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出信息:</span></span><br><span class=\"line\">[<span class=\"string\">'高数'</span>, <span class=\"number\">59</span>, <span class=\"string\">'挂科'</span>, <span class=\"number\">0.99</span>]        <span class=\"comment\"># list 中可以包含任意类型的对象, 且有序排列.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"元组-tuple\">元组-tuple</h2>\r\n<h2 id=\"字典-dictionary-dict\">字典-dictionary (dict)</h2>\r\n"},{"title":"Regex 正则表达式","mathjax":false,"date":"2018-08-10T08:24:09.000Z","_content":"\n# 正则表达式简介\n\n正则表达式适用于匹配字符串.\n\n正则表达式中拥有的元素有:\n\n- 普通字符, 例如一般的 `abcd` 和 `中文字符` 等等.\n- 元字符, 元字符起特殊作用, 如果要匹配元字符本身, 需要使用反斜杠 `\\` 转义.\n\n# 正则表达式\n\n建议先用 python 写一个简单的正则判断器:\n\n[我写了一个小东西](/assert/python/regex_test.py)\n\n## 万用表达式:\n\n- `.` 点号, 表示一个任意符号(除了换行符).\n\n## 限定符\n\n在正则表达式中, 有这样几个有用的元字符用于指定重复次数:\n\n- `*` 星号, 限定前方的那个字符将会重复 0 次以上.\n- `+` 加号, 限定前方的那个字符将会重复 1 次以上.\n- `?` 问好, 限定前方的那个字符将会出现 1 次或 0 次.\n\n用这些元字符, 可以起到更高级的通配符功能.\n\n例如\n\n```\ncolou?r 可以匹配 colour 或 color\nwtf+    可以匹配 wtf, wtff, wtfff, ...\nwtf*    则可以匹配 wt, wtf, wtff, wtfff, ...\n而 .*   的组合可以匹配任意字符串.\n```\n\n还可以自定义重复次数, 这些表达式都和花括号有关:\n\n- `{n}`         指定重复 n 次.\n- `{m,}`        指定重复 m 次及以上.\n- `{,n}`        指定重复 n 次及以内.\n- `{m,n}`       指定重复 m 次到 n 次.\n\n## 定位符\n\n除此之外, 还需要了解一下这些用于定位字符串的元字符:\n\n- `^` 表示一个字符串的开始.\n- `$` 表示一个字符串的结束.\n\n例如\n\n```\ntest a text\n\n^t 将会匹配 test 的第一个 t\nt$ 将会匹配到 text 的最后一个 t\n```\n\n另外还有用于在字符串中定位单词的正则表达式:\n\n- `\\b` 匹配一个单词边界. \n如 `This is a high tower`, `hi\\b` 将会匹配 `high` 中的 `hi`, 而 `This` 中的 `hi` 不会匹配\n- `\\B` 匹配一个非单词边界.\n\n**不能将限定符用在定位符之后!!!**\n\n## 子表达式相关\n\n在一个正则表达式中, 可以嵌入子表达式. 有两种形式:\n\n- `()`          在括号中的字符, 必须全部匹配, 才会匹配整个子表达式. 整个表达式作为一个字符串.\n- `[]`          在括号中的字符, 只要存在一个匹配, 就会匹配整个子表达式. 整个表达式作为一个字符.\n\n例如:\n\n```\nCommon plain text in windows notepad\n[win] 将会匹配所有的 w, i, n\n(win) 只会匹配 windows 中的 \"win\"\n```\n\n# 在 Python 中使用 re 模块\n\n`re` 模块中提供了两个最主要的函数:\n\n- `match()` 用于检测目标字符串是否能被正则表达式匹配.\n- `findall()` 用于搜索目标字符串中能被正则表达式匹配的内容, 并存储到一个列表中返回.\n\n另外还有一些函数, 留待后文讲解.\n\n# Regex 语法列表\n\n|表达式|含义|备注|\n|:-:|-|-|\n|`\\`|转义字符||\n|`.`|任意字符(不包括换行符)|要匹配换行符, 使用 `[.\\n]`|\n|定位符|||\n|`^`|字符串首|匹配字符串开始位置, 如果设置了 multiline, 也可匹配换行符之后的位置|\n|`$`|字符串尾|匹配字符串结束位置, 如果设置了 multiline, 也可匹配换行符之前的位置|\n|限制符|||\n|`{}`|限制符|限制字符重复次数|\n|`{n}`|字符正好出现 n 次||\n|`{n,}`|字符至少出现 n 次||\n|`{m,n}`|字符出现 m 到 n 次||\n|`*`|字符出现 0 次或任意次|`{0,}`|\n|`+`|字符至少出现一次|`{1,}`|\n|`?`|字符出现 0 次或 1 次|`{0,1}`|\n|`?`|贪婪设置符|当 `?` 紧跟某限制符时, 匹配使用非贪婪模式|\n|字符集合|||\n|`|`|表示\"或\"|这东西优先级不高|\n|`()`|子字符集||\n|`[]`|字符集合|表示包括其中字符|\n|`[^]`|负值字符集合|不包括其中字符|\n|`[-]`|字符范围|`[a-z]` 包括所有小写字母, 顺序按照 Unicode 排序(包含了 ASCII)|\n|特殊元字符|||\n|`\\s`|任意数量的空白字符|如空格, 换行符等|\n|`\\S`|任意数量的可见字符|如普通字母, 汉字等|\n|`\\b`|匹配一个单词边界|如 `This is a high tower`, `hi\\b` 将会匹配 `high` 中的 `hi`, 而 `This` 中的 `hi` 不会匹配|\n|`\\B`|匹配一个非单词边界||\n|`\\d`|匹配数字字符|等价于 `[0-9]`|\n|`\\D`|匹配非数字字符|等价于 `[^0-9]`|\n|`\\w`|匹配字母, 数字, 下划线|等价于 `[A-Za-z0-9_]`|\n|`\\W`|匹配非字母, 数字, 下划线|等价于 `[^A-Za-z0-9_]`|\n|`\\x`|匹配一个 16 进制编码字符, 使用 ASCII编码|例如 `\\x048` 表示 `0`|\n|`\\u`|匹配一个 16 进制编码字符, 使用 Unicode编码||\n|`\\num`|引用前方获取的子表达式||\n|`\\c`|匹配 [控制字符](#值得在意的控制字符)|例如 `\\cM` 匹配回车 `\\r`(`Control-M`)|\n\n\n## 值得在意的控制字符\n\n- 换行符, `\\n`, `control-J`\n- 回车符, `\\e`, `control-M`\n- 换页符, `\\f`, `control-L`","source":"_drafts/regex-正则表达式.md","raw":"---\ntitle: Regex 正则表达式\nmathjax: false\ntags:\n  - Regex\ncategories:\n  - 文本处理\ndate: 2018-08-10 16:24:09\n---\n\n# 正则表达式简介\n\n正则表达式适用于匹配字符串.\n\n正则表达式中拥有的元素有:\n\n- 普通字符, 例如一般的 `abcd` 和 `中文字符` 等等.\n- 元字符, 元字符起特殊作用, 如果要匹配元字符本身, 需要使用反斜杠 `\\` 转义.\n\n# 正则表达式\n\n建议先用 python 写一个简单的正则判断器:\n\n[我写了一个小东西](/assert/python/regex_test.py)\n\n## 万用表达式:\n\n- `.` 点号, 表示一个任意符号(除了换行符).\n\n## 限定符\n\n在正则表达式中, 有这样几个有用的元字符用于指定重复次数:\n\n- `*` 星号, 限定前方的那个字符将会重复 0 次以上.\n- `+` 加号, 限定前方的那个字符将会重复 1 次以上.\n- `?` 问好, 限定前方的那个字符将会出现 1 次或 0 次.\n\n用这些元字符, 可以起到更高级的通配符功能.\n\n例如\n\n```\ncolou?r 可以匹配 colour 或 color\nwtf+    可以匹配 wtf, wtff, wtfff, ...\nwtf*    则可以匹配 wt, wtf, wtff, wtfff, ...\n而 .*   的组合可以匹配任意字符串.\n```\n\n还可以自定义重复次数, 这些表达式都和花括号有关:\n\n- `{n}`         指定重复 n 次.\n- `{m,}`        指定重复 m 次及以上.\n- `{,n}`        指定重复 n 次及以内.\n- `{m,n}`       指定重复 m 次到 n 次.\n\n## 定位符\n\n除此之外, 还需要了解一下这些用于定位字符串的元字符:\n\n- `^` 表示一个字符串的开始.\n- `$` 表示一个字符串的结束.\n\n例如\n\n```\ntest a text\n\n^t 将会匹配 test 的第一个 t\nt$ 将会匹配到 text 的最后一个 t\n```\n\n另外还有用于在字符串中定位单词的正则表达式:\n\n- `\\b` 匹配一个单词边界. \n如 `This is a high tower`, `hi\\b` 将会匹配 `high` 中的 `hi`, 而 `This` 中的 `hi` 不会匹配\n- `\\B` 匹配一个非单词边界.\n\n**不能将限定符用在定位符之后!!!**\n\n## 子表达式相关\n\n在一个正则表达式中, 可以嵌入子表达式. 有两种形式:\n\n- `()`          在括号中的字符, 必须全部匹配, 才会匹配整个子表达式. 整个表达式作为一个字符串.\n- `[]`          在括号中的字符, 只要存在一个匹配, 就会匹配整个子表达式. 整个表达式作为一个字符.\n\n例如:\n\n```\nCommon plain text in windows notepad\n[win] 将会匹配所有的 w, i, n\n(win) 只会匹配 windows 中的 \"win\"\n```\n\n# 在 Python 中使用 re 模块\n\n`re` 模块中提供了两个最主要的函数:\n\n- `match()` 用于检测目标字符串是否能被正则表达式匹配.\n- `findall()` 用于搜索目标字符串中能被正则表达式匹配的内容, 并存储到一个列表中返回.\n\n另外还有一些函数, 留待后文讲解.\n\n# Regex 语法列表\n\n|表达式|含义|备注|\n|:-:|-|-|\n|`\\`|转义字符||\n|`.`|任意字符(不包括换行符)|要匹配换行符, 使用 `[.\\n]`|\n|定位符|||\n|`^`|字符串首|匹配字符串开始位置, 如果设置了 multiline, 也可匹配换行符之后的位置|\n|`$`|字符串尾|匹配字符串结束位置, 如果设置了 multiline, 也可匹配换行符之前的位置|\n|限制符|||\n|`{}`|限制符|限制字符重复次数|\n|`{n}`|字符正好出现 n 次||\n|`{n,}`|字符至少出现 n 次||\n|`{m,n}`|字符出现 m 到 n 次||\n|`*`|字符出现 0 次或任意次|`{0,}`|\n|`+`|字符至少出现一次|`{1,}`|\n|`?`|字符出现 0 次或 1 次|`{0,1}`|\n|`?`|贪婪设置符|当 `?` 紧跟某限制符时, 匹配使用非贪婪模式|\n|字符集合|||\n|`|`|表示\"或\"|这东西优先级不高|\n|`()`|子字符集||\n|`[]`|字符集合|表示包括其中字符|\n|`[^]`|负值字符集合|不包括其中字符|\n|`[-]`|字符范围|`[a-z]` 包括所有小写字母, 顺序按照 Unicode 排序(包含了 ASCII)|\n|特殊元字符|||\n|`\\s`|任意数量的空白字符|如空格, 换行符等|\n|`\\S`|任意数量的可见字符|如普通字母, 汉字等|\n|`\\b`|匹配一个单词边界|如 `This is a high tower`, `hi\\b` 将会匹配 `high` 中的 `hi`, 而 `This` 中的 `hi` 不会匹配|\n|`\\B`|匹配一个非单词边界||\n|`\\d`|匹配数字字符|等价于 `[0-9]`|\n|`\\D`|匹配非数字字符|等价于 `[^0-9]`|\n|`\\w`|匹配字母, 数字, 下划线|等价于 `[A-Za-z0-9_]`|\n|`\\W`|匹配非字母, 数字, 下划线|等价于 `[^A-Za-z0-9_]`|\n|`\\x`|匹配一个 16 进制编码字符, 使用 ASCII编码|例如 `\\x048` 表示 `0`|\n|`\\u`|匹配一个 16 进制编码字符, 使用 Unicode编码||\n|`\\num`|引用前方获取的子表达式||\n|`\\c`|匹配 [控制字符](#值得在意的控制字符)|例如 `\\cM` 匹配回车 `\\r`(`Control-M`)|\n\n\n## 值得在意的控制字符\n\n- 换行符, `\\n`, `control-J`\n- 回车符, `\\e`, `control-M`\n- 换页符, `\\f`, `control-L`","slug":"regex-正则表达式","published":0,"updated":"2018-08-23T05:51:18.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw72000lw8lkday64zrp","content":"<h1 id=\"正则表达式简介\">正则表达式简介</h1>\r\n<p>正则表达式适用于匹配字符串.</p>\r\n<p>正则表达式中拥有的元素有:</p>\r\n<ul>\r\n<li>普通字符, 例如一般的 <code>abcd</code> 和 <code>中文字符</code> 等等.</li>\r\n<li>元字符, 元字符起特殊作用, 如果要匹配元字符本身, 需要使用反斜杠 <code>\\</code> 转义.</li>\r\n</ul>\r\n<h1 id=\"正则表达式\">正则表达式</h1>\r\n<p>建议先用 python 写一个简单的正则判断器:</p>\r\n<p><a href=\"/assert/python/regex_test.py\">我写了一个小东西</a></p>\r\n<h2 id=\"万用表达式\">万用表达式:</h2>\r\n<ul>\r\n<li><code>.</code> 点号, 表示一个任意符号(除了换行符).</li>\r\n</ul>\r\n<h2 id=\"限定符\">限定符</h2>\r\n<p>在正则表达式中, 有这样几个有用的元字符用于指定重复次数:</p>\r\n<ul>\r\n<li><code>*</code> 星号, 限定前方的那个字符将会重复 0 次以上.</li>\r\n<li><code>+</code> 加号, 限定前方的那个字符将会重复 1 次以上.</li>\r\n<li><code>?</code> 问好, 限定前方的那个字符将会出现 1 次或 0 次.</li>\r\n</ul>\r\n<p>用这些元字符, 可以起到更高级的通配符功能.</p>\r\n<p>例如</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colou?r 可以匹配 colour 或 color</span><br><span class=\"line\">wtf+    可以匹配 wtf, wtff, wtfff, ...</span><br><span class=\"line\">wtf*    则可以匹配 wt, wtf, wtff, wtfff, ...</span><br><span class=\"line\">而 .*   的组合可以匹配任意字符串.</span><br></pre></td></tr></table></figure>\r\n<p>还可以自定义重复次数, 这些表达式都和花括号有关:</p>\r\n<ul>\r\n<li><code>{n}</code> 指定重复 n 次.</li>\r\n<li><code>{m,}</code> 指定重复 m 次及以上.</li>\r\n<li><code>{,n}</code> 指定重复 n 次及以内.</li>\r\n<li><code>{m,n}</code> 指定重复 m 次到 n 次.</li>\r\n</ul>\r\n<h2 id=\"定位符\">定位符</h2>\r\n<p>除此之外, 还需要了解一下这些用于定位字符串的元字符:</p>\r\n<ul>\r\n<li><code>^</code> 表示一个字符串的开始.</li>\r\n<li><code>$</code> 表示一个字符串的结束.</li>\r\n</ul>\r\n<p>例如</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test a text</span><br><span class=\"line\"></span><br><span class=\"line\">^t 将会匹配 test 的第一个 t</span><br><span class=\"line\">t$ 将会匹配到 text 的最后一个 t</span><br></pre></td></tr></table></figure>\r\n<p>另外还有用于在字符串中定位单词的正则表达式:</p>\r\n<ul>\r\n<li><code>\\b</code> 匹配一个单词边界. 如 <code>This is a high tower</code>, <code>hi\\b</code> 将会匹配 <code>high</code> 中的 <code>hi</code>, 而 <code>This</code> 中的 <code>hi</code> 不会匹配</li>\r\n<li><code>\\B</code> 匹配一个非单词边界.</li>\r\n</ul>\r\n<p><strong>不能将限定符用在定位符之后!!!</strong></p>\r\n<h2 id=\"子表达式相关\">子表达式相关</h2>\r\n<p>在一个正则表达式中, 可以嵌入子表达式. 有两种形式:</p>\r\n<ul>\r\n<li><code>()</code> 在括号中的字符, 必须全部匹配, 才会匹配整个子表达式. 整个表达式作为一个字符串.</li>\r\n<li><code>[]</code> 在括号中的字符, 只要存在一个匹配, 就会匹配整个子表达式. 整个表达式作为一个字符.</li>\r\n</ul>\r\n<p>例如:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Common plain text in windows notepad</span><br><span class=\"line\">[win] 将会匹配所有的 w, i, n</span><br><span class=\"line\">(win) 只会匹配 windows 中的 &quot;win&quot;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"在-python-中使用-re-模块\">在 Python 中使用 re 模块</h1>\r\n<p><code>re</code> 模块中提供了两个最主要的函数:</p>\r\n<ul>\r\n<li><code>match()</code> 用于检测目标字符串是否能被正则表达式匹配.</li>\r\n<li><code>findall()</code> 用于搜索目标字符串中能被正则表达式匹配的内容, 并存储到一个列表中返回.</li>\r\n</ul>\r\n<p>另外还有一些函数, 留待后文讲解.</p>\r\n<h1 id=\"regex-语法列表\">Regex 语法列表</h1>\r\n<table style=\"width:11%;\">\r\n<colgroup>\r\n<col width=\"5%\">\r\n<col width=\"2%\">\r\n<col width=\"2%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">表达式</th>\r\n<th>含义</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\</code></td>\r\n<td>转义字符</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>.</code></td>\r\n<td>任意字符(不包括换行符)</td>\r\n<td>要匹配换行符, 使用 <code>[.\\n]</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">定位符</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>^</code></td>\r\n<td>字符串首</td>\r\n<td>匹配字符串开始位置, 如果设置了 multiline, 也可匹配换行符之后的位置</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>$</code></td>\r\n<td>字符串尾</td>\r\n<td>匹配字符串结束位置, 如果设置了 multiline, 也可匹配换行符之前的位置</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">限制符</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>{}</code></td>\r\n<td>限制符</td>\r\n<td>限制字符重复次数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>{n}</code></td>\r\n<td>字符正好出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>{n,}</code></td>\r\n<td>字符至少出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>{m,n}</code></td>\r\n<td>字符出现 m 到 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>*</code></td>\r\n<td>字符出现 0 次或任意次</td>\r\n<td><code>{0,}</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>+</code></td>\r\n<td>字符至少出现一次</td>\r\n<td><code>{1,}</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>?</code></td>\r\n<td>字符出现 0 次或 1 次</td>\r\n<td><code>{0,1}</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>?</code></td>\r\n<td>贪婪设置符</td>\r\n<td>当 <code>?</code> 紧跟某限制符时, 匹配使用非贪婪模式</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">字符集合</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>|</code></td>\r\n<td>表示&quot;或&quot;</td>\r\n<td>这东西优先级不高</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>()</code></td>\r\n<td>子字符集</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>[]</code></td>\r\n<td>字符集合</td>\r\n<td>表示包括其中字符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>[^]</code></td>\r\n<td>负值字符集合</td>\r\n<td>不包括其中字符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>[-]</code></td>\r\n<td>字符范围</td>\r\n<td><code>[a-z]</code> 包括所有小写字母, 顺序按照 Unicode 排序(包含了 ASCII)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">特殊元字符</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\s</code></td>\r\n<td>任意数量的空白字符</td>\r\n<td>如空格, 换行符等</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\S</code></td>\r\n<td>任意数量的可见字符</td>\r\n<td>如普通字母, 汉字等</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\b</code></td>\r\n<td>匹配一个单词边界</td>\r\n<td>如 <code>This is a high tower</code>, <code>hi\\b</code> 将会匹配 <code>high</code> 中的 <code>hi</code>, 而 <code>This</code> 中的 <code>hi</code> 不会匹配</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\B</code></td>\r\n<td>匹配一个非单词边界</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\d</code></td>\r\n<td>匹配数字字符</td>\r\n<td>等价于 <code>[0-9]</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\D</code></td>\r\n<td>匹配非数字字符</td>\r\n<td>等价于 <code>[^0-9]</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\w</code></td>\r\n<td>匹配字母, 数字, 下划线</td>\r\n<td>等价于 <code>[A-Za-z0-9_]</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\W</code></td>\r\n<td>匹配非字母, 数字, 下划线</td>\r\n<td>等价于 <code>[^A-Za-z0-9_]</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\x</code></td>\r\n<td>匹配一个 16 进制编码字符, 使用 ASCII编码</td>\r\n<td>例如 <code>\\x048</code> 表示 <code>0</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\u</code></td>\r\n<td>匹配一个 16 进制编码字符, 使用 Unicode编码</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\num</code></td>\r\n<td>引用前方获取的子表达式</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\c</code></td>\r\n<td>匹配 <a href=\"#值得在意的控制字符\">控制字符</a></td>\r\n<td>例如 <code>\\cM</code> 匹配回车 <code>\\r</code>(<code>Control-M</code>)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"值得在意的控制字符\">值得在意的控制字符</h2>\r\n<ul>\r\n<li>换行符, <code>\\n</code>, <code>control-J</code></li>\r\n<li>回车符, <code>\\e</code>, <code>control-M</code></li>\r\n<li>换页符, <code>\\f</code>, <code>control-L</code></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"正则表达式简介\">正则表达式简介</h1>\r\n<p>正则表达式适用于匹配字符串.</p>\r\n<p>正则表达式中拥有的元素有:</p>\r\n<ul>\r\n<li>普通字符, 例如一般的 <code>abcd</code> 和 <code>中文字符</code> 等等.</li>\r\n<li>元字符, 元字符起特殊作用, 如果要匹配元字符本身, 需要使用反斜杠 <code>\\</code> 转义.</li>\r\n</ul>\r\n<h1 id=\"正则表达式\">正则表达式</h1>\r\n<p>建议先用 python 写一个简单的正则判断器:</p>\r\n<p><a href=\"/assert/python/regex_test.py\">我写了一个小东西</a></p>\r\n<h2 id=\"万用表达式\">万用表达式:</h2>\r\n<ul>\r\n<li><code>.</code> 点号, 表示一个任意符号(除了换行符).</li>\r\n</ul>\r\n<h2 id=\"限定符\">限定符</h2>\r\n<p>在正则表达式中, 有这样几个有用的元字符用于指定重复次数:</p>\r\n<ul>\r\n<li><code>*</code> 星号, 限定前方的那个字符将会重复 0 次以上.</li>\r\n<li><code>+</code> 加号, 限定前方的那个字符将会重复 1 次以上.</li>\r\n<li><code>?</code> 问好, 限定前方的那个字符将会出现 1 次或 0 次.</li>\r\n</ul>\r\n<p>用这些元字符, 可以起到更高级的通配符功能.</p>\r\n<p>例如</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colou?r 可以匹配 colour 或 color</span><br><span class=\"line\">wtf+    可以匹配 wtf, wtff, wtfff, ...</span><br><span class=\"line\">wtf*    则可以匹配 wt, wtf, wtff, wtfff, ...</span><br><span class=\"line\">而 .*   的组合可以匹配任意字符串.</span><br></pre></td></tr></table></figure>\r\n<p>还可以自定义重复次数, 这些表达式都和花括号有关:</p>\r\n<ul>\r\n<li><code>{n}</code> 指定重复 n 次.</li>\r\n<li><code>{m,}</code> 指定重复 m 次及以上.</li>\r\n<li><code>{,n}</code> 指定重复 n 次及以内.</li>\r\n<li><code>{m,n}</code> 指定重复 m 次到 n 次.</li>\r\n</ul>\r\n<h2 id=\"定位符\">定位符</h2>\r\n<p>除此之外, 还需要了解一下这些用于定位字符串的元字符:</p>\r\n<ul>\r\n<li><code>^</code> 表示一个字符串的开始.</li>\r\n<li><code>$</code> 表示一个字符串的结束.</li>\r\n</ul>\r\n<p>例如</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test a text</span><br><span class=\"line\"></span><br><span class=\"line\">^t 将会匹配 test 的第一个 t</span><br><span class=\"line\">t$ 将会匹配到 text 的最后一个 t</span><br></pre></td></tr></table></figure>\r\n<p>另外还有用于在字符串中定位单词的正则表达式:</p>\r\n<ul>\r\n<li><code>\\b</code> 匹配一个单词边界. 如 <code>This is a high tower</code>, <code>hi\\b</code> 将会匹配 <code>high</code> 中的 <code>hi</code>, 而 <code>This</code> 中的 <code>hi</code> 不会匹配</li>\r\n<li><code>\\B</code> 匹配一个非单词边界.</li>\r\n</ul>\r\n<p><strong>不能将限定符用在定位符之后!!!</strong></p>\r\n<h2 id=\"子表达式相关\">子表达式相关</h2>\r\n<p>在一个正则表达式中, 可以嵌入子表达式. 有两种形式:</p>\r\n<ul>\r\n<li><code>()</code> 在括号中的字符, 必须全部匹配, 才会匹配整个子表达式. 整个表达式作为一个字符串.</li>\r\n<li><code>[]</code> 在括号中的字符, 只要存在一个匹配, 就会匹配整个子表达式. 整个表达式作为一个字符.</li>\r\n</ul>\r\n<p>例如:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Common plain text in windows notepad</span><br><span class=\"line\">[win] 将会匹配所有的 w, i, n</span><br><span class=\"line\">(win) 只会匹配 windows 中的 &quot;win&quot;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"在-python-中使用-re-模块\">在 Python 中使用 re 模块</h1>\r\n<p><code>re</code> 模块中提供了两个最主要的函数:</p>\r\n<ul>\r\n<li><code>match()</code> 用于检测目标字符串是否能被正则表达式匹配.</li>\r\n<li><code>findall()</code> 用于搜索目标字符串中能被正则表达式匹配的内容, 并存储到一个列表中返回.</li>\r\n</ul>\r\n<p>另外还有一些函数, 留待后文讲解.</p>\r\n<h1 id=\"regex-语法列表\">Regex 语法列表</h1>\r\n<table style=\"width:11%;\">\r\n<colgroup>\r\n<col width=\"5%\">\r\n<col width=\"2%\">\r\n<col width=\"2%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">表达式</th>\r\n<th>含义</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\</code></td>\r\n<td>转义字符</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>.</code></td>\r\n<td>任意字符(不包括换行符)</td>\r\n<td>要匹配换行符, 使用 <code>[.\\n]</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">定位符</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>^</code></td>\r\n<td>字符串首</td>\r\n<td>匹配字符串开始位置, 如果设置了 multiline, 也可匹配换行符之后的位置</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>$</code></td>\r\n<td>字符串尾</td>\r\n<td>匹配字符串结束位置, 如果设置了 multiline, 也可匹配换行符之前的位置</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">限制符</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>{}</code></td>\r\n<td>限制符</td>\r\n<td>限制字符重复次数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>{n}</code></td>\r\n<td>字符正好出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>{n,}</code></td>\r\n<td>字符至少出现 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>{m,n}</code></td>\r\n<td>字符出现 m 到 n 次</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>*</code></td>\r\n<td>字符出现 0 次或任意次</td>\r\n<td><code>{0,}</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>+</code></td>\r\n<td>字符至少出现一次</td>\r\n<td><code>{1,}</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>?</code></td>\r\n<td>字符出现 0 次或 1 次</td>\r\n<td><code>{0,1}</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>?</code></td>\r\n<td>贪婪设置符</td>\r\n<td>当 <code>?</code> 紧跟某限制符时, 匹配使用非贪婪模式</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">字符集合</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>|</code></td>\r\n<td>表示&quot;或&quot;</td>\r\n<td>这东西优先级不高</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>()</code></td>\r\n<td>子字符集</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>[]</code></td>\r\n<td>字符集合</td>\r\n<td>表示包括其中字符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>[^]</code></td>\r\n<td>负值字符集合</td>\r\n<td>不包括其中字符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>[-]</code></td>\r\n<td>字符范围</td>\r\n<td><code>[a-z]</code> 包括所有小写字母, 顺序按照 Unicode 排序(包含了 ASCII)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">特殊元字符</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\s</code></td>\r\n<td>任意数量的空白字符</td>\r\n<td>如空格, 换行符等</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\S</code></td>\r\n<td>任意数量的可见字符</td>\r\n<td>如普通字母, 汉字等</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\b</code></td>\r\n<td>匹配一个单词边界</td>\r\n<td>如 <code>This is a high tower</code>, <code>hi\\b</code> 将会匹配 <code>high</code> 中的 <code>hi</code>, 而 <code>This</code> 中的 <code>hi</code> 不会匹配</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\B</code></td>\r\n<td>匹配一个非单词边界</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\d</code></td>\r\n<td>匹配数字字符</td>\r\n<td>等价于 <code>[0-9]</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\D</code></td>\r\n<td>匹配非数字字符</td>\r\n<td>等价于 <code>[^0-9]</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\w</code></td>\r\n<td>匹配字母, 数字, 下划线</td>\r\n<td>等价于 <code>[A-Za-z0-9_]</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\W</code></td>\r\n<td>匹配非字母, 数字, 下划线</td>\r\n<td>等价于 <code>[^A-Za-z0-9_]</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\x</code></td>\r\n<td>匹配一个 16 进制编码字符, 使用 ASCII编码</td>\r\n<td>例如 <code>\\x048</code> 表示 <code>0</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\u</code></td>\r\n<td>匹配一个 16 进制编码字符, 使用 Unicode编码</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>\\num</code></td>\r\n<td>引用前方获取的子表达式</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>\\c</code></td>\r\n<td>匹配 <a href=\"#值得在意的控制字符\">控制字符</a></td>\r\n<td>例如 <code>\\cM</code> 匹配回车 <code>\\r</code>(<code>Control-M</code>)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"值得在意的控制字符\">值得在意的控制字符</h2>\r\n<ul>\r\n<li>换行符, <code>\\n</code>, <code>control-J</code></li>\r\n<li>回车符, <code>\\e</code>, <code>control-M</code></li>\r\n<li>换页符, <code>\\f</code>, <code>control-L</code></li>\r\n</ul>\r\n"},{"title":"Windows汇编语言环境","mathjax":false,"date":"2018-08-02T05:53:51.000Z","_content":"\n# 使用 GCC (MinGW-w64) + Vscode\n\nGCC 的一些参数\n\n编译一个 C 程序的过程.\n\nC 源代码 -> 预处理后的 C 源代码 -> 汇编 -> 编译至机器码 -> 链接为可执行文件\n\n|GCC 参数|作用|备注|\n|-|-|-|\n|`-E`|预处理, 但不编译, 生成`.i`文件|实际调用`cpp`|\n|`-S`|生成至汇编代码, 但不汇编, 根据 `--masm` 参数的不同, 生成`.s`或`.asm`文件|实际调用` `|\n|`-c`|汇编至机器码, 但不链接生成`.o`或`.obj`文件|实际调用`as`|\n|`--masm=`|配置汇编格式|`intel`, Intel 格式; `att` AT&T 格式|\n\nMinGW-w64 的 as.exe 对 intel 格式的汇编有问题, **不识别扩展名**, 所以编译 intel 格式的汇编文件时仍然使用 `.s` 扩展名. 经测试, 运行状况正常.\n\n```\n# 使用 .asm 扩展名时的报错.\nld.exe:./test.asm: file format not recognized; treating as linker script\nld.exe:./test.asm:1: syntax error\ncollect2.exe: error: ld returned 1 exit status\n```\n\n**未发现可行的图形化调试方法** 暂时放弃该方案.\n\n# 使用 Vitual Studio\n\n测试了一下书上抄来的代码:\n\n```asm\n\t.386\n\t.model\tflat\n\t.stack\t100\n\t.data\nnum1\tsdword\t?\nnum2\tsdword\t?\n\t.code\nmain\tproc\n\tmov\tnum1,\t5\n\tmov\teax,\tnum1\n\tmov\tnum2,\teax\n\tret\nmain\tendp\n\tend\n```\n\n遇到以下错误, 正在寻找解决方案\n\n```\nLINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup\ntest.exe : fatal error LNK1120: 1 个无法解析的外部命令\n```\n\n[Visual Studio2017汇编环境教程](https://zhuanlan.zhihu.com/p/31918676)\n[使用visual studio编译运行汇编程序](https://cfhm.github.io/2017/10/18/asm-1/)","source":"_drafts/windows汇编语言环境.md","raw":"---\ntitle: Windows汇编语言环境\nmathjax: false\ntags:\n  - Assemble\ncategories:\n  - Assemble\ndate: 2018-08-02 13:53:51\n---\n\n# 使用 GCC (MinGW-w64) + Vscode\n\nGCC 的一些参数\n\n编译一个 C 程序的过程.\n\nC 源代码 -> 预处理后的 C 源代码 -> 汇编 -> 编译至机器码 -> 链接为可执行文件\n\n|GCC 参数|作用|备注|\n|-|-|-|\n|`-E`|预处理, 但不编译, 生成`.i`文件|实际调用`cpp`|\n|`-S`|生成至汇编代码, 但不汇编, 根据 `--masm` 参数的不同, 生成`.s`或`.asm`文件|实际调用` `|\n|`-c`|汇编至机器码, 但不链接生成`.o`或`.obj`文件|实际调用`as`|\n|`--masm=`|配置汇编格式|`intel`, Intel 格式; `att` AT&T 格式|\n\nMinGW-w64 的 as.exe 对 intel 格式的汇编有问题, **不识别扩展名**, 所以编译 intel 格式的汇编文件时仍然使用 `.s` 扩展名. 经测试, 运行状况正常.\n\n```\n# 使用 .asm 扩展名时的报错.\nld.exe:./test.asm: file format not recognized; treating as linker script\nld.exe:./test.asm:1: syntax error\ncollect2.exe: error: ld returned 1 exit status\n```\n\n**未发现可行的图形化调试方法** 暂时放弃该方案.\n\n# 使用 Vitual Studio\n\n测试了一下书上抄来的代码:\n\n```asm\n\t.386\n\t.model\tflat\n\t.stack\t100\n\t.data\nnum1\tsdword\t?\nnum2\tsdword\t?\n\t.code\nmain\tproc\n\tmov\tnum1,\t5\n\tmov\teax,\tnum1\n\tmov\tnum2,\teax\n\tret\nmain\tendp\n\tend\n```\n\n遇到以下错误, 正在寻找解决方案\n\n```\nLINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup\ntest.exe : fatal error LNK1120: 1 个无法解析的外部命令\n```\n\n[Visual Studio2017汇编环境教程](https://zhuanlan.zhihu.com/p/31918676)\n[使用visual studio编译运行汇编程序](https://cfhm.github.io/2017/10/18/asm-1/)","slug":"windows汇编语言环境","published":0,"updated":"2018-08-02T09:20:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw75000qw8lkpzbu4lna","content":"<h1 id=\"使用-gcc-mingw-w64-vscode\">使用 GCC (MinGW-w64) + Vscode</h1>\r\n<p>GCC 的一些参数</p>\r\n<p>编译一个 C 程序的过程.</p>\r\n<p>C 源代码 -&gt; 预处理后的 C 源代码 -&gt; 汇编 -&gt; 编译至机器码 -&gt; 链接为可执行文件</p>\r\n<table style=\"width:8%;\">\r\n<colgroup>\r\n<col width=\"2%\">\r\n<col width=\"2%\">\r\n<col width=\"2%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>GCC 参数</th>\r\n<th>作用</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>-E</code></td>\r\n<td>预处理, 但不编译, 生成<code>.i</code>文件</td>\r\n<td>实际调用<code>cpp</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>-S</code></td>\r\n<td>生成至汇编代码, 但不汇编, 根据 <code>--masm</code> 参数的不同, 生成<code>.s</code>或<code>.asm</code>文件</td>\r\n<td>实际调用<code>`| |</code>-c<code>|汇编至机器码, 但不链接生成</code>.o<code>或</code>.obj<code>文件|实际调用</code>as<code>| |</code>--masm=<code>|配置汇编格式|</code>intel<code>, Intel 格式;</code>att` AT&amp;T 格式</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>MinGW-w64 的 as.exe 对 intel 格式的汇编有问题, <strong>不识别扩展名</strong>, 所以编译 intel 格式的汇编文件时仍然使用 <code>.s</code> 扩展名. 经测试, 运行状况正常.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 .asm 扩展名时的报错.</span><br><span class=\"line\">ld.exe:./test.asm: file format not recognized; treating as linker script</span><br><span class=\"line\">ld.exe:./test.asm:1: syntax error</span><br><span class=\"line\">collect2.exe: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>\r\n<p><strong>未发现可行的图形化调试方法</strong> 暂时放弃该方案.</p>\r\n<h1 id=\"使用-vitual-studio\">使用 Vitual Studio</h1>\r\n<p>测试了一下书上抄来的代码:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.386</span><br><span class=\"line\">\t.model\tflat</span><br><span class=\"line\">\t.stack\t100</span><br><span class=\"line\">\t.data</span><br><span class=\"line\">num1\tsdword\t?</span><br><span class=\"line\">num2\tsdword\t?</span><br><span class=\"line\">\t.code</span><br><span class=\"line\">main\tproc</span><br><span class=\"line\">\tmov\tnum1,\t5</span><br><span class=\"line\">\tmov\teax,\tnum1</span><br><span class=\"line\">\tmov\tnum2,\teax</span><br><span class=\"line\">\tret</span><br><span class=\"line\">main\tendp</span><br><span class=\"line\">\tend</span><br></pre></td></tr></table></figure>\r\n<p>遇到以下错误, 正在寻找解决方案</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup</span><br><span class=\"line\">test.exe : fatal error LNK1120: 1 个无法解析的外部命令</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/31918676\" target=\"_blank\" rel=\"noopener\">Visual Studio2017汇编环境教程</a> <a href=\"https://cfhm.github.io/2017/10/18/asm-1/\" target=\"_blank\" rel=\"noopener\">使用visual studio编译运行汇编程序</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用-gcc-mingw-w64-vscode\">使用 GCC (MinGW-w64) + Vscode</h1>\r\n<p>GCC 的一些参数</p>\r\n<p>编译一个 C 程序的过程.</p>\r\n<p>C 源代码 -&gt; 预处理后的 C 源代码 -&gt; 汇编 -&gt; 编译至机器码 -&gt; 链接为可执行文件</p>\r\n<table style=\"width:8%;\">\r\n<colgroup>\r\n<col width=\"2%\">\r\n<col width=\"2%\">\r\n<col width=\"2%\">\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>GCC 参数</th>\r\n<th>作用</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>-E</code></td>\r\n<td>预处理, 但不编译, 生成<code>.i</code>文件</td>\r\n<td>实际调用<code>cpp</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>-S</code></td>\r\n<td>生成至汇编代码, 但不汇编, 根据 <code>--masm</code> 参数的不同, 生成<code>.s</code>或<code>.asm</code>文件</td>\r\n<td>实际调用<code>`| |</code>-c<code>|汇编至机器码, 但不链接生成</code>.o<code>或</code>.obj<code>文件|实际调用</code>as<code>| |</code>--masm=<code>|配置汇编格式|</code>intel<code>, Intel 格式;</code>att` AT&amp;T 格式</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>MinGW-w64 的 as.exe 对 intel 格式的汇编有问题, <strong>不识别扩展名</strong>, 所以编译 intel 格式的汇编文件时仍然使用 <code>.s</code> 扩展名. 经测试, 运行状况正常.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 .asm 扩展名时的报错.</span><br><span class=\"line\">ld.exe:./test.asm: file format not recognized; treating as linker script</span><br><span class=\"line\">ld.exe:./test.asm:1: syntax error</span><br><span class=\"line\">collect2.exe: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>\r\n<p><strong>未发现可行的图形化调试方法</strong> 暂时放弃该方案.</p>\r\n<h1 id=\"使用-vitual-studio\">使用 Vitual Studio</h1>\r\n<p>测试了一下书上抄来的代码:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.386</span><br><span class=\"line\">\t.model\tflat</span><br><span class=\"line\">\t.stack\t100</span><br><span class=\"line\">\t.data</span><br><span class=\"line\">num1\tsdword\t?</span><br><span class=\"line\">num2\tsdword\t?</span><br><span class=\"line\">\t.code</span><br><span class=\"line\">main\tproc</span><br><span class=\"line\">\tmov\tnum1,\t5</span><br><span class=\"line\">\tmov\teax,\tnum1</span><br><span class=\"line\">\tmov\tnum2,\teax</span><br><span class=\"line\">\tret</span><br><span class=\"line\">main\tendp</span><br><span class=\"line\">\tend</span><br></pre></td></tr></table></figure>\r\n<p>遇到以下错误, 正在寻找解决方案</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LINK: error LNK2001 : 无法解析的外部符号 _mainCRTStartup</span><br><span class=\"line\">test.exe : fatal error LNK1120: 1 个无法解析的外部命令</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/31918676\" target=\"_blank\" rel=\"noopener\">Visual Studio2017汇编环境教程</a> <a href=\"https://cfhm.github.io/2017/10/18/asm-1/\" target=\"_blank\" rel=\"noopener\">使用visual studio编译运行汇编程序</a></p>\r\n"},{"title":"Windows系统中链接类型","mathjax":false,"date":"2018-07-28T16:43:26.000Z","_content":"\n## 先来讲讲 \"快捷方式\"\n\n## 符号链接 SymbolicLink\n\n## 硬链接 HardLink\n\n## Junction","source":"_drafts/windows系统中链接类型.md","raw":"---\ntitle: Windows系统中链接类型\nmathjax: false\ntags:\n  - Windows\n  - 'File System'\ncategories:\n  - 操作系统\ndate: 2018-07-29 00:43:26\n---\n\n## 先来讲讲 \"快捷方式\"\n\n## 符号链接 SymbolicLink\n\n## 硬链接 HardLink\n\n## Junction","slug":"windows系统中链接类型","published":0,"updated":"2018-07-27T12:14:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw76000tw8lkgblmpdho","content":"<h2 id=\"先来讲讲-快捷方式\">先来讲讲 &quot;快捷方式&quot;</h2>\r\n<h2 id=\"符号链接-symboliclink\">符号链接 SymbolicLink</h2>\r\n<h2 id=\"硬链接-hardlink\">硬链接 HardLink</h2>\r\n<h2 id=\"junction\">Junction</h2>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先来讲讲-快捷方式\">先来讲讲 &quot;快捷方式&quot;</h2>\r\n<h2 id=\"符号链接-symboliclink\">符号链接 SymbolicLink</h2>\r\n<h2 id=\"硬链接-hardlink\">硬链接 HardLink</h2>\r\n<h2 id=\"junction\">Junction</h2>\r\n"},{"title":"Android使用Termux","date":"2018-08-22T15:22:44.000Z","_content":"\nTermux 是运行在安卓手机上的一个终端模拟器, 不需要 root 权限.\n\n其文件系统相对于安卓根目录的路径如下:\n\n- 根目录为 `/data/data/com.termux/files/`\n- 其用户家目录在 `/data/data/com.termux/files/home/`\n- 而传统 Linux 的 `/bin` ,`/etc` 等等目录都被塞进 `/data/data/com.termux/files/usr/*` 中了.\n\n# Termux 配置\n\n<!--more-->\n\n```\nvim\nopenssh\nzsh\ngit\noh-my-zsh\n```\n\n## 基本配置\n\n安装 Termux 后运行以下指令(可以复制粘贴):\n\n```sh\necho \"deb [arch=all,aarch64] http://mirrors.tuna.tsinghua.edu.cn/termux stable main\" > /etc/apt/sources.list\napt update && apt upgrade\n```\n\n将 Termux 的软件源由 termux 官网切换到清华大学镜像.\n\n之后下载几个必要软件:\n\n```sh\napt install vim\napt install openssh\n```\n\n> 注: 安装完 vim 之后, 立刻在家目录下创建 `.vimrc`, 至少先设置 `set background=dark` 否则配色瞎眼.\n\n## 配置 SSH\n\n手机上的键盘输入极其不爽, 因为是需要找个 Linux 环境, 所以就通过在 PC 上用 SSH 远程登陆的方式进入 Termux.\n\n安装了 `openssh` 之后就使用 `sshd` 指令开启 SSH 服务.\n\n之后需要确认 3 条信息:\n\n0. Termux 用户名:\n  - Android 系统对每个应用都创建了一个用户便于控制权限, 这些用户名大多是 `u0_a123` 之类的格式.\n  - 使用 `whoami` 指令, 这是最简单的方法. 此指令用于查询当前登陆的用户名.\n  - 使用 `ps` 指令查看 termux 运行的进程, 其中就有用户名信息. 在我得知 `whoami` 之前, 我都是用这个的...\n  - 使用 `id` 指令.\n  - 参考链接告知的其他命令在 Termux 上不受支持.\n0. SSH 服务使用的端口.\n  - 一般的 Linux 使用 `:22` 作为 SSH Server 的端口, 但是 Termux 默认 SSH 端口为 `8022`.\n  - 如果手机有防火墙把此端口封锁了(表现就是 Connection Refuse), 而又没有权限设置. 在 `/usr/etc/ssh/sshd_config` 文件中配置 `Port 65500` 换一个不常用的端口号.\n  - 如果想知道查看 Linux 系统占用端口的命令, 它就是 `netstat -ntlp`.\n0. 手机的 IP 地址.\n  - `ifconfig`.\n\nTermux 不允许使用密码登陆, 因为用户是安卓系统自动创建的, 鬼知道密码是什么. 要登陆必须配置 `authorized_keys`.\n\n在 PC 上使用 `ssh-keygen` 生成一个新密钥, 或者用以前使用的老密钥. 将 `id_rsa.pub` 公钥内容添加到 Termux 的 `~/.ssh/authorized_keys` 中.\n\n之后就可以使用 `ssh u0_a123 -p 8022` 登陆了. `-p` 参数指定连接端口.\n\n# 安装 zsh 与 oh-my-zsh\n\n`apt install zsh` 之后, 使用 `chsh -s zsh` 将登陆 Shell 切换为 zsh.\n\n安装 [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) 之前需要安装 git 和 curl, `apt install git curl`.\n\n之后下载并运行作者提供的安装脚本.\n\n```sh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n之后使用 `ls ~/.oh-my-zsh/themes` 查看有哪些支持的主题, 编辑 `~/.zshrc` 中的 `ZSH_THEME=\"\"` 项目, 选择喜欢的主题.\n\n# apt 源中 `termux-*` 软件包的作用\n\n[Termux Wiki](https://wiki.termux.com/wiki) .\n\n```\n======================= ========================================================\nPackage Name            Function\n----------------------- --------------------------------------------------------\ntermux-am               Android 活动管理.\ntermux-api              提供操作手机硬件的一些指令.\ntermux-apt-repo         用于创建 Termux 包的脚本.\ntermux-create-package   用于在 Termux 环境下创建 .deb 软件包. 默认为 Termux 环境创建.\ntermux-elf-cleaner      用于清理编译程序时连接器未使用的 ELF 文件.\ntermux-exec             提供识别 shebang 的功能. (shebang, 脚本的特殊注释, 如: #! /bin/bash)\ntermux-tools            Termux 非官方工具库.\n```\n\n## termux-api\n\n官方 Wiki 只解释了 `termux-notification` 的用法:\n\n\n```\nUsage:  termux-notification <options>\nOptions:\n --action action          action to execute when pressing the notification\n --button1 text           text to show on the first notification button\n --button1-action action  action to execute on the first notification button\n --button2 text           text to show on the second notification button\n --button2-action action  action to execute on the second notification button\n --button3 text           text to show on the third notification button\n --button3-action action  action to execute on the third notification button\n --content content        contnet to show in the notification. Read from stdin not specified here.\n --id id                  notification id (will overwrite any previous notification with the same id)\n --led-color rrggbb       color of the blinking led as RRGGBB (default: none)\n --led-on milliseconds    number of milliseconds for the LED to be on while it's flashing (default: 800)\n --led-off milliseconds   number of milliseconds for the LED to be off while it's flashing (default: 800)\n --on-delete action       action to execute when the the notification is cleared\n --priority prio          notification priority (high/low/max/min/default)\n --sound                  play a sound with the notification\n --title title            notification title to show\n --vibrate pattern        vibrate pattern, comma separated as in 500,1000,200\n```\n\n---\n\n# 参考链接\n\n- [Linux查询用户](https://blog.csdn.net/newdriver2783/article/details/8059368)\n- [TermuxWiki](https://wiki.termux.com/wiki/Main_Page)\n- [Android + Termux + SSH + Django + Ngrok 个人博客搭建过程](https://blog.csdn.net/MemoryD/article/details/81664494)\n- [关于安卓手机的牛逼软件termux使用](https://www.cnblogs.com/BlogOfMr-Leo/p/7788103.html)\n- [Termux中安装gcc-7/gfortran-7实操过程，安装成功可以编译Fortran,c/c++](http://www.cnblogs.com/BlogOfMr-Leo/p/8660920.html)\n- [神器Termux的使用日常](https://www.jianshu.com/p/5c8678cef499)\n- [在安卓上部署服务器--解决内网穿透](http://zkeeer.space/?p=96)\n","source":"_posts/Android使用Termux.md","raw":"---\ntitle: Android使用Termux\ntags:\n  - Linux\n  - Android\n  - Termux\ncategories:\n  - 日常\ndate: 2018-08-22 23:22:44\n---\n\nTermux 是运行在安卓手机上的一个终端模拟器, 不需要 root 权限.\n\n其文件系统相对于安卓根目录的路径如下:\n\n- 根目录为 `/data/data/com.termux/files/`\n- 其用户家目录在 `/data/data/com.termux/files/home/`\n- 而传统 Linux 的 `/bin` ,`/etc` 等等目录都被塞进 `/data/data/com.termux/files/usr/*` 中了.\n\n# Termux 配置\n\n<!--more-->\n\n```\nvim\nopenssh\nzsh\ngit\noh-my-zsh\n```\n\n## 基本配置\n\n安装 Termux 后运行以下指令(可以复制粘贴):\n\n```sh\necho \"deb [arch=all,aarch64] http://mirrors.tuna.tsinghua.edu.cn/termux stable main\" > /etc/apt/sources.list\napt update && apt upgrade\n```\n\n将 Termux 的软件源由 termux 官网切换到清华大学镜像.\n\n之后下载几个必要软件:\n\n```sh\napt install vim\napt install openssh\n```\n\n> 注: 安装完 vim 之后, 立刻在家目录下创建 `.vimrc`, 至少先设置 `set background=dark` 否则配色瞎眼.\n\n## 配置 SSH\n\n手机上的键盘输入极其不爽, 因为是需要找个 Linux 环境, 所以就通过在 PC 上用 SSH 远程登陆的方式进入 Termux.\n\n安装了 `openssh` 之后就使用 `sshd` 指令开启 SSH 服务.\n\n之后需要确认 3 条信息:\n\n0. Termux 用户名:\n  - Android 系统对每个应用都创建了一个用户便于控制权限, 这些用户名大多是 `u0_a123` 之类的格式.\n  - 使用 `whoami` 指令, 这是最简单的方法. 此指令用于查询当前登陆的用户名.\n  - 使用 `ps` 指令查看 termux 运行的进程, 其中就有用户名信息. 在我得知 `whoami` 之前, 我都是用这个的...\n  - 使用 `id` 指令.\n  - 参考链接告知的其他命令在 Termux 上不受支持.\n0. SSH 服务使用的端口.\n  - 一般的 Linux 使用 `:22` 作为 SSH Server 的端口, 但是 Termux 默认 SSH 端口为 `8022`.\n  - 如果手机有防火墙把此端口封锁了(表现就是 Connection Refuse), 而又没有权限设置. 在 `/usr/etc/ssh/sshd_config` 文件中配置 `Port 65500` 换一个不常用的端口号.\n  - 如果想知道查看 Linux 系统占用端口的命令, 它就是 `netstat -ntlp`.\n0. 手机的 IP 地址.\n  - `ifconfig`.\n\nTermux 不允许使用密码登陆, 因为用户是安卓系统自动创建的, 鬼知道密码是什么. 要登陆必须配置 `authorized_keys`.\n\n在 PC 上使用 `ssh-keygen` 生成一个新密钥, 或者用以前使用的老密钥. 将 `id_rsa.pub` 公钥内容添加到 Termux 的 `~/.ssh/authorized_keys` 中.\n\n之后就可以使用 `ssh u0_a123 -p 8022` 登陆了. `-p` 参数指定连接端口.\n\n# 安装 zsh 与 oh-my-zsh\n\n`apt install zsh` 之后, 使用 `chsh -s zsh` 将登陆 Shell 切换为 zsh.\n\n安装 [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) 之前需要安装 git 和 curl, `apt install git curl`.\n\n之后下载并运行作者提供的安装脚本.\n\n```sh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n之后使用 `ls ~/.oh-my-zsh/themes` 查看有哪些支持的主题, 编辑 `~/.zshrc` 中的 `ZSH_THEME=\"\"` 项目, 选择喜欢的主题.\n\n# apt 源中 `termux-*` 软件包的作用\n\n[Termux Wiki](https://wiki.termux.com/wiki) .\n\n```\n======================= ========================================================\nPackage Name            Function\n----------------------- --------------------------------------------------------\ntermux-am               Android 活动管理.\ntermux-api              提供操作手机硬件的一些指令.\ntermux-apt-repo         用于创建 Termux 包的脚本.\ntermux-create-package   用于在 Termux 环境下创建 .deb 软件包. 默认为 Termux 环境创建.\ntermux-elf-cleaner      用于清理编译程序时连接器未使用的 ELF 文件.\ntermux-exec             提供识别 shebang 的功能. (shebang, 脚本的特殊注释, 如: #! /bin/bash)\ntermux-tools            Termux 非官方工具库.\n```\n\n## termux-api\n\n官方 Wiki 只解释了 `termux-notification` 的用法:\n\n\n```\nUsage:  termux-notification <options>\nOptions:\n --action action          action to execute when pressing the notification\n --button1 text           text to show on the first notification button\n --button1-action action  action to execute on the first notification button\n --button2 text           text to show on the second notification button\n --button2-action action  action to execute on the second notification button\n --button3 text           text to show on the third notification button\n --button3-action action  action to execute on the third notification button\n --content content        contnet to show in the notification. Read from stdin not specified here.\n --id id                  notification id (will overwrite any previous notification with the same id)\n --led-color rrggbb       color of the blinking led as RRGGBB (default: none)\n --led-on milliseconds    number of milliseconds for the LED to be on while it's flashing (default: 800)\n --led-off milliseconds   number of milliseconds for the LED to be off while it's flashing (default: 800)\n --on-delete action       action to execute when the the notification is cleared\n --priority prio          notification priority (high/low/max/min/default)\n --sound                  play a sound with the notification\n --title title            notification title to show\n --vibrate pattern        vibrate pattern, comma separated as in 500,1000,200\n```\n\n---\n\n# 参考链接\n\n- [Linux查询用户](https://blog.csdn.net/newdriver2783/article/details/8059368)\n- [TermuxWiki](https://wiki.termux.com/wiki/Main_Page)\n- [Android + Termux + SSH + Django + Ngrok 个人博客搭建过程](https://blog.csdn.net/MemoryD/article/details/81664494)\n- [关于安卓手机的牛逼软件termux使用](https://www.cnblogs.com/BlogOfMr-Leo/p/7788103.html)\n- [Termux中安装gcc-7/gfortran-7实操过程，安装成功可以编译Fortran,c/c++](http://www.cnblogs.com/BlogOfMr-Leo/p/8660920.html)\n- [神器Termux的使用日常](https://www.jianshu.com/p/5c8678cef499)\n- [在安卓上部署服务器--解决内网穿透](http://zkeeer.space/?p=96)\n","slug":"Android使用Termux","published":1,"updated":"2018-08-23T17:42:19.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw76000xw8lkxf1ze91n","content":"<p>Termux 是运行在安卓手机上的一个终端模拟器, 不需要 root 权限.</p>\r\n<p>其文件系统相对于安卓根目录的路径如下:</p>\r\n<ul>\r\n<li>根目录为 <code>/data/data/com.termux/files/</code></li>\r\n<li>其用户家目录在 <code>/data/data/com.termux/files/home/</code></li>\r\n<li>而传统 Linux 的 <code>/bin</code> ,<code>/etc</code> 等等目录都被塞进 <code>/data/data/com.termux/files/usr/*</code> 中了.</li>\r\n</ul>\r\n<h1 id=\"termux-配置\">Termux 配置</h1>\r\n<a id=\"more\"></a>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim</span><br><span class=\"line\">openssh</span><br><span class=\"line\">zsh</span><br><span class=\"line\">git</span><br><span class=\"line\">oh-my-zsh</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"基本配置\">基本配置</h2>\r\n<p>安装 Termux 后运行以下指令(可以复制粘贴):</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb [arch=all,aarch64] http://mirrors.tuna.tsinghua.edu.cn/termux stable main\"</span> &gt; /etc/apt/sources.list</span><br><span class=\"line\">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure>\r\n<p>将 Termux 的软件源由 termux 官网切换到清华大学镜像.</p>\r\n<p>之后下载几个必要软件:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install vim</span><br><span class=\"line\">apt install openssh</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>注: 安装完 vim 之后, 立刻在家目录下创建 <code>.vimrc</code>, 至少先设置 <code>set background=dark</code> 否则配色瞎眼.</p>\r\n</blockquote>\r\n<h2 id=\"配置-ssh\">配置 SSH</h2>\r\n<p>手机上的键盘输入极其不爽, 因为是需要找个 Linux 环境, 所以就通过在 PC 上用 SSH 远程登陆的方式进入 Termux.</p>\r\n<p>安装了 <code>openssh</code> 之后就使用 <code>sshd</code> 指令开启 SSH 服务.</p>\r\n<p>之后需要确认 3 条信息:</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>Termux 用户名:</li>\r\n</ol>\r\n<ul>\r\n<li>Android 系统对每个应用都创建了一个用户便于控制权限, 这些用户名大多是 <code>u0_a123</code> 之类的格式.</li>\r\n<li>使用 <code>whoami</code> 指令, 这是最简单的方法. 此指令用于查询当前登陆的用户名.</li>\r\n<li>使用 <code>ps</code> 指令查看 termux 运行的进程, 其中就有用户名信息. 在我得知 <code>whoami</code> 之前, 我都是用这个的...</li>\r\n<li>使用 <code>id</code> 指令.</li>\r\n<li>参考链接告知的其他命令在 Termux 上不受支持.</li>\r\n</ul>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>SSH 服务使用的端口.</li>\r\n</ol>\r\n<ul>\r\n<li>一般的 Linux 使用 <code>:22</code> 作为 SSH Server 的端口, 但是 Termux 默认 SSH 端口为 <code>8022</code>.</li>\r\n<li>如果手机有防火墙把此端口封锁了(表现就是 Connection Refuse), 而又没有权限设置. 在 <code>/usr/etc/ssh/sshd_config</code> 文件中配置 <code>Port 65500</code> 换一个不常用的端口号.</li>\r\n<li>如果想知道查看 Linux 系统占用端口的命令, 它就是 <code>netstat -ntlp</code>.</li>\r\n</ul>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>手机的 IP 地址.</li>\r\n</ol>\r\n<ul>\r\n<li><code>ifconfig</code>.</li>\r\n</ul>\r\n<p>Termux 不允许使用密码登陆, 因为用户是安卓系统自动创建的, 鬼知道密码是什么. 要登陆必须配置 <code>authorized_keys</code>.</p>\r\n<p>在 PC 上使用 <code>ssh-keygen</code> 生成一个新密钥, 或者用以前使用的老密钥. 将 <code>id_rsa.pub</code> 公钥内容添加到 Termux 的 <code>~/.ssh/authorized_keys</code> 中.</p>\r\n<p>之后就可以使用 <code>ssh u0_a123 -p 8022</code> 登陆了. <code>-p</code> 参数指定连接端口.</p>\r\n<h1 id=\"安装-zsh-与-oh-my-zsh\">安装 zsh 与 oh-my-zsh</h1>\r\n<p><code>apt install zsh</code> 之后, 使用 <code>chsh -s zsh</code> 将登陆 Shell 切换为 zsh.</p>\r\n<p>安装 <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a> 之前需要安装 git 和 curl, <code>apt install git curl</code>.</p>\r\n<p>之后下载并运行作者提供的安装脚本.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\r\n<p>之后使用 <code>ls ~/.oh-my-zsh/themes</code> 查看有哪些支持的主题, 编辑 <code>~/.zshrc</code> 中的 <code>ZSH_THEME=&quot;&quot;</code> 项目, 选择喜欢的主题.</p>\r\n<h1 id=\"apt-源中-termux--软件包的作用\">apt 源中 <code>termux-*</code> 软件包的作用</h1>\r\n<p><a href=\"https://wiki.termux.com/wiki\" target=\"_blank\" rel=\"noopener\">Termux Wiki</a> .</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================= ========================================================</span><br><span class=\"line\">Package Name            Function</span><br><span class=\"line\">----------------------- --------------------------------------------------------</span><br><span class=\"line\">termux-am               Android 活动管理.</span><br><span class=\"line\">termux-api              提供操作手机硬件的一些指令.</span><br><span class=\"line\">termux-apt-repo         用于创建 Termux 包的脚本.</span><br><span class=\"line\">termux-create-package   用于在 Termux 环境下创建 .deb 软件包. 默认为 Termux 环境创建.</span><br><span class=\"line\">termux-elf-cleaner      用于清理编译程序时连接器未使用的 ELF 文件.</span><br><span class=\"line\">termux-exec             提供识别 shebang 的功能. (shebang, 脚本的特殊注释, 如: #! /bin/bash)</span><br><span class=\"line\">termux-tools            Termux 非官方工具库.</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"termux-api\">termux-api</h2>\r\n<p>官方 Wiki 只解释了 <code>termux-notification</code> 的用法:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:  termux-notification &lt;options&gt;</span><br><span class=\"line\">Options:</span><br><span class=\"line\"> --action action          action to execute when pressing the notification</span><br><span class=\"line\"> --button1 text           text to show on the first notification button</span><br><span class=\"line\"> --button1-action action  action to execute on the first notification button</span><br><span class=\"line\"> --button2 text           text to show on the second notification button</span><br><span class=\"line\"> --button2-action action  action to execute on the second notification button</span><br><span class=\"line\"> --button3 text           text to show on the third notification button</span><br><span class=\"line\"> --button3-action action  action to execute on the third notification button</span><br><span class=\"line\"> --content content        contnet to show in the notification. Read from stdin not specified here.</span><br><span class=\"line\"> --id id                  notification id (will overwrite any previous notification with the same id)</span><br><span class=\"line\"> --led-color rrggbb       color of the blinking led as RRGGBB (default: none)</span><br><span class=\"line\"> --led-on milliseconds    number of milliseconds for the LED to be on while it&apos;s flashing (default: 800)</span><br><span class=\"line\"> --led-off milliseconds   number of milliseconds for the LED to be off while it&apos;s flashing (default: 800)</span><br><span class=\"line\"> --on-delete action       action to execute when the the notification is cleared</span><br><span class=\"line\"> --priority prio          notification priority (high/low/max/min/default)</span><br><span class=\"line\"> --sound                  play a sound with the notification</span><br><span class=\"line\"> --title title            notification title to show</span><br><span class=\"line\"> --vibrate pattern        vibrate pattern, comma separated as in 500,1000,200</span><br></pre></td></tr></table></figure>\r\n<hr>\r\n<h1 id=\"参考链接\">参考链接</h1>\r\n<ul>\r\n<li><a href=\"https://blog.csdn.net/newdriver2783/article/details/8059368\" target=\"_blank\" rel=\"noopener\">Linux查询用户</a></li>\r\n<li><a href=\"https://wiki.termux.com/wiki/Main_Page\" target=\"_blank\" rel=\"noopener\">TermuxWiki</a></li>\r\n<li><a href=\"https://blog.csdn.net/MemoryD/article/details/81664494\" target=\"_blank\" rel=\"noopener\">Android + Termux + SSH + Django + Ngrok 个人博客搭建过程</a></li>\r\n<li><a href=\"https://www.cnblogs.com/BlogOfMr-Leo/p/7788103.html\" target=\"_blank\" rel=\"noopener\">关于安卓手机的牛逼软件termux使用</a></li>\r\n<li><a href=\"http://www.cnblogs.com/BlogOfMr-Leo/p/8660920.html\" target=\"_blank\" rel=\"noopener\">Termux中安装gcc-7/gfortran-7实操过程，安装成功可以编译Fortran,c/c++</a></li>\r\n<li><a href=\"https://www.jianshu.com/p/5c8678cef499\" target=\"_blank\" rel=\"noopener\">神器Termux的使用日常</a></li>\r\n<li><a href=\"http://zkeeer.space/?p=96\" target=\"_blank\" rel=\"noopener\">在安卓上部署服务器--解决内网穿透</a></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>Termux 是运行在安卓手机上的一个终端模拟器, 不需要 root 权限.</p>\r\n<p>其文件系统相对于安卓根目录的路径如下:</p>\r\n<ul>\r\n<li>根目录为 <code>/data/data/com.termux/files/</code></li>\r\n<li>其用户家目录在 <code>/data/data/com.termux/files/home/</code></li>\r\n<li>而传统 Linux 的 <code>/bin</code> ,<code>/etc</code> 等等目录都被塞进 <code>/data/data/com.termux/files/usr/*</code> 中了.</li>\r\n</ul>\r\n<h1 id=\"termux-配置\">Termux 配置</h1>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim</span><br><span class=\"line\">openssh</span><br><span class=\"line\">zsh</span><br><span class=\"line\">git</span><br><span class=\"line\">oh-my-zsh</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"基本配置\">基本配置</h2>\r\n<p>安装 Termux 后运行以下指令(可以复制粘贴):</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb [arch=all,aarch64] http://mirrors.tuna.tsinghua.edu.cn/termux stable main\"</span> &gt; /etc/apt/sources.list</span><br><span class=\"line\">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure>\r\n<p>将 Termux 的软件源由 termux 官网切换到清华大学镜像.</p>\r\n<p>之后下载几个必要软件:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install vim</span><br><span class=\"line\">apt install openssh</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>注: 安装完 vim 之后, 立刻在家目录下创建 <code>.vimrc</code>, 至少先设置 <code>set background=dark</code> 否则配色瞎眼.</p>\r\n</blockquote>\r\n<h2 id=\"配置-ssh\">配置 SSH</h2>\r\n<p>手机上的键盘输入极其不爽, 因为是需要找个 Linux 环境, 所以就通过在 PC 上用 SSH 远程登陆的方式进入 Termux.</p>\r\n<p>安装了 <code>openssh</code> 之后就使用 <code>sshd</code> 指令开启 SSH 服务.</p>\r\n<p>之后需要确认 3 条信息:</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>Termux 用户名:</li>\r\n</ol>\r\n<ul>\r\n<li>Android 系统对每个应用都创建了一个用户便于控制权限, 这些用户名大多是 <code>u0_a123</code> 之类的格式.</li>\r\n<li>使用 <code>whoami</code> 指令, 这是最简单的方法. 此指令用于查询当前登陆的用户名.</li>\r\n<li>使用 <code>ps</code> 指令查看 termux 运行的进程, 其中就有用户名信息. 在我得知 <code>whoami</code> 之前, 我都是用这个的...</li>\r\n<li>使用 <code>id</code> 指令.</li>\r\n<li>参考链接告知的其他命令在 Termux 上不受支持.</li>\r\n</ul>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>SSH 服务使用的端口.</li>\r\n</ol>\r\n<ul>\r\n<li>一般的 Linux 使用 <code>:22</code> 作为 SSH Server 的端口, 但是 Termux 默认 SSH 端口为 <code>8022</code>.</li>\r\n<li>如果手机有防火墙把此端口封锁了(表现就是 Connection Refuse), 而又没有权限设置. 在 <code>/usr/etc/ssh/sshd_config</code> 文件中配置 <code>Port 65500</code> 换一个不常用的端口号.</li>\r\n<li>如果想知道查看 Linux 系统占用端口的命令, 它就是 <code>netstat -ntlp</code>.</li>\r\n</ul>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>手机的 IP 地址.</li>\r\n</ol>\r\n<ul>\r\n<li><code>ifconfig</code>.</li>\r\n</ul>\r\n<p>Termux 不允许使用密码登陆, 因为用户是安卓系统自动创建的, 鬼知道密码是什么. 要登陆必须配置 <code>authorized_keys</code>.</p>\r\n<p>在 PC 上使用 <code>ssh-keygen</code> 生成一个新密钥, 或者用以前使用的老密钥. 将 <code>id_rsa.pub</code> 公钥内容添加到 Termux 的 <code>~/.ssh/authorized_keys</code> 中.</p>\r\n<p>之后就可以使用 <code>ssh u0_a123 -p 8022</code> 登陆了. <code>-p</code> 参数指定连接端口.</p>\r\n<h1 id=\"安装-zsh-与-oh-my-zsh\">安装 zsh 与 oh-my-zsh</h1>\r\n<p><code>apt install zsh</code> 之后, 使用 <code>chsh -s zsh</code> 将登陆 Shell 切换为 zsh.</p>\r\n<p>安装 <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a> 之前需要安装 git 和 curl, <code>apt install git curl</code>.</p>\r\n<p>之后下载并运行作者提供的安装脚本.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\r\n<p>之后使用 <code>ls ~/.oh-my-zsh/themes</code> 查看有哪些支持的主题, 编辑 <code>~/.zshrc</code> 中的 <code>ZSH_THEME=&quot;&quot;</code> 项目, 选择喜欢的主题.</p>\r\n<h1 id=\"apt-源中-termux--软件包的作用\">apt 源中 <code>termux-*</code> 软件包的作用</h1>\r\n<p><a href=\"https://wiki.termux.com/wiki\" target=\"_blank\" rel=\"noopener\">Termux Wiki</a> .</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================= ========================================================</span><br><span class=\"line\">Package Name            Function</span><br><span class=\"line\">----------------------- --------------------------------------------------------</span><br><span class=\"line\">termux-am               Android 活动管理.</span><br><span class=\"line\">termux-api              提供操作手机硬件的一些指令.</span><br><span class=\"line\">termux-apt-repo         用于创建 Termux 包的脚本.</span><br><span class=\"line\">termux-create-package   用于在 Termux 环境下创建 .deb 软件包. 默认为 Termux 环境创建.</span><br><span class=\"line\">termux-elf-cleaner      用于清理编译程序时连接器未使用的 ELF 文件.</span><br><span class=\"line\">termux-exec             提供识别 shebang 的功能. (shebang, 脚本的特殊注释, 如: #! /bin/bash)</span><br><span class=\"line\">termux-tools            Termux 非官方工具库.</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"termux-api\">termux-api</h2>\r\n<p>官方 Wiki 只解释了 <code>termux-notification</code> 的用法:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:  termux-notification &lt;options&gt;</span><br><span class=\"line\">Options:</span><br><span class=\"line\"> --action action          action to execute when pressing the notification</span><br><span class=\"line\"> --button1 text           text to show on the first notification button</span><br><span class=\"line\"> --button1-action action  action to execute on the first notification button</span><br><span class=\"line\"> --button2 text           text to show on the second notification button</span><br><span class=\"line\"> --button2-action action  action to execute on the second notification button</span><br><span class=\"line\"> --button3 text           text to show on the third notification button</span><br><span class=\"line\"> --button3-action action  action to execute on the third notification button</span><br><span class=\"line\"> --content content        contnet to show in the notification. Read from stdin not specified here.</span><br><span class=\"line\"> --id id                  notification id (will overwrite any previous notification with the same id)</span><br><span class=\"line\"> --led-color rrggbb       color of the blinking led as RRGGBB (default: none)</span><br><span class=\"line\"> --led-on milliseconds    number of milliseconds for the LED to be on while it&apos;s flashing (default: 800)</span><br><span class=\"line\"> --led-off milliseconds   number of milliseconds for the LED to be off while it&apos;s flashing (default: 800)</span><br><span class=\"line\"> --on-delete action       action to execute when the the notification is cleared</span><br><span class=\"line\"> --priority prio          notification priority (high/low/max/min/default)</span><br><span class=\"line\"> --sound                  play a sound with the notification</span><br><span class=\"line\"> --title title            notification title to show</span><br><span class=\"line\"> --vibrate pattern        vibrate pattern, comma separated as in 500,1000,200</span><br></pre></td></tr></table></figure>\r\n<hr>\r\n<h1 id=\"参考链接\">参考链接</h1>\r\n<ul>\r\n<li><a href=\"https://blog.csdn.net/newdriver2783/article/details/8059368\" target=\"_blank\" rel=\"noopener\">Linux查询用户</a></li>\r\n<li><a href=\"https://wiki.termux.com/wiki/Main_Page\" target=\"_blank\" rel=\"noopener\">TermuxWiki</a></li>\r\n<li><a href=\"https://blog.csdn.net/MemoryD/article/details/81664494\" target=\"_blank\" rel=\"noopener\">Android + Termux + SSH + Django + Ngrok 个人博客搭建过程</a></li>\r\n<li><a href=\"https://www.cnblogs.com/BlogOfMr-Leo/p/7788103.html\" target=\"_blank\" rel=\"noopener\">关于安卓手机的牛逼软件termux使用</a></li>\r\n<li><a href=\"http://www.cnblogs.com/BlogOfMr-Leo/p/8660920.html\" target=\"_blank\" rel=\"noopener\">Termux中安装gcc-7/gfortran-7实操过程，安装成功可以编译Fortran,c/c++</a></li>\r\n<li><a href=\"https://www.jianshu.com/p/5c8678cef499\" target=\"_blank\" rel=\"noopener\">神器Termux的使用日常</a></li>\r\n<li><a href=\"http://zkeeer.space/?p=96\" target=\"_blank\" rel=\"noopener\">在安卓上部署服务器--解决内网穿透</a></li>\r\n</ul>"},{"title":"Linux搭建AnkiServer","data":"2018-08-24T12:11:31.000Z","mathjax":false,"_content":"\n[这里](/assert/repos/anki/ankiserver.failed.md) 有一个之前失败了的方法.\n\n# 下载 AnkiServer\n\n[AnkiServer](https://pypi.org/project/AnkiServer/2.0.6/) 基于 Python2 运行, 但幸好有人写了 Python3 的版本.\n\n[tsudoko/anki-sync-server](https://github.com/tsudoko/anki-sync-server). 不过作者没有提供简单的安装办法, \n\n<!--more-->\n\n首先克隆 Git 仓库:\n\n```sh\ngit clone https://github.com/tsudoko/anki-sync-server.git ~/anki-sync-server\n```\n\n仓库里有这些东西:\n\n```\n-rw-------    1 u0_a174  u0_a174    33.7K Aug 25 01:21 COPYING\n-rw-------    1 u0_a174  u0_a174     3.1K Aug 25 01:21 README.md\ndrwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 anki-bundled\n-rwx------    1 u0_a174  u0_a174     2.7K Aug 25 01:21 ankisyncctl.py\ndrwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 ankisyncd\n-rw-------    1 u0_a174  u0_a174      303 Aug 25 01:21 ankisyncd.conf\ndrwx------    4 u0_a174  u0_a174     4.0K Aug 25 01:21 tests\n```\n\n接着用 pip 安装以下依赖项:\n\n```\nbs4\nsend2trash\npyaudio         # 这个是用于语音处理的一个库. 可以不要, 处理方法见后文.\nrequests\ndecorator\nmarkdown\nwebob\n```\n\n另外, 在机器上必须有 anki 客户端, 否则 Python 会报没有 `anki` 这个模块的错误.\n\n## 安装 pyaudio 的依赖.\n\n先来看看安装过程中报了什么错:\n\n```\ngcc -pthread -B /root/anaconda3/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/root/anaconda3/include/python3.7m -c src/_portaudiomodule.c -o build/temp.linux-x86_64-3.7/src/_portaudiomodule.o\n  src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory\n   #include \"portaudio.h\"\n            ^~~~~~~~~~~~~\n  compilation terminated.\n  error: command 'gcc' failed with exit status 1\n\n  ----------------------------------------\n    src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory\n     #include \"portaudio.h\"\n              ^~~~~~~~~~~~~\n    compilation terminated.\n    error: command 'gcc' failed with exit status 1\n\n    ----------------------------------------\n```\n\n发现就是 GCC 编译的时候出现了缺少 `portaudio.h` 库的问题. 这个库的官网为: [portaudio.com](http://portaudio.com) 需要将文件下载到 GCC 的 lib/ 里.\n\n先去 [下载页](http://portaudio.com/download.html) 查看最新版本. 下载之后解压.\n\n```sh\ntar -xvf XXXXXX\n```\n\n进入解压后的目录.\n\n由于官网推荐先安装 `ALSA`, 所以先通过 `apt install libasound-dev` 安装. 之后使用目录中的 `configure` 进行配置, 配置完成就 `make`.\n\n```sh\ncd ~/portaudio\napt install libasound-dev       # 这将下载 ALSA\nconfigure && make               # 这将编译 PortAudio 的运行库\nmake install                    # 这将把运行库安装到系统 /usr/local/lib\n```\n\n但是这只将运行库安装到 `/usr/local/lib` 中了, 头文件还得自己移动. 将头文件放在 `/usr/include` 中, 最好先创建对应目录.\n\n```sh\nmkdir /usr/include/portaudio && cp ~/portaudio/include/* /usr/include/portaudio\nmkdir /usr/include/pablio && cp ~/portaudio/pablio/* /usr/include/pablio       # 这是 Portaudio 中的另一个装满 .h 文件的目录, 不知道干嘛的. 但还是放进去吧\n```\n需要将对应路径添加到编译器搜索路径.\n\n```sh\nexport C_INCLUDE_PATH=/usr/include:$C_INCLUDE_PATH      # 头文件路径\nexport LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH  # 动态库路径\nexport LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH        # 静态库路径\n```\n\n再进行安装.\n\n## 排除 pyaudio\n\n[作者在GitHub上介绍了方法](https://github.com/tsudoko/anki-sync-server#running-ankisyncd-without-pyaudio)\n\n# 配置 AnkiServer\n\n`ankisyncd.conf`\n\n```\n[sync_app]\n# change to 127.0.0.1 if you don't want the server to be accessible from the internet\nhost = 127.0.0.1\nport = 18123            # 使用的端口\ndata_root = ./collections\nbase_url = /sync/               # 同步数据的目录, 通过 http://IP:18123/sync/ 来访问.\nbase_media_url = /msync/        # 同步媒体的目录.\nauth_db_path = ./auth.db\n# optional, for session persistence between restarts\nsession_db_path = ./session.db\n```\n\n# 使用 AnkiSyncd\n\n添加用户:\n\n```sh\nankisyncctl.py adduser <username>           # 添加用户, 与 anki app 上的用户保持一致\n```\n\n启动服务:\n\n```sh\npython3 -m ankisyncd ankisyncd.conf\n```\n\n注意, 克隆 anki 客户端之后注意调整目录结构, 使其与 ankisyncd 目录同级, 否则仍然会发生找不到模块的错误.\n\n# 连接个人 AnkiServer\n\n(我 Aliyun 服务器备案还没批下来, 除了 22 端口其他端口都给封着, 没法在客户端上做实验....)\n\n## PC 端\n\n[作者告知](https://github.com/dsnopek/anki-sync-server#point-the-anki-desktop-program-at-it) , PC 端没有相关设置, 必须自己编写插件.\n\n在 Anki 插件目录中创建一个 `myankisync.py` 文件. Anki 插件目录入口在此:\n\n![Snipaste_2018-08-25_00-19-23.png](https://i.loli.net/2018/08/25/5b80302f5bfb8.png)\n\n在其中创建 `AnkiSyncMaster.py`, myankisync 太蠢了, 换个帅点的名字. 注意, Anki 运行插件时不允许任何注释.\n\n```py\nimport anki.sync\nanki.sync.SYNC_BASE = 'http://127.0.0.1:27701/'\nanki.sync.SYNC_MEDIA_BASE = 'http://127.0.0.1:27701/msync/'\n\n# 原地址:\n#anki.sync.SYNC_BASE = 'https://ankiweb.net/'\n#anki.sync.SYNC_MEDIA_BASE = 'https://msync.ankiweb.net/'\n```\n\n需要重启客户端生效. 注意填对端口号, 并且开放防火墙对应端口.\n\n当然, 可以只让媒体文件走自己的服务器, 只需要将 `SYNC_BASE` 设为原 AnkiWeb 即可.\n\n## 连接 AnkiDroid\n\n![Screenshot_2018-08-25-00-43-38-070_com.ichi2.anki.png](https://i.loli.net/2018/08/25/5b8036260dc7f.png)\n\n## iOS\n\n据说没有任何办法.","source":"_posts/Linux搭建AnkiSync服务器.md","raw":"---\ntitle:  Linux搭建AnkiServer\ndata:   2018-8-24 20:11:31\nmathjax:  false\ntags:\n    - Linux\n    - Anki\ncategories:\n    - 日常\n---\n\n[这里](/assert/repos/anki/ankiserver.failed.md) 有一个之前失败了的方法.\n\n# 下载 AnkiServer\n\n[AnkiServer](https://pypi.org/project/AnkiServer/2.0.6/) 基于 Python2 运行, 但幸好有人写了 Python3 的版本.\n\n[tsudoko/anki-sync-server](https://github.com/tsudoko/anki-sync-server). 不过作者没有提供简单的安装办法, \n\n<!--more-->\n\n首先克隆 Git 仓库:\n\n```sh\ngit clone https://github.com/tsudoko/anki-sync-server.git ~/anki-sync-server\n```\n\n仓库里有这些东西:\n\n```\n-rw-------    1 u0_a174  u0_a174    33.7K Aug 25 01:21 COPYING\n-rw-------    1 u0_a174  u0_a174     3.1K Aug 25 01:21 README.md\ndrwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 anki-bundled\n-rwx------    1 u0_a174  u0_a174     2.7K Aug 25 01:21 ankisyncctl.py\ndrwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 ankisyncd\n-rw-------    1 u0_a174  u0_a174      303 Aug 25 01:21 ankisyncd.conf\ndrwx------    4 u0_a174  u0_a174     4.0K Aug 25 01:21 tests\n```\n\n接着用 pip 安装以下依赖项:\n\n```\nbs4\nsend2trash\npyaudio         # 这个是用于语音处理的一个库. 可以不要, 处理方法见后文.\nrequests\ndecorator\nmarkdown\nwebob\n```\n\n另外, 在机器上必须有 anki 客户端, 否则 Python 会报没有 `anki` 这个模块的错误.\n\n## 安装 pyaudio 的依赖.\n\n先来看看安装过程中报了什么错:\n\n```\ngcc -pthread -B /root/anaconda3/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/root/anaconda3/include/python3.7m -c src/_portaudiomodule.c -o build/temp.linux-x86_64-3.7/src/_portaudiomodule.o\n  src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory\n   #include \"portaudio.h\"\n            ^~~~~~~~~~~~~\n  compilation terminated.\n  error: command 'gcc' failed with exit status 1\n\n  ----------------------------------------\n    src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory\n     #include \"portaudio.h\"\n              ^~~~~~~~~~~~~\n    compilation terminated.\n    error: command 'gcc' failed with exit status 1\n\n    ----------------------------------------\n```\n\n发现就是 GCC 编译的时候出现了缺少 `portaudio.h` 库的问题. 这个库的官网为: [portaudio.com](http://portaudio.com) 需要将文件下载到 GCC 的 lib/ 里.\n\n先去 [下载页](http://portaudio.com/download.html) 查看最新版本. 下载之后解压.\n\n```sh\ntar -xvf XXXXXX\n```\n\n进入解压后的目录.\n\n由于官网推荐先安装 `ALSA`, 所以先通过 `apt install libasound-dev` 安装. 之后使用目录中的 `configure` 进行配置, 配置完成就 `make`.\n\n```sh\ncd ~/portaudio\napt install libasound-dev       # 这将下载 ALSA\nconfigure && make               # 这将编译 PortAudio 的运行库\nmake install                    # 这将把运行库安装到系统 /usr/local/lib\n```\n\n但是这只将运行库安装到 `/usr/local/lib` 中了, 头文件还得自己移动. 将头文件放在 `/usr/include` 中, 最好先创建对应目录.\n\n```sh\nmkdir /usr/include/portaudio && cp ~/portaudio/include/* /usr/include/portaudio\nmkdir /usr/include/pablio && cp ~/portaudio/pablio/* /usr/include/pablio       # 这是 Portaudio 中的另一个装满 .h 文件的目录, 不知道干嘛的. 但还是放进去吧\n```\n需要将对应路径添加到编译器搜索路径.\n\n```sh\nexport C_INCLUDE_PATH=/usr/include:$C_INCLUDE_PATH      # 头文件路径\nexport LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH  # 动态库路径\nexport LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH        # 静态库路径\n```\n\n再进行安装.\n\n## 排除 pyaudio\n\n[作者在GitHub上介绍了方法](https://github.com/tsudoko/anki-sync-server#running-ankisyncd-without-pyaudio)\n\n# 配置 AnkiServer\n\n`ankisyncd.conf`\n\n```\n[sync_app]\n# change to 127.0.0.1 if you don't want the server to be accessible from the internet\nhost = 127.0.0.1\nport = 18123            # 使用的端口\ndata_root = ./collections\nbase_url = /sync/               # 同步数据的目录, 通过 http://IP:18123/sync/ 来访问.\nbase_media_url = /msync/        # 同步媒体的目录.\nauth_db_path = ./auth.db\n# optional, for session persistence between restarts\nsession_db_path = ./session.db\n```\n\n# 使用 AnkiSyncd\n\n添加用户:\n\n```sh\nankisyncctl.py adduser <username>           # 添加用户, 与 anki app 上的用户保持一致\n```\n\n启动服务:\n\n```sh\npython3 -m ankisyncd ankisyncd.conf\n```\n\n注意, 克隆 anki 客户端之后注意调整目录结构, 使其与 ankisyncd 目录同级, 否则仍然会发生找不到模块的错误.\n\n# 连接个人 AnkiServer\n\n(我 Aliyun 服务器备案还没批下来, 除了 22 端口其他端口都给封着, 没法在客户端上做实验....)\n\n## PC 端\n\n[作者告知](https://github.com/dsnopek/anki-sync-server#point-the-anki-desktop-program-at-it) , PC 端没有相关设置, 必须自己编写插件.\n\n在 Anki 插件目录中创建一个 `myankisync.py` 文件. Anki 插件目录入口在此:\n\n![Snipaste_2018-08-25_00-19-23.png](https://i.loli.net/2018/08/25/5b80302f5bfb8.png)\n\n在其中创建 `AnkiSyncMaster.py`, myankisync 太蠢了, 换个帅点的名字. 注意, Anki 运行插件时不允许任何注释.\n\n```py\nimport anki.sync\nanki.sync.SYNC_BASE = 'http://127.0.0.1:27701/'\nanki.sync.SYNC_MEDIA_BASE = 'http://127.0.0.1:27701/msync/'\n\n# 原地址:\n#anki.sync.SYNC_BASE = 'https://ankiweb.net/'\n#anki.sync.SYNC_MEDIA_BASE = 'https://msync.ankiweb.net/'\n```\n\n需要重启客户端生效. 注意填对端口号, 并且开放防火墙对应端口.\n\n当然, 可以只让媒体文件走自己的服务器, 只需要将 `SYNC_BASE` 设为原 AnkiWeb 即可.\n\n## 连接 AnkiDroid\n\n![Screenshot_2018-08-25-00-43-38-070_com.ichi2.anki.png](https://i.loli.net/2018/08/25/5b8036260dc7f.png)\n\n## iOS\n\n据说没有任何办法.","slug":"Linux搭建AnkiSync服务器","published":1,"date":"2018-08-24T12:11:31.905Z","updated":"2018-08-25T03:45:22.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw760011w8lk235fmggk","content":"<p><a href=\"/assert/repos/anki/ankiserver.failed.md\">这里</a> 有一个之前失败了的方法.</p>\r\n<h1 id=\"下载-ankiserver\">下载 AnkiServer</h1>\r\n<p><a href=\"https://pypi.org/project/AnkiServer/2.0.6/\" target=\"_blank\" rel=\"noopener\">AnkiServer</a> 基于 Python2 运行, 但幸好有人写了 Python3 的版本.</p>\r\n<p><a href=\"https://github.com/tsudoko/anki-sync-server\" target=\"_blank\" rel=\"noopener\">tsudoko/anki-sync-server</a>. 不过作者没有提供简单的安装办法,</p>\r\n<a id=\"more\"></a>\r\n<p>首先克隆 Git 仓库:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tsudoko/anki-sync-server.git ~/anki-sync-server</span><br></pre></td></tr></table></figure>\r\n<p>仓库里有这些东西:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-------    1 u0_a174  u0_a174    33.7K Aug 25 01:21 COPYING</span><br><span class=\"line\">-rw-------    1 u0_a174  u0_a174     3.1K Aug 25 01:21 README.md</span><br><span class=\"line\">drwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 anki-bundled</span><br><span class=\"line\">-rwx------    1 u0_a174  u0_a174     2.7K Aug 25 01:21 ankisyncctl.py</span><br><span class=\"line\">drwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 ankisyncd</span><br><span class=\"line\">-rw-------    1 u0_a174  u0_a174      303 Aug 25 01:21 ankisyncd.conf</span><br><span class=\"line\">drwx------    4 u0_a174  u0_a174     4.0K Aug 25 01:21 tests</span><br></pre></td></tr></table></figure>\r\n<p>接着用 pip 安装以下依赖项:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bs4</span><br><span class=\"line\">send2trash</span><br><span class=\"line\">pyaudio         # 这个是用于语音处理的一个库. 可以不要, 处理方法见后文.</span><br><span class=\"line\">requests</span><br><span class=\"line\">decorator</span><br><span class=\"line\">markdown</span><br><span class=\"line\">webob</span><br></pre></td></tr></table></figure>\r\n<p>另外, 在机器上必须有 anki 客户端, 否则 Python 会报没有 <code>anki</code> 这个模块的错误.</p>\r\n<h2 id=\"安装-pyaudio-的依赖.\">安装 pyaudio 的依赖.</h2>\r\n<p>先来看看安装过程中报了什么错:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -pthread -B /root/anaconda3/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/root/anaconda3/include/python3.7m -c src/_portaudiomodule.c -o build/temp.linux-x86_64-3.7/src/_portaudiomodule.o</span><br><span class=\"line\">  src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory</span><br><span class=\"line\">   #include &quot;portaudio.h&quot;</span><br><span class=\"line\">            ^~~~~~~~~~~~~</span><br><span class=\"line\">  compilation terminated.</span><br><span class=\"line\">  error: command &apos;gcc&apos; failed with exit status 1</span><br><span class=\"line\"></span><br><span class=\"line\">  ----------------------------------------</span><br><span class=\"line\">    src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory</span><br><span class=\"line\">     #include &quot;portaudio.h&quot;</span><br><span class=\"line\">              ^~~~~~~~~~~~~</span><br><span class=\"line\">    compilation terminated.</span><br><span class=\"line\">    error: command &apos;gcc&apos; failed with exit status 1</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br></pre></td></tr></table></figure>\r\n<p>发现就是 GCC 编译的时候出现了缺少 <code>portaudio.h</code> 库的问题. 这个库的官网为: <a href=\"http://portaudio.com\" target=\"_blank\" rel=\"noopener\">portaudio.com</a> 需要将文件下载到 GCC 的 lib/ 里.</p>\r\n<p>先去 <a href=\"http://portaudio.com/download.html\" target=\"_blank\" rel=\"noopener\">下载页</a> 查看最新版本. 下载之后解压.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf XXXXXX</span><br></pre></td></tr></table></figure>\r\n<p>进入解压后的目录.</p>\r\n<p>由于官网推荐先安装 <code>ALSA</code>, 所以先通过 <code>apt install libasound-dev</code> 安装. 之后使用目录中的 <code>configure</code> 进行配置, 配置完成就 <code>make</code>.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/portaudio</span><br><span class=\"line\">apt install libasound-dev       <span class=\"comment\"># 这将下载 ALSA</span></span><br><span class=\"line\">configure &amp;&amp; make               <span class=\"comment\"># 这将编译 PortAudio 的运行库</span></span><br><span class=\"line\">make install                    <span class=\"comment\"># 这将把运行库安装到系统 /usr/local/lib</span></span><br></pre></td></tr></table></figure>\r\n<p>但是这只将运行库安装到 <code>/usr/local/lib</code> 中了, 头文件还得自己移动. 将头文件放在 <code>/usr/include</code> 中, 最好先创建对应目录.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/include/portaudio &amp;&amp; cp ~/portaudio/include/* /usr/include/portaudio</span><br><span class=\"line\">mkdir /usr/include/pablio &amp;&amp; cp ~/portaudio/pablio/* /usr/include/pablio       <span class=\"comment\"># 这是 Portaudio 中的另一个装满 .h 文件的目录, 不知道干嘛的. 但还是放进去吧</span></span><br></pre></td></tr></table></figure>\r\n<p>需要将对应路径添加到编译器搜索路径.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> C_INCLUDE_PATH=/usr/include:<span class=\"variable\">$C_INCLUDE_PATH</span>      <span class=\"comment\"># 头文件路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span>  <span class=\"comment\"># 动态库路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/lib:<span class=\"variable\">$LIBRARY_PATH</span>        <span class=\"comment\"># 静态库路径</span></span><br></pre></td></tr></table></figure>\r\n<p>再进行安装.</p>\r\n<h2 id=\"排除-pyaudio\">排除 pyaudio</h2>\r\n<p><a href=\"https://github.com/tsudoko/anki-sync-server#running-ankisyncd-without-pyaudio\" target=\"_blank\" rel=\"noopener\">作者在GitHub上介绍了方法</a></p>\r\n<h1 id=\"配置-ankiserver\">配置 AnkiServer</h1>\r\n<p><code>ankisyncd.conf</code></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sync_app]</span><br><span class=\"line\"># change to 127.0.0.1 if you don&apos;t want the server to be accessible from the internet</span><br><span class=\"line\">host = 127.0.0.1</span><br><span class=\"line\">port = 18123            # 使用的端口</span><br><span class=\"line\">data_root = ./collections</span><br><span class=\"line\">base_url = /sync/               # 同步数据的目录, 通过 http://IP:18123/sync/ 来访问.</span><br><span class=\"line\">base_media_url = /msync/        # 同步媒体的目录.</span><br><span class=\"line\">auth_db_path = ./auth.db</span><br><span class=\"line\"># optional, for session persistence between restarts</span><br><span class=\"line\">session_db_path = ./session.db</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"使用-ankisyncd\">使用 AnkiSyncd</h1>\r\n<p>添加用户:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankisyncctl.py adduser &lt;username&gt;           <span class=\"comment\"># 添加用户, 与 anki app 上的用户保持一致</span></span><br></pre></td></tr></table></figure>\r\n<p>启动服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m ankisyncd ankisyncd.conf</span><br></pre></td></tr></table></figure>\r\n<p>注意, 克隆 anki 客户端之后注意调整目录结构, 使其与 ankisyncd 目录同级, 否则仍然会发生找不到模块的错误.</p>\r\n<h1 id=\"连接个人-ankiserver\">连接个人 AnkiServer</h1>\r\n<p>(我 Aliyun 服务器备案还没批下来, 除了 22 端口其他端口都给封着, 没法在客户端上做实验....)</p>\r\n<h2 id=\"pc-端\">PC 端</h2>\r\n<p><a href=\"https://github.com/dsnopek/anki-sync-server#point-the-anki-desktop-program-at-it\" target=\"_blank\" rel=\"noopener\">作者告知</a> , PC 端没有相关设置, 必须自己编写插件.</p>\r\n<p>在 Anki 插件目录中创建一个 <code>myankisync.py</code> 文件. Anki 插件目录入口在此:</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/25/5b80302f5bfb8.png\" alt=\"Snipaste_2018-08-25_00-19-23.png\">\r\n<p class=\"caption\">Snipaste_2018-08-25_00-19-23.png</p>\r\n</div>\r\n<p>在其中创建 <code>AnkiSyncMaster.py</code>, myankisync 太蠢了, 换个帅点的名字. 注意, Anki 运行插件时不允许任何注释.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> anki.sync</span><br><span class=\"line\">anki.sync.SYNC_BASE = <span class=\"string\">'http://127.0.0.1:27701/'</span></span><br><span class=\"line\">anki.sync.SYNC_MEDIA_BASE = <span class=\"string\">'http://127.0.0.1:27701/msync/'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原地址:</span></span><br><span class=\"line\"><span class=\"comment\">#anki.sync.SYNC_BASE = 'https://ankiweb.net/'</span></span><br><span class=\"line\"><span class=\"comment\">#anki.sync.SYNC_MEDIA_BASE = 'https://msync.ankiweb.net/'</span></span><br></pre></td></tr></table></figure>\r\n<p>需要重启客户端生效. 注意填对端口号, 并且开放防火墙对应端口.</p>\r\n<p>当然, 可以只让媒体文件走自己的服务器, 只需要将 <code>SYNC_BASE</code> 设为原 AnkiWeb 即可.</p>\r\n<h2 id=\"连接-ankidroid\">连接 AnkiDroid</h2>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/25/5b8036260dc7f.png\" alt=\"Screenshot_2018-08-25-00-43-38-070_com.ichi2.anki.png\">\r\n<p class=\"caption\">Screenshot_2018-08-25-00-43-38-070_com.ichi2.anki.png</p>\r\n</div>\r\n<h2 id=\"ios\">iOS</h2>\r\n<p>据说没有任何办法.</p>\r\n","site":{"data":{}},"excerpt":"<p><a href=\"/assert/repos/anki/ankiserver.failed.md\">这里</a> 有一个之前失败了的方法.</p>\r\n<h1 id=\"下载-ankiserver\">下载 AnkiServer</h1>\r\n<p><a href=\"https://pypi.org/project/AnkiServer/2.0.6/\" target=\"_blank\" rel=\"noopener\">AnkiServer</a> 基于 Python2 运行, 但幸好有人写了 Python3 的版本.</p>\r\n<p><a href=\"https://github.com/tsudoko/anki-sync-server\" target=\"_blank\" rel=\"noopener\">tsudoko/anki-sync-server</a>. 不过作者没有提供简单的安装办法,</p>","more":"<p>首先克隆 Git 仓库:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tsudoko/anki-sync-server.git ~/anki-sync-server</span><br></pre></td></tr></table></figure>\r\n<p>仓库里有这些东西:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-------    1 u0_a174  u0_a174    33.7K Aug 25 01:21 COPYING</span><br><span class=\"line\">-rw-------    1 u0_a174  u0_a174     3.1K Aug 25 01:21 README.md</span><br><span class=\"line\">drwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 anki-bundled</span><br><span class=\"line\">-rwx------    1 u0_a174  u0_a174     2.7K Aug 25 01:21 ankisyncctl.py</span><br><span class=\"line\">drwx------    2 u0_a174  u0_a174     4.0K Aug 25 01:21 ankisyncd</span><br><span class=\"line\">-rw-------    1 u0_a174  u0_a174      303 Aug 25 01:21 ankisyncd.conf</span><br><span class=\"line\">drwx------    4 u0_a174  u0_a174     4.0K Aug 25 01:21 tests</span><br></pre></td></tr></table></figure>\r\n<p>接着用 pip 安装以下依赖项:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bs4</span><br><span class=\"line\">send2trash</span><br><span class=\"line\">pyaudio         # 这个是用于语音处理的一个库. 可以不要, 处理方法见后文.</span><br><span class=\"line\">requests</span><br><span class=\"line\">decorator</span><br><span class=\"line\">markdown</span><br><span class=\"line\">webob</span><br></pre></td></tr></table></figure>\r\n<p>另外, 在机器上必须有 anki 客户端, 否则 Python 会报没有 <code>anki</code> 这个模块的错误.</p>\r\n<h2 id=\"安装-pyaudio-的依赖.\">安装 pyaudio 的依赖.</h2>\r\n<p>先来看看安装过程中报了什么错:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -pthread -B /root/anaconda3/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/root/anaconda3/include/python3.7m -c src/_portaudiomodule.c -o build/temp.linux-x86_64-3.7/src/_portaudiomodule.o</span><br><span class=\"line\">  src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory</span><br><span class=\"line\">   #include &quot;portaudio.h&quot;</span><br><span class=\"line\">            ^~~~~~~~~~~~~</span><br><span class=\"line\">  compilation terminated.</span><br><span class=\"line\">  error: command &apos;gcc&apos; failed with exit status 1</span><br><span class=\"line\"></span><br><span class=\"line\">  ----------------------------------------</span><br><span class=\"line\">    src/_portaudiomodule.c:29:10: fatal error: portaudio.h: No such file or directory</span><br><span class=\"line\">     #include &quot;portaudio.h&quot;</span><br><span class=\"line\">              ^~~~~~~~~~~~~</span><br><span class=\"line\">    compilation terminated.</span><br><span class=\"line\">    error: command &apos;gcc&apos; failed with exit status 1</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br></pre></td></tr></table></figure>\r\n<p>发现就是 GCC 编译的时候出现了缺少 <code>portaudio.h</code> 库的问题. 这个库的官网为: <a href=\"http://portaudio.com\" target=\"_blank\" rel=\"noopener\">portaudio.com</a> 需要将文件下载到 GCC 的 lib/ 里.</p>\r\n<p>先去 <a href=\"http://portaudio.com/download.html\" target=\"_blank\" rel=\"noopener\">下载页</a> 查看最新版本. 下载之后解压.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf XXXXXX</span><br></pre></td></tr></table></figure>\r\n<p>进入解压后的目录.</p>\r\n<p>由于官网推荐先安装 <code>ALSA</code>, 所以先通过 <code>apt install libasound-dev</code> 安装. 之后使用目录中的 <code>configure</code> 进行配置, 配置完成就 <code>make</code>.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/portaudio</span><br><span class=\"line\">apt install libasound-dev       <span class=\"comment\"># 这将下载 ALSA</span></span><br><span class=\"line\">configure &amp;&amp; make               <span class=\"comment\"># 这将编译 PortAudio 的运行库</span></span><br><span class=\"line\">make install                    <span class=\"comment\"># 这将把运行库安装到系统 /usr/local/lib</span></span><br></pre></td></tr></table></figure>\r\n<p>但是这只将运行库安装到 <code>/usr/local/lib</code> 中了, 头文件还得自己移动. 将头文件放在 <code>/usr/include</code> 中, 最好先创建对应目录.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/include/portaudio &amp;&amp; cp ~/portaudio/include/* /usr/include/portaudio</span><br><span class=\"line\">mkdir /usr/include/pablio &amp;&amp; cp ~/portaudio/pablio/* /usr/include/pablio       <span class=\"comment\"># 这是 Portaudio 中的另一个装满 .h 文件的目录, 不知道干嘛的. 但还是放进去吧</span></span><br></pre></td></tr></table></figure>\r\n<p>需要将对应路径添加到编译器搜索路径.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> C_INCLUDE_PATH=/usr/include:<span class=\"variable\">$C_INCLUDE_PATH</span>      <span class=\"comment\"># 头文件路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span>  <span class=\"comment\"># 动态库路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/lib:<span class=\"variable\">$LIBRARY_PATH</span>        <span class=\"comment\"># 静态库路径</span></span><br></pre></td></tr></table></figure>\r\n<p>再进行安装.</p>\r\n<h2 id=\"排除-pyaudio\">排除 pyaudio</h2>\r\n<p><a href=\"https://github.com/tsudoko/anki-sync-server#running-ankisyncd-without-pyaudio\" target=\"_blank\" rel=\"noopener\">作者在GitHub上介绍了方法</a></p>\r\n<h1 id=\"配置-ankiserver\">配置 AnkiServer</h1>\r\n<p><code>ankisyncd.conf</code></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sync_app]</span><br><span class=\"line\"># change to 127.0.0.1 if you don&apos;t want the server to be accessible from the internet</span><br><span class=\"line\">host = 127.0.0.1</span><br><span class=\"line\">port = 18123            # 使用的端口</span><br><span class=\"line\">data_root = ./collections</span><br><span class=\"line\">base_url = /sync/               # 同步数据的目录, 通过 http://IP:18123/sync/ 来访问.</span><br><span class=\"line\">base_media_url = /msync/        # 同步媒体的目录.</span><br><span class=\"line\">auth_db_path = ./auth.db</span><br><span class=\"line\"># optional, for session persistence between restarts</span><br><span class=\"line\">session_db_path = ./session.db</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"使用-ankisyncd\">使用 AnkiSyncd</h1>\r\n<p>添加用户:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ankisyncctl.py adduser &lt;username&gt;           <span class=\"comment\"># 添加用户, 与 anki app 上的用户保持一致</span></span><br></pre></td></tr></table></figure>\r\n<p>启动服务:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m ankisyncd ankisyncd.conf</span><br></pre></td></tr></table></figure>\r\n<p>注意, 克隆 anki 客户端之后注意调整目录结构, 使其与 ankisyncd 目录同级, 否则仍然会发生找不到模块的错误.</p>\r\n<h1 id=\"连接个人-ankiserver\">连接个人 AnkiServer</h1>\r\n<p>(我 Aliyun 服务器备案还没批下来, 除了 22 端口其他端口都给封着, 没法在客户端上做实验....)</p>\r\n<h2 id=\"pc-端\">PC 端</h2>\r\n<p><a href=\"https://github.com/dsnopek/anki-sync-server#point-the-anki-desktop-program-at-it\" target=\"_blank\" rel=\"noopener\">作者告知</a> , PC 端没有相关设置, 必须自己编写插件.</p>\r\n<p>在 Anki 插件目录中创建一个 <code>myankisync.py</code> 文件. Anki 插件目录入口在此:</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/25/5b80302f5bfb8.png\" alt=\"Snipaste_2018-08-25_00-19-23.png\">\r\n<p class=\"caption\">Snipaste_2018-08-25_00-19-23.png</p>\r\n</div>\r\n<p>在其中创建 <code>AnkiSyncMaster.py</code>, myankisync 太蠢了, 换个帅点的名字. 注意, Anki 运行插件时不允许任何注释.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> anki.sync</span><br><span class=\"line\">anki.sync.SYNC_BASE = <span class=\"string\">'http://127.0.0.1:27701/'</span></span><br><span class=\"line\">anki.sync.SYNC_MEDIA_BASE = <span class=\"string\">'http://127.0.0.1:27701/msync/'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原地址:</span></span><br><span class=\"line\"><span class=\"comment\">#anki.sync.SYNC_BASE = 'https://ankiweb.net/'</span></span><br><span class=\"line\"><span class=\"comment\">#anki.sync.SYNC_MEDIA_BASE = 'https://msync.ankiweb.net/'</span></span><br></pre></td></tr></table></figure>\r\n<p>需要重启客户端生效. 注意填对端口号, 并且开放防火墙对应端口.</p>\r\n<p>当然, 可以只让媒体文件走自己的服务器, 只需要将 <code>SYNC_BASE</code> 设为原 AnkiWeb 即可.</p>\r\n<h2 id=\"连接-ankidroid\">连接 AnkiDroid</h2>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/25/5b8036260dc7f.png\" alt=\"Screenshot_2018-08-25-00-43-38-070_com.ichi2.anki.png\">\r\n<p class=\"caption\">Screenshot_2018-08-25-00-43-38-070_com.ichi2.anki.png</p>\r\n</div>\r\n<h2 id=\"ios\">iOS</h2>\r\n<p>据说没有任何办法.</p>"},{"title":"PowerShell 安装 Chocolatey","date":"2018-08-19T09:23:15.000Z","_content":"\n> Windows10:1803.17134.228\n> \n> PowerShell:5.1.17134.228\n\n[Chocolatey](https://chocolatey.org/)\n\n# 按官网指示下载安装\n\n首先需要检查 PowerShell 的脚本安全政策.\n\n```powershell\nGet-ExecutionPolicy     # 查看当前政策\n```\n\n然后使用 `Set-ExecutionPolicy` 设置, 可以有以下选项:\n\n```powershell\n有效值包括:\n\n-- Restricted:不加载配置文件或运行脚本. 默认值为\"Restricted\". \n\n-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. \n\n-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. \n\n# 我喜欢设置为 Unrestricted\n-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. \n\n-- Bypass:不阻止任何执行项, 不显示警告和提示. \n\n-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略. \n```\n\n之后就运行 [官方提供的命令行](https://chocolatey.org/install#install-with-powershellexe)\n\n```powershell\niex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n# 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.\n```\n\n等待安装完成后, `choco --help` 检查安装是否成功.\n\n<!--more-->\n\n# 先安装一个 Vim 试试\n\n> 初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.\n\n下载时发现 `choco` 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.\n\n```\nDownloading vim\n  from 'https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download'\nProgress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).\nDownload of gvim-8-0-604.exe (9.22 MB) completed.\nInstalling vim...\nvim has been installed.\nAdding the vim installation directory to PATH …\nPATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...\n  vim may be able to be automatically uninstalled.\nEnvironment Vars (like PATH) have changed. Close/reopen your shell to\n see the changes (or in powershell/cmd.exe just type `refreshenv`).\n The install of vim was successful.\n  Software installed as 'exe', install location is likely default.\n\nChocolatey installed 1/1 packages.\n See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).\n```\n\n虽然 `choco` 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加... `refreshenv` 之后也无效...\nVim 安装路径在第八行提示, 手动将这个路径添加进PATH.\n\n......\n\n发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.\n\n> 重启之后就行了, Why?\n","source":"_posts/PowerShell-安装-Chocolatey.md","raw":"---\ntitle: PowerShell 安装 Chocolatey\ndate: 2018-08-19 17:23:15\ntags:\n    - PowerShell\ncategories:\n    - 日常\n---\n\n> Windows10:1803.17134.228\n> \n> PowerShell:5.1.17134.228\n\n[Chocolatey](https://chocolatey.org/)\n\n# 按官网指示下载安装\n\n首先需要检查 PowerShell 的脚本安全政策.\n\n```powershell\nGet-ExecutionPolicy     # 查看当前政策\n```\n\n然后使用 `Set-ExecutionPolicy` 设置, 可以有以下选项:\n\n```powershell\n有效值包括:\n\n-- Restricted:不加载配置文件或运行脚本. 默认值为\"Restricted\". \n\n-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. \n\n-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. \n\n# 我喜欢设置为 Unrestricted\n-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. \n\n-- Bypass:不阻止任何执行项, 不显示警告和提示. \n\n-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略. \n```\n\n之后就运行 [官方提供的命令行](https://chocolatey.org/install#install-with-powershellexe)\n\n```powershell\niex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n# 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.\n```\n\n等待安装完成后, `choco --help` 检查安装是否成功.\n\n<!--more-->\n\n# 先安装一个 Vim 试试\n\n> 初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.\n\n下载时发现 `choco` 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.\n\n```\nDownloading vim\n  from 'https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download'\nProgress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).\nDownload of gvim-8-0-604.exe (9.22 MB) completed.\nInstalling vim...\nvim has been installed.\nAdding the vim installation directory to PATH …\nPATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...\n  vim may be able to be automatically uninstalled.\nEnvironment Vars (like PATH) have changed. Close/reopen your shell to\n see the changes (or in powershell/cmd.exe just type `refreshenv`).\n The install of vim was successful.\n  Software installed as 'exe', install location is likely default.\n\nChocolatey installed 1/1 packages.\n See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).\n```\n\n虽然 `choco` 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加... `refreshenv` 之后也无效...\nVim 安装路径在第八行提示, 手动将这个路径添加进PATH.\n\n......\n\n发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.\n\n> 重启之后就行了, Why?\n","slug":"PowerShell-安装-Chocolatey","published":1,"updated":"2018-08-23T17:43:22.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw760014w8lkxe5ypf79","content":"<blockquote>\r\n<p>Windows10:1803.17134.228</p>\r\n<p>PowerShell:5.1.17134.228</p>\r\n</blockquote>\r\n<p><a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">Chocolatey</a></p>\r\n<h1 id=\"按官网指示下载安装\">按官网指示下载安装</h1>\r\n<p>首先需要检查 PowerShell 的脚本安全政策.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-ExecutionPolicy</span>     <span class=\"comment\"># 查看当前政策</span></span><br></pre></td></tr></table></figure>\r\n<p>然后使用 <code>Set-ExecutionPolicy</code> 设置, 可以有以下选项:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有效值包括:</span><br><span class=\"line\"></span><br><span class=\"line\">-- Restricted:不加载配置文件或运行脚本. 默认值为<span class=\"string\">\"Restricted\"</span>. </span><br><span class=\"line\"></span><br><span class=\"line\">-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我喜欢设置为 Unrestricted</span></span><br><span class=\"line\">-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Bypass:不阻止任何执行项, 不显示警告和提示. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略.</span><br></pre></td></tr></table></figure>\r\n<p>之后就运行 <a href=\"https://chocolatey.org/install#install-with-powershellexe\" target=\"_blank\" rel=\"noopener\">官方提供的命令行</a></p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iex ((<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">'https://chocolatey.org/install.ps1'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.</span></span><br></pre></td></tr></table></figure>\r\n<p>等待安装完成后, <code>choco --help</code> 检查安装是否成功.</p>\r\n<a id=\"more\"></a>\r\n<h1 id=\"先安装一个-vim-试试\">先安装一个 Vim 试试</h1>\r\n<blockquote>\r\n<p>初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.</p>\r\n</blockquote>\r\n<p>下载时发现 <code>choco</code> 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading vim</span><br><span class=\"line\">  from &apos;https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download&apos;</span><br><span class=\"line\">Progress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).</span><br><span class=\"line\">Download of gvim-8-0-604.exe (9.22 MB) completed.</span><br><span class=\"line\">Installing vim...</span><br><span class=\"line\">vim has been installed.</span><br><span class=\"line\">Adding the vim installation directory to PATH …</span><br><span class=\"line\">PATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...</span><br><span class=\"line\">  vim may be able to be automatically uninstalled.</span><br><span class=\"line\">Environment Vars (like PATH) have changed. Close/reopen your shell to</span><br><span class=\"line\"> see the changes (or in powershell/cmd.exe just type `refreshenv`).</span><br><span class=\"line\"> The install of vim was successful.</span><br><span class=\"line\">  Software installed as &apos;exe&apos;, install location is likely default.</span><br><span class=\"line\"></span><br><span class=\"line\">Chocolatey installed 1/1 packages.</span><br><span class=\"line\"> See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).</span><br></pre></td></tr></table></figure>\r\n<p>虽然 <code>choco</code> 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加... <code>refreshenv</code> 之后也无效... Vim 安装路径在第八行提示, 手动将这个路径添加进PATH.</p>\r\n<p>......</p>\r\n<p>发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.</p>\r\n<blockquote>\r\n<p>重启之后就行了, Why?</p>\r\n</blockquote>\r\n","site":{"data":{}},"excerpt":"<blockquote>\r\n<p>Windows10:1803.17134.228</p>\r\n<p>PowerShell:5.1.17134.228</p>\r\n</blockquote>\r\n<p><a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">Chocolatey</a></p>\r\n<h1 id=\"按官网指示下载安装\">按官网指示下载安装</h1>\r\n<p>首先需要检查 PowerShell 的脚本安全政策.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-ExecutionPolicy</span>     <span class=\"comment\"># 查看当前政策</span></span><br></pre></td></tr></table></figure>\r\n<p>然后使用 <code>Set-ExecutionPolicy</code> 设置, 可以有以下选项:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有效值包括:</span><br><span class=\"line\"></span><br><span class=\"line\">-- Restricted:不加载配置文件或运行脚本. 默认值为<span class=\"string\">\"Restricted\"</span>. </span><br><span class=\"line\"></span><br><span class=\"line\">-- AllSigned:要求所有脚本和配置文件由可信发布者签名, 包括在本地计算机编写的脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- RemoteSigned:要求从 Internet 下载的所有脚本和配置文件均由可信发布者签名. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我喜欢设置为 Unrestricted</span></span><br><span class=\"line\">-- Unrestricted:加载所有配置文件并运行所有脚本. 如果运行从 Internet 下载的未签名脚本, 则系统将提示您需要相关权限才能运行该脚本. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Bypass:不阻止任何执行项, 不显示警告和提示. </span><br><span class=\"line\"></span><br><span class=\"line\">-- Undefined:从当前作用域删除当前分配的执行策略. 此参数将不会删除在组策略作用域中设置的执行策略.</span><br></pre></td></tr></table></figure>\r\n<p>之后就运行 <a href=\"https://chocolatey.org/install#install-with-powershellexe\" target=\"_blank\" rel=\"noopener\">官方提供的命令行</a></p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iex ((<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">'https://chocolatey.org/install.ps1'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 其中 iex 通过 Get-Alias 查询到是 Invoke-Expression 的别名, 作用是之后的字符串识别为命令.</span></span><br></pre></td></tr></table></figure>\r\n<p>等待安装完成后, <code>choco --help</code> 检查安装是否成功.</p>","more":"<h1 id=\"先安装一个-vim-试试\">先安装一个 Vim 试试</h1>\r\n<blockquote>\r\n<p>初次使用, 发现 chocolatey 貌似是通过发布安装脚本的形式来分发软件的.</p>\r\n</blockquote>\r\n<p>下载时发现 <code>choco</code> 只能在管理员权限下使用, 在其他 shell 中会提示没有这个东西.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading vim</span><br><span class=\"line\">  from &apos;https://sourceforge.net/projects/cream/files/Vim/8.0.604/gvim-8-0-604.exe/download&apos;</span><br><span class=\"line\">Progress: 100% - Completed download of C:\\Users\\xxxxx\\AppData\\Local\\Temp\\chocolatey\\vim\\8.0.604\\gvim-8-0-604.exe (9.22 MB).</span><br><span class=\"line\">Download of gvim-8-0-604.exe (9.22 MB) completed.</span><br><span class=\"line\">Installing vim...</span><br><span class=\"line\">vim has been installed.</span><br><span class=\"line\">Adding the vim installation directory to PATH …</span><br><span class=\"line\">PATH environment variable does not have C:\\Program Files (x86)\\Vim\\vim80 in it. Adding...</span><br><span class=\"line\">  vim may be able to be automatically uninstalled.</span><br><span class=\"line\">Environment Vars (like PATH) have changed. Close/reopen your shell to</span><br><span class=\"line\"> see the changes (or in powershell/cmd.exe just type `refreshenv`).</span><br><span class=\"line\"> The install of vim was successful.</span><br><span class=\"line\">  Software installed as &apos;exe&apos;, install location is likely default.</span><br><span class=\"line\"></span><br><span class=\"line\">Chocolatey installed 1/1 packages.</span><br><span class=\"line\"> See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).</span><br></pre></td></tr></table></figure>\r\n<p>虽然 <code>choco</code> 口口声声说了将 Vim 添加到 PATH 环境变量中了, 但是实测并没有, 还是需要手动添加... <code>refreshenv</code> 之后也无效... Vim 安装路径在第八行提示, 手动将这个路径添加进PATH.</p>\r\n<p>......</p>\r\n<p>发现路径被自动添加到系统环境变量了, 但是没有添加进用户环境变量, 但是按理说当前的环境变量是用户变量和系统变量的叠加才对啊, 难道需要重启才生效? 正好 Win10 有系统更新要安装, 先重启看看.</p>\r\n<blockquote>\r\n<p>重启之后就行了, Why?</p>\r\n</blockquote>"},{"title":"Tips","date":"2018-08-24T16:05:02.000Z","_content":"\n# locate找不到数据库的解决办法\n\n`updatedb` 指令生成数据库\n\n> date:2018-08-25 00:05:02\n\n<!--more-->\n\n# FireFox config 设置\n\nabout:config页面:\n\n```\nview_source.editor.external             允许使用外部编辑器\nview_source.editor.path                 编辑器路径\nsecurity.enterprise_roots.enabled       固定根证书\n```\n\n> date:2018-08-24 20:40:31\n\n# Linux 用户, 用户组 权限管理\n\n指定 /usr/sbin/nologin 使用户无法登陆 shelll\n\nuseradd userdel usermod\n\ngroupadd groupdel groupmod\n\npasswd\n\n> date:2018-08-24 03:59:13\n\n# Linux 添加 sudoer\n\n 编辑 `/etc/sudoers`\n\n```sh\nchmod 600 /etc/sudoers    #获取写权限\necho 'username ALL=(ALL) ALL' >> /etc/sudoers\nchmod 200 /etc/sudoers\n```\n\n```\nusername ALL=(ALL:ALL) ALL\n        可切换至所有用户, 用户组, 可使用所有命令\n```\n\n> date:2018-08-24 02:30:19\n\n# CSS 选择器\n\n\n`.` 选择类 `class`\n\n`#` 选择 `id`\n\n\n> date:2018-08-24 01:49:01\n\n# PowerShell rm\n\n可以向 -Exclude (忽略) 传递多个值, 使用逗号 , 分割. -Include 同理.\n\n> date:2018-08-24 00:22:24\n\n# 检查翻墙VPS是否被封的办法\n\n## 首先, `ping` 测试.\n\n- 检查能否 `ping` 通.\n\n## 其次, 端口测试\n\n国内端口测试:\n\n[站长工具/port](http://tool.chinaz.com/port)\n\n国外端口测试:\n\n[Open Port Finder](https://www.yougetsignal.com/tools/open-ports/)\n\n> date:2018-08-23 03:39:16\n\n# 更换Hexo主题的背景图\n\n\n将喜欢的背景图放到 `project-->themes-->next-->source-->images` 目录下。\n打开 `project-->themes-->next-->source-->css-->_custom-->custom.styl` 文件，加入代码\n\n```\nbody { background:url(/images/imagename.jpg);}\n```\n\n重新编译项目就OK了。\n\n[参考](http://www.lieeber.com/2016/05/15/Hexo%E4%BD%BF%E7%94%A8%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8Ftips/#%E6%9B%B4%E6%8D%A2next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%83%8C%E6%99%AF)\n\n但是这效果...... 应该需要改 CSS 把 post 部分弄宽一点吧... 但是不会改... 暂时放弃.\n\n![Snipaste_2018-08-24_01-36-38.png](https://i.loli.net/2018/08/24/5b7ef0c9cb183.png)\n\n> date:2018-08-22 18:48:02\n\n# PowerShell 中的转义字符\n\nPowerShell 使用反引号作为转义字符;\n\n```\n所以如果要在终端中使用反引号, 就打两个反引号就好了\n```\n\n> date:2018-08-22 18:07:10\n\n# ~/.ssh/config 配置\n\n```\nHost <hostname>\n        HostName <domain or IP adress>\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/id_rsa # 使用的私钥\n        Port 22         # 如果使用其他端口, 自行设置\n        User <登陆的用户名>\n```\n\n之后就可以直接使用 `ssh <hostname>` 登陆了.\n\n> date:2018-08-22 13:13:42\n\n# Linux BBR\n\n内核版本必须大于 4.9.\n\n[升级内核](https://www.google.com/search?q=Linux+升级内核)\n\n检查是否已开启:\n\n```sh\nuname -r # 查看内核版本\nsysctl net.ipv4.tcp_avaliable_congestion_control # 查看内核是否启用 BBR 算法\nlsmod | grep bbr    # 如果有 tcp_bbr 说明启动成功\n```\n\n通过写入配置文件开启 BBR\n\n```sh\necho net.core.default_qdisc=fq >> /etc/sysctl.conf\necho net.ipv4.tcp_congestion_control=bbr >> /etc/sysctl.conf\n```\n\n> date:2018-08-21 22:11:40\n\n> date:2018-08-21 21:56:46\n\n# Android 刷机包结构?\n\n> date:2018-08-21 10:01:46\n\n# TODO: Vim 内置命令\n\n- 打开模式\n- 分栏操作\n- 打开, 切换编辑文件\n\n> date:2018-08-21 01:28:04\n\n# Python @ Windows 如何处理字符编码\n\n读到内存中的字符串都是Unicode编码吗?\n\n只有在IO时才会编码解码?\n\n> date:2018-08-20 18:08:19\n\n","source":"_posts/TIPS.md","raw":"---\ntitle: 'Tips'\ndate: 2018-08-25 00:05:02\ncategories: Tips\n---\n\n# locate找不到数据库的解决办法\n\n`updatedb` 指令生成数据库\n\n> date:2018-08-25 00:05:02\n\n<!--more-->\n\n# FireFox config 设置\n\nabout:config页面:\n\n```\nview_source.editor.external             允许使用外部编辑器\nview_source.editor.path                 编辑器路径\nsecurity.enterprise_roots.enabled       固定根证书\n```\n\n> date:2018-08-24 20:40:31\n\n# Linux 用户, 用户组 权限管理\n\n指定 /usr/sbin/nologin 使用户无法登陆 shelll\n\nuseradd userdel usermod\n\ngroupadd groupdel groupmod\n\npasswd\n\n> date:2018-08-24 03:59:13\n\n# Linux 添加 sudoer\n\n 编辑 `/etc/sudoers`\n\n```sh\nchmod 600 /etc/sudoers    #获取写权限\necho 'username ALL=(ALL) ALL' >> /etc/sudoers\nchmod 200 /etc/sudoers\n```\n\n```\nusername ALL=(ALL:ALL) ALL\n        可切换至所有用户, 用户组, 可使用所有命令\n```\n\n> date:2018-08-24 02:30:19\n\n# CSS 选择器\n\n\n`.` 选择类 `class`\n\n`#` 选择 `id`\n\n\n> date:2018-08-24 01:49:01\n\n# PowerShell rm\n\n可以向 -Exclude (忽略) 传递多个值, 使用逗号 , 分割. -Include 同理.\n\n> date:2018-08-24 00:22:24\n\n# 检查翻墙VPS是否被封的办法\n\n## 首先, `ping` 测试.\n\n- 检查能否 `ping` 通.\n\n## 其次, 端口测试\n\n国内端口测试:\n\n[站长工具/port](http://tool.chinaz.com/port)\n\n国外端口测试:\n\n[Open Port Finder](https://www.yougetsignal.com/tools/open-ports/)\n\n> date:2018-08-23 03:39:16\n\n# 更换Hexo主题的背景图\n\n\n将喜欢的背景图放到 `project-->themes-->next-->source-->images` 目录下。\n打开 `project-->themes-->next-->source-->css-->_custom-->custom.styl` 文件，加入代码\n\n```\nbody { background:url(/images/imagename.jpg);}\n```\n\n重新编译项目就OK了。\n\n[参考](http://www.lieeber.com/2016/05/15/Hexo%E4%BD%BF%E7%94%A8%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8Ftips/#%E6%9B%B4%E6%8D%A2next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%83%8C%E6%99%AF)\n\n但是这效果...... 应该需要改 CSS 把 post 部分弄宽一点吧... 但是不会改... 暂时放弃.\n\n![Snipaste_2018-08-24_01-36-38.png](https://i.loli.net/2018/08/24/5b7ef0c9cb183.png)\n\n> date:2018-08-22 18:48:02\n\n# PowerShell 中的转义字符\n\nPowerShell 使用反引号作为转义字符;\n\n```\n所以如果要在终端中使用反引号, 就打两个反引号就好了\n```\n\n> date:2018-08-22 18:07:10\n\n# ~/.ssh/config 配置\n\n```\nHost <hostname>\n        HostName <domain or IP adress>\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/id_rsa # 使用的私钥\n        Port 22         # 如果使用其他端口, 自行设置\n        User <登陆的用户名>\n```\n\n之后就可以直接使用 `ssh <hostname>` 登陆了.\n\n> date:2018-08-22 13:13:42\n\n# Linux BBR\n\n内核版本必须大于 4.9.\n\n[升级内核](https://www.google.com/search?q=Linux+升级内核)\n\n检查是否已开启:\n\n```sh\nuname -r # 查看内核版本\nsysctl net.ipv4.tcp_avaliable_congestion_control # 查看内核是否启用 BBR 算法\nlsmod | grep bbr    # 如果有 tcp_bbr 说明启动成功\n```\n\n通过写入配置文件开启 BBR\n\n```sh\necho net.core.default_qdisc=fq >> /etc/sysctl.conf\necho net.ipv4.tcp_congestion_control=bbr >> /etc/sysctl.conf\n```\n\n> date:2018-08-21 22:11:40\n\n> date:2018-08-21 21:56:46\n\n# Android 刷机包结构?\n\n> date:2018-08-21 10:01:46\n\n# TODO: Vim 内置命令\n\n- 打开模式\n- 分栏操作\n- 打开, 切换编辑文件\n\n> date:2018-08-21 01:28:04\n\n# Python @ Windows 如何处理字符编码\n\n读到内存中的字符串都是Unicode编码吗?\n\n只有在IO时才会编码解码?\n\n> date:2018-08-20 18:08:19\n\n","slug":"TIPS","published":1,"updated":"2018-08-24T16:05:02.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw760018w8lksaz0viiu","content":"<h1 id=\"locate找不到数据库的解决办法\">locate找不到数据库的解决办法</h1>\r\n<p><code>updatedb</code> 指令生成数据库</p>\r\n<blockquote>\r\n<p>date:2018-08-25 00:05:02</p>\r\n</blockquote>\r\n<a id=\"more\"></a>\r\n<h1 id=\"firefox-config-设置\">FireFox config 设置</h1>\r\n<p>about:config页面:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view_source.editor.external             允许使用外部编辑器</span><br><span class=\"line\">view_source.editor.path                 编辑器路径</span><br><span class=\"line\">security.enterprise_roots.enabled       固定根证书</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-24 20:40:31</p>\r\n</blockquote>\r\n<h1 id=\"linux-用户-用户组-权限管理\">Linux 用户, 用户组 权限管理</h1>\r\n<p>指定 /usr/sbin/nologin 使用户无法登陆 shelll</p>\r\n<p>useradd userdel usermod</p>\r\n<p>groupadd groupdel groupmod</p>\r\n<p>passwd</p>\r\n<blockquote>\r\n<p>date:2018-08-24 03:59:13</p>\r\n</blockquote>\r\n<h1 id=\"linux-添加-sudoer\">Linux 添加 sudoer</h1>\r\n<p>编辑 <code>/etc/sudoers</code></p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 /etc/sudoers    <span class=\"comment\">#获取写权限</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'username ALL=(ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class=\"line\">chmod 200 /etc/sudoers</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username ALL=(ALL:ALL) ALL</span><br><span class=\"line\">        可切换至所有用户, 用户组, 可使用所有命令</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-24 02:30:19</p>\r\n</blockquote>\r\n<h1 id=\"css-选择器\">CSS 选择器</h1>\r\n<p><code>.</code> 选择类 <code>class</code></p>\r\n<p><code>#</code> 选择 <code>id</code></p>\r\n<blockquote>\r\n<p>date:2018-08-24 01:49:01</p>\r\n</blockquote>\r\n<h1 id=\"powershell-rm\">PowerShell rm</h1>\r\n<p>可以向 -Exclude (忽略) 传递多个值, 使用逗号 , 分割. -Include 同理.</p>\r\n<blockquote>\r\n<p>date:2018-08-24 00:22:24</p>\r\n</blockquote>\r\n<h1 id=\"检查翻墙vps是否被封的办法\">检查翻墙VPS是否被封的办法</h1>\r\n<h2 id=\"首先-ping-测试.\">首先, <code>ping</code> 测试.</h2>\r\n<ul>\r\n<li>检查能否 <code>ping</code> 通.</li>\r\n</ul>\r\n<h2 id=\"其次-端口测试\">其次, 端口测试</h2>\r\n<p>国内端口测试:</p>\r\n<p><a href=\"http://tool.chinaz.com/port\" target=\"_blank\" rel=\"noopener\">站长工具/port</a></p>\r\n<p>国外端口测试:</p>\r\n<p><a href=\"https://www.yougetsignal.com/tools/open-ports/\" target=\"_blank\" rel=\"noopener\">Open Port Finder</a></p>\r\n<blockquote>\r\n<p>date:2018-08-23 03:39:16</p>\r\n</blockquote>\r\n<h1 id=\"更换hexo主题的背景图\">更换Hexo主题的背景图</h1>\r\n<p>将喜欢的背景图放到 <code>project--&gt;themes--&gt;next--&gt;source--&gt;images</code> 目录下。 打开 <code>project--&gt;themes--&gt;next--&gt;source--&gt;css--&gt;_custom--&gt;custom.styl</code> 文件，加入代码</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123; background:url(/images/imagename.jpg);&#125;</span><br></pre></td></tr></table></figure>\r\n<p>重新编译项目就OK了。</p>\r\n<p><a href=\"http://www.lieeber.com/2016/05/15/Hexo%E4%BD%BF%E7%94%A8%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8Ftips/#%E6%9B%B4%E6%8D%A2next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%83%8C%E6%99%AF\" target=\"_blank\" rel=\"noopener\">参考</a></p>\r\n<p>但是这效果...... 应该需要改 CSS 把 post 部分弄宽一点吧... 但是不会改... 暂时放弃.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ef0c9cb183.png\" alt=\"Snipaste_2018-08-24_01-36-38.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-36-38.png</p>\r\n</div>\r\n<blockquote>\r\n<p>date:2018-08-22 18:48:02</p>\r\n</blockquote>\r\n<h1 id=\"powershell-中的转义字符\">PowerShell 中的转义字符</h1>\r\n<p>PowerShell 使用反引号作为转义字符;</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所以如果要在终端中使用反引号, 就打两个反引号就好了</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-22 18:07:10</p>\r\n</blockquote>\r\n<h1 id=\"sshconfig-配置\">~/.ssh/config 配置</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host &lt;hostname&gt;</span><br><span class=\"line\">        HostName &lt;domain or IP adress&gt;</span><br><span class=\"line\">        PreferredAuthentications publickey</span><br><span class=\"line\">        IdentityFile ~/.ssh/id_rsa # 使用的私钥</span><br><span class=\"line\">        Port 22         # 如果使用其他端口, 自行设置</span><br><span class=\"line\">        User &lt;登陆的用户名&gt;</span><br></pre></td></tr></table></figure>\r\n<p>之后就可以直接使用 <code>ssh &lt;hostname&gt;</code> 登陆了.</p>\r\n<blockquote>\r\n<p>date:2018-08-22 13:13:42</p>\r\n</blockquote>\r\n<h1 id=\"linux-bbr\">Linux BBR</h1>\r\n<p>内核版本必须大于 4.9.</p>\r\n<p><a href=\"https://www.google.com/search?q=Linux+升级内核\" target=\"_blank\" rel=\"noopener\">升级内核</a></p>\r\n<p>检查是否已开启:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r <span class=\"comment\"># 查看内核版本</span></span><br><span class=\"line\">sysctl net.ipv4.tcp_avaliable_congestion_control <span class=\"comment\"># 查看内核是否启用 BBR 算法</span></span><br><span class=\"line\">lsmod | grep bbr    <span class=\"comment\"># 如果有 tcp_bbr 说明启动成功</span></span><br></pre></td></tr></table></figure>\r\n<p>通过写入配置文件开启 BBR</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> net.core.default_qdisc=fq &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> net.ipv4.tcp_congestion_control=bbr &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-21 22:11:40</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>date:2018-08-21 21:56:46</p>\r\n</blockquote>\r\n<h1 id=\"android-刷机包结构\">Android 刷机包结构?</h1>\r\n<blockquote>\r\n<p>date:2018-08-21 10:01:46</p>\r\n</blockquote>\r\n<h1 id=\"todo-vim-内置命令\">TODO: Vim 内置命令</h1>\r\n<ul>\r\n<li>打开模式</li>\r\n<li>分栏操作</li>\r\n<li>打开, 切换编辑文件</li>\r\n</ul>\r\n<blockquote>\r\n<p>date:2018-08-21 01:28:04</p>\r\n</blockquote>\r\n<h1 id=\"python-windows-如何处理字符编码\">Python @ Windows 如何处理字符编码</h1>\r\n<p>读到内存中的字符串都是Unicode编码吗?</p>\r\n<p>只有在IO时才会编码解码?</p>\r\n<blockquote>\r\n<p>date:2018-08-20 18:08:19</p>\r\n</blockquote>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"locate找不到数据库的解决办法\">locate找不到数据库的解决办法</h1>\r\n<p><code>updatedb</code> 指令生成数据库</p>\r\n<blockquote>\r\n<p>date:2018-08-25 00:05:02</p>\r\n</blockquote>","more":"<h1 id=\"firefox-config-设置\">FireFox config 设置</h1>\r\n<p>about:config页面:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view_source.editor.external             允许使用外部编辑器</span><br><span class=\"line\">view_source.editor.path                 编辑器路径</span><br><span class=\"line\">security.enterprise_roots.enabled       固定根证书</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-24 20:40:31</p>\r\n</blockquote>\r\n<h1 id=\"linux-用户-用户组-权限管理\">Linux 用户, 用户组 权限管理</h1>\r\n<p>指定 /usr/sbin/nologin 使用户无法登陆 shelll</p>\r\n<p>useradd userdel usermod</p>\r\n<p>groupadd groupdel groupmod</p>\r\n<p>passwd</p>\r\n<blockquote>\r\n<p>date:2018-08-24 03:59:13</p>\r\n</blockquote>\r\n<h1 id=\"linux-添加-sudoer\">Linux 添加 sudoer</h1>\r\n<p>编辑 <code>/etc/sudoers</code></p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 /etc/sudoers    <span class=\"comment\">#获取写权限</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'username ALL=(ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class=\"line\">chmod 200 /etc/sudoers</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username ALL=(ALL:ALL) ALL</span><br><span class=\"line\">        可切换至所有用户, 用户组, 可使用所有命令</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-24 02:30:19</p>\r\n</blockquote>\r\n<h1 id=\"css-选择器\">CSS 选择器</h1>\r\n<p><code>.</code> 选择类 <code>class</code></p>\r\n<p><code>#</code> 选择 <code>id</code></p>\r\n<blockquote>\r\n<p>date:2018-08-24 01:49:01</p>\r\n</blockquote>\r\n<h1 id=\"powershell-rm\">PowerShell rm</h1>\r\n<p>可以向 -Exclude (忽略) 传递多个值, 使用逗号 , 分割. -Include 同理.</p>\r\n<blockquote>\r\n<p>date:2018-08-24 00:22:24</p>\r\n</blockquote>\r\n<h1 id=\"检查翻墙vps是否被封的办法\">检查翻墙VPS是否被封的办法</h1>\r\n<h2 id=\"首先-ping-测试.\">首先, <code>ping</code> 测试.</h2>\r\n<ul>\r\n<li>检查能否 <code>ping</code> 通.</li>\r\n</ul>\r\n<h2 id=\"其次-端口测试\">其次, 端口测试</h2>\r\n<p>国内端口测试:</p>\r\n<p><a href=\"http://tool.chinaz.com/port\" target=\"_blank\" rel=\"noopener\">站长工具/port</a></p>\r\n<p>国外端口测试:</p>\r\n<p><a href=\"https://www.yougetsignal.com/tools/open-ports/\" target=\"_blank\" rel=\"noopener\">Open Port Finder</a></p>\r\n<blockquote>\r\n<p>date:2018-08-23 03:39:16</p>\r\n</blockquote>\r\n<h1 id=\"更换hexo主题的背景图\">更换Hexo主题的背景图</h1>\r\n<p>将喜欢的背景图放到 <code>project--&gt;themes--&gt;next--&gt;source--&gt;images</code> 目录下。 打开 <code>project--&gt;themes--&gt;next--&gt;source--&gt;css--&gt;_custom--&gt;custom.styl</code> 文件，加入代码</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123; background:url(/images/imagename.jpg);&#125;</span><br></pre></td></tr></table></figure>\r\n<p>重新编译项目就OK了。</p>\r\n<p><a href=\"http://www.lieeber.com/2016/05/15/Hexo%E4%BD%BF%E7%94%A8%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8Ftips/#%E6%9B%B4%E6%8D%A2next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%83%8C%E6%99%AF\" target=\"_blank\" rel=\"noopener\">参考</a></p>\r\n<p>但是这效果...... 应该需要改 CSS 把 post 部分弄宽一点吧... 但是不会改... 暂时放弃.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ef0c9cb183.png\" alt=\"Snipaste_2018-08-24_01-36-38.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-36-38.png</p>\r\n</div>\r\n<blockquote>\r\n<p>date:2018-08-22 18:48:02</p>\r\n</blockquote>\r\n<h1 id=\"powershell-中的转义字符\">PowerShell 中的转义字符</h1>\r\n<p>PowerShell 使用反引号作为转义字符;</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所以如果要在终端中使用反引号, 就打两个反引号就好了</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-22 18:07:10</p>\r\n</blockquote>\r\n<h1 id=\"sshconfig-配置\">~/.ssh/config 配置</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host &lt;hostname&gt;</span><br><span class=\"line\">        HostName &lt;domain or IP adress&gt;</span><br><span class=\"line\">        PreferredAuthentications publickey</span><br><span class=\"line\">        IdentityFile ~/.ssh/id_rsa # 使用的私钥</span><br><span class=\"line\">        Port 22         # 如果使用其他端口, 自行设置</span><br><span class=\"line\">        User &lt;登陆的用户名&gt;</span><br></pre></td></tr></table></figure>\r\n<p>之后就可以直接使用 <code>ssh &lt;hostname&gt;</code> 登陆了.</p>\r\n<blockquote>\r\n<p>date:2018-08-22 13:13:42</p>\r\n</blockquote>\r\n<h1 id=\"linux-bbr\">Linux BBR</h1>\r\n<p>内核版本必须大于 4.9.</p>\r\n<p><a href=\"https://www.google.com/search?q=Linux+升级内核\" target=\"_blank\" rel=\"noopener\">升级内核</a></p>\r\n<p>检查是否已开启:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r <span class=\"comment\"># 查看内核版本</span></span><br><span class=\"line\">sysctl net.ipv4.tcp_avaliable_congestion_control <span class=\"comment\"># 查看内核是否启用 BBR 算法</span></span><br><span class=\"line\">lsmod | grep bbr    <span class=\"comment\"># 如果有 tcp_bbr 说明启动成功</span></span><br></pre></td></tr></table></figure>\r\n<p>通过写入配置文件开启 BBR</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> net.core.default_qdisc=fq &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> net.ipv4.tcp_congestion_control=bbr &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>date:2018-08-21 22:11:40</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>date:2018-08-21 21:56:46</p>\r\n</blockquote>\r\n<h1 id=\"android-刷机包结构\">Android 刷机包结构?</h1>\r\n<blockquote>\r\n<p>date:2018-08-21 10:01:46</p>\r\n</blockquote>\r\n<h1 id=\"todo-vim-内置命令\">TODO: Vim 内置命令</h1>\r\n<ul>\r\n<li>打开模式</li>\r\n<li>分栏操作</li>\r\n<li>打开, 切换编辑文件</li>\r\n</ul>\r\n<blockquote>\r\n<p>date:2018-08-21 01:28:04</p>\r\n</blockquote>\r\n<h1 id=\"python-windows-如何处理字符编码\">Python @ Windows 如何处理字符编码</h1>\r\n<p>读到内存中的字符串都是Unicode编码吗?</p>\r\n<p>只有在IO时才会编码解码?</p>\r\n<blockquote>\r\n<p>date:2018-08-20 18:08:19</p>\r\n</blockquote>"},{"title":"Vim 入门-终端记事本","date":"2018-08-20T10:38:07.000Z","_content":"\n了解 Vim 的基本操作, 能进行 NotePad.exe 所能进行的操作.\n\n# 概览\n\n本文记录以下功能的实现方法:\n\n- 打开 保存 另存为\n- 移动光标\n- 输入文本\n- 删除文本\n- 选择文本\n- 复制\n- 剪切\n- 粘贴\n- 搜索\n- 替换\n- 撤销动作\n\n<!--more-->\n\n<strong>\n我刚开始用 Vim 的时候有一个误区, 认为 Vim 在普通模式下的按下的键就是按键. 但实际上是向 Vim 输入了对应字符, 只是这输入被解释为命令罢了.\n所以, 不要纳闷一些 \"特殊符号\" 的键怎么按, 两个符号明明在同一个键位上怎么区分等问题了...\n</strong>\n\n# 先说说 Vim 的四种模式\n\nVim 有四种模式:\n\n0. 普通模式\n0. 输入模式\n0. 命令模式\n0. 可视模式(翻译为选择模式更贴切)\n\n## 普通模式\n\n普通模式下的 Vim 的光标呈现一个方块的形状, 盖在当前字符上, 进入其他模式后会发生变化, 这是区分当前模式的方法之一.\n\n进入 Vim 时, 默认处于普通模式. 这个时候, 用户可以移动光标, 或进入其他模式. 这个模式下的 Vim 可以当作一个文本阅读器.\n\n从任何模式, 都可以按 <kbd>Esc</kbd> 键退回该模式. 命令模式除外, 只需要将最开始的冒号 `:` 删掉即可.\n\nVim 会将在普通模式下输入的字符记录并在右下角显示, 当输入的字符满足触发指令的时候, 就会执行相关指令. 例如切换模式等.\n\n## 输入模式\n\n输入模式, 包括 插入, 替换 两种输入方式.\n\n要进入输入模式, 可以通过 <kbd>i</kbd> 等按键从普通模式进入. 当前先掌握下表按键:\n\n|按键|作用|\n|:-:|-|\n|<kbd>i</kbd>|在当前光标前插入|\n|<kbd>a</kbd>|在当前光标后插入|\n|<kbd>o</kbd>|在下方另起一行插入|\n|<kbd>O</kbd>|在上方另起一行插入|\n|<kbd>r</kbd>|替换当前字符|\n|<kbd>R</kbd>|进入替换模式|\n\n<!--\n|<kbd>s</kbd>|删除当前字符并插入|\n|<kbd>S</kbd>|删除当前行并插入|\n|<kbd>I</kbd>|在当前行的头部插入|\n|<kbd>A</kbd>|在当前行的尾部插入|\n|<kbd></kbd>||\n-->\n\n进入插入模式后, 左下角会显示提示符 `--INSERT--` , 再按下按键就将在光标位置处插入对应文本.\n\n具体说一下 `r` `R` 两个键的作用:\n\n输入 `r` 后, 在右下角会显示一个提示符 `r`(在普通模式下输入的字符都会被记录在右下角, 试图解释为命令), 这时候输入任意一个字符, 就会将光标下的字符替换, 然后退出.\n\n而输入 `R` 则会进入替换模式, 在左下角有提示符 `--REPLACE--`, 此时输入的字符会将光标下的字符覆盖, 直到按下 `Ecs` 退出.\n\n简单来说, 就是 `r` 只替换一个字符, `R` 则进入替换模式.\n\n# 选择模式\n\n普通模式下输入 <kbd>v</kbd> 进入选择模式, 此种选择模式是 `流选择`, 效果就和在其他文本编辑器中按下 <kbd>Shift</kbd> 并移动光标一样.\n\n普通模式下输入 <kbd>V</kbd> 进入行选择模式, 会按行选择.\n\n对于两种选择方式, 有 `--VISUAL--` 和 `--VISUAL LINE--` 两种提示符.\n\nTODO: 怎么 `块选择`?\n\n# 命令模式\n\n在普通模式下输入冒号 <kbd>:</kbd> 进入冒号模式, 会在最下方显示一个输入框, 开头就是输入的冒号. 在冒号后面输入要运行的指令并回车, 就会执行.\n\n最常用的指令, 比如 `:w` `:wq` `:q!` 等等. 则会 `保存文件` , ` 保存文件并退出` , `退出, 不保存更改` .\n\n# 打开 保存 另存为\n\n在终端中输入\n\n```sh\nvim filename\n```\n\n则会以文本模式打开一个文件. 而加上 `-b` 参数, 则会以二进制模式打开. 因为二进制没怎么用过, 暂且不表.\n\n编辑完文件后, 在 Vim 的普通模式下输入 <kbd>:</kbd> 进入命令模式.\n\n- `:wq`, 保存并退出.\n- `:q!`, 退出且不保存.\n- `:w`, 保存, 不退出\n- `:w new_file_path`, 将文件另存为到指定文件中. (可使用相对路径或绝对路径).\n\n# 移动光标\n\n在任何模式下, 都可以通过键盘方向键移动光标, 而在普通模式和选择模式下, 可以用`kjhl` 移动光标, 效果和方向键相同.\n\n```\n  上             k\n左下右         h j l\n```\n\n还有另一些功能特殊的键:\n\n|输入|作用|\n|:-:|-|\n|`w`|移动到下一个单词头部|\n|`e`|移动到下一个单词尾部|\n|`b`|移动到上一个单词头部|\n|`ge`|移动到上一个单词尾部|\n|`^`|移动到行首|\n|`$`|移动到行尾|\n|`gg`|移动到文件头部|\n|`G`|移动到文件尾部|\n\n# 输入文本\n\n参阅 [插入与替换](#输入模式).\n\n# 删除文本\n\n- 在普通模式下, 输入 `dd` 删除光标所在行.\n- 在选择模式下, 输入 `d` 删除选中部分.\n\n# 选择文本\n\n在 [选择模式](#选择模式) 下移动光标即可选择文本.\n\n# 复制\n\n- 在普通模式下, 输入 `yy` 复制光标所在行.\n- 在选择模式下, 输入 `y` 复制选中部分.\n\n# 粘贴\n\n普通模式下:\n\n- `p` (小写), 粘贴到下一行.\n- `P` (大写), 粘贴到上一行.\n- `gp` 粘贴到光标之后.\n- `gP` 粘贴到光标之前.\n\n# 剪切\n\n用命令删除的文本会被保存到寄存器中, 如果再粘贴出来, 就是 \"剪切+粘贴\" 的效果.\n\nTODO:\n\n# 搜索\n\nVim 的搜索功能通过命令来实现.\n\n# 替换\n\n除了输入模式里介绍过的 `r` 与 `R` 之外, Vim 还可以用命令替换指定字符串.\n\n# 撤销动作\n\n在普通模式下输入 `u` 撤销一次修改. 可以一直回退, 虽然修改记录的数量应该会有一个极限, 但大多数时候我都能回退到打开文件最开始时的状态.","source":"_posts/Vim-入门-终端记事本.md","raw":"---\ntitle: Vim 入门-终端记事本\ntags:\n  - Vim\n  - Note\ncategories:\n  - 日常\ndate: 2018-08-20 18:38:07\n---\n\n了解 Vim 的基本操作, 能进行 NotePad.exe 所能进行的操作.\n\n# 概览\n\n本文记录以下功能的实现方法:\n\n- 打开 保存 另存为\n- 移动光标\n- 输入文本\n- 删除文本\n- 选择文本\n- 复制\n- 剪切\n- 粘贴\n- 搜索\n- 替换\n- 撤销动作\n\n<!--more-->\n\n<strong>\n我刚开始用 Vim 的时候有一个误区, 认为 Vim 在普通模式下的按下的键就是按键. 但实际上是向 Vim 输入了对应字符, 只是这输入被解释为命令罢了.\n所以, 不要纳闷一些 \"特殊符号\" 的键怎么按, 两个符号明明在同一个键位上怎么区分等问题了...\n</strong>\n\n# 先说说 Vim 的四种模式\n\nVim 有四种模式:\n\n0. 普通模式\n0. 输入模式\n0. 命令模式\n0. 可视模式(翻译为选择模式更贴切)\n\n## 普通模式\n\n普通模式下的 Vim 的光标呈现一个方块的形状, 盖在当前字符上, 进入其他模式后会发生变化, 这是区分当前模式的方法之一.\n\n进入 Vim 时, 默认处于普通模式. 这个时候, 用户可以移动光标, 或进入其他模式. 这个模式下的 Vim 可以当作一个文本阅读器.\n\n从任何模式, 都可以按 <kbd>Esc</kbd> 键退回该模式. 命令模式除外, 只需要将最开始的冒号 `:` 删掉即可.\n\nVim 会将在普通模式下输入的字符记录并在右下角显示, 当输入的字符满足触发指令的时候, 就会执行相关指令. 例如切换模式等.\n\n## 输入模式\n\n输入模式, 包括 插入, 替换 两种输入方式.\n\n要进入输入模式, 可以通过 <kbd>i</kbd> 等按键从普通模式进入. 当前先掌握下表按键:\n\n|按键|作用|\n|:-:|-|\n|<kbd>i</kbd>|在当前光标前插入|\n|<kbd>a</kbd>|在当前光标后插入|\n|<kbd>o</kbd>|在下方另起一行插入|\n|<kbd>O</kbd>|在上方另起一行插入|\n|<kbd>r</kbd>|替换当前字符|\n|<kbd>R</kbd>|进入替换模式|\n\n<!--\n|<kbd>s</kbd>|删除当前字符并插入|\n|<kbd>S</kbd>|删除当前行并插入|\n|<kbd>I</kbd>|在当前行的头部插入|\n|<kbd>A</kbd>|在当前行的尾部插入|\n|<kbd></kbd>||\n-->\n\n进入插入模式后, 左下角会显示提示符 `--INSERT--` , 再按下按键就将在光标位置处插入对应文本.\n\n具体说一下 `r` `R` 两个键的作用:\n\n输入 `r` 后, 在右下角会显示一个提示符 `r`(在普通模式下输入的字符都会被记录在右下角, 试图解释为命令), 这时候输入任意一个字符, 就会将光标下的字符替换, 然后退出.\n\n而输入 `R` 则会进入替换模式, 在左下角有提示符 `--REPLACE--`, 此时输入的字符会将光标下的字符覆盖, 直到按下 `Ecs` 退出.\n\n简单来说, 就是 `r` 只替换一个字符, `R` 则进入替换模式.\n\n# 选择模式\n\n普通模式下输入 <kbd>v</kbd> 进入选择模式, 此种选择模式是 `流选择`, 效果就和在其他文本编辑器中按下 <kbd>Shift</kbd> 并移动光标一样.\n\n普通模式下输入 <kbd>V</kbd> 进入行选择模式, 会按行选择.\n\n对于两种选择方式, 有 `--VISUAL--` 和 `--VISUAL LINE--` 两种提示符.\n\nTODO: 怎么 `块选择`?\n\n# 命令模式\n\n在普通模式下输入冒号 <kbd>:</kbd> 进入冒号模式, 会在最下方显示一个输入框, 开头就是输入的冒号. 在冒号后面输入要运行的指令并回车, 就会执行.\n\n最常用的指令, 比如 `:w` `:wq` `:q!` 等等. 则会 `保存文件` , ` 保存文件并退出` , `退出, 不保存更改` .\n\n# 打开 保存 另存为\n\n在终端中输入\n\n```sh\nvim filename\n```\n\n则会以文本模式打开一个文件. 而加上 `-b` 参数, 则会以二进制模式打开. 因为二进制没怎么用过, 暂且不表.\n\n编辑完文件后, 在 Vim 的普通模式下输入 <kbd>:</kbd> 进入命令模式.\n\n- `:wq`, 保存并退出.\n- `:q!`, 退出且不保存.\n- `:w`, 保存, 不退出\n- `:w new_file_path`, 将文件另存为到指定文件中. (可使用相对路径或绝对路径).\n\n# 移动光标\n\n在任何模式下, 都可以通过键盘方向键移动光标, 而在普通模式和选择模式下, 可以用`kjhl` 移动光标, 效果和方向键相同.\n\n```\n  上             k\n左下右         h j l\n```\n\n还有另一些功能特殊的键:\n\n|输入|作用|\n|:-:|-|\n|`w`|移动到下一个单词头部|\n|`e`|移动到下一个单词尾部|\n|`b`|移动到上一个单词头部|\n|`ge`|移动到上一个单词尾部|\n|`^`|移动到行首|\n|`$`|移动到行尾|\n|`gg`|移动到文件头部|\n|`G`|移动到文件尾部|\n\n# 输入文本\n\n参阅 [插入与替换](#输入模式).\n\n# 删除文本\n\n- 在普通模式下, 输入 `dd` 删除光标所在行.\n- 在选择模式下, 输入 `d` 删除选中部分.\n\n# 选择文本\n\n在 [选择模式](#选择模式) 下移动光标即可选择文本.\n\n# 复制\n\n- 在普通模式下, 输入 `yy` 复制光标所在行.\n- 在选择模式下, 输入 `y` 复制选中部分.\n\n# 粘贴\n\n普通模式下:\n\n- `p` (小写), 粘贴到下一行.\n- `P` (大写), 粘贴到上一行.\n- `gp` 粘贴到光标之后.\n- `gP` 粘贴到光标之前.\n\n# 剪切\n\n用命令删除的文本会被保存到寄存器中, 如果再粘贴出来, 就是 \"剪切+粘贴\" 的效果.\n\nTODO:\n\n# 搜索\n\nVim 的搜索功能通过命令来实现.\n\n# 替换\n\n除了输入模式里介绍过的 `r` 与 `R` 之外, Vim 还可以用命令替换指定字符串.\n\n# 撤销动作\n\n在普通模式下输入 `u` 撤销一次修改. 可以一直回退, 虽然修改记录的数量应该会有一个极限, 但大多数时候我都能回退到打开文件最开始时的状态.","slug":"Vim-入门-终端记事本","published":1,"updated":"2018-08-23T17:45:55.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw76001bw8lk79i2rcei","content":"<p>了解 Vim 的基本操作, 能进行 NotePad.exe 所能进行的操作.</p>\r\n<h1 id=\"概览\">概览</h1>\r\n<p>本文记录以下功能的实现方法:</p>\r\n<ul>\r\n<li>打开 保存 另存为</li>\r\n<li>移动光标</li>\r\n<li>输入文本</li>\r\n<li>删除文本</li>\r\n<li>选择文本</li>\r\n<li>复制</li>\r\n<li>剪切</li>\r\n<li>粘贴</li>\r\n<li>搜索</li>\r\n<li>替换</li>\r\n<li>撤销动作</li>\r\n</ul>\r\n<a id=\"more\"></a>\r\n<p><strong> 我刚开始用 Vim 的时候有一个误区, 认为 Vim 在普通模式下的按下的键就是按键. 但实际上是向 Vim 输入了对应字符, 只是这输入被解释为命令罢了. 所以, 不要纳闷一些 &quot;特殊符号&quot; 的键怎么按, 两个符号明明在同一个键位上怎么区分等问题了... </strong></p>\r\n<h1 id=\"先说说-vim-的四种模式\">先说说 Vim 的四种模式</h1>\r\n<p>Vim 有四种模式:</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>普通模式</li>\r\n<li>输入模式</li>\r\n<li>命令模式</li>\r\n<li>可视模式(翻译为选择模式更贴切)</li>\r\n</ol>\r\n<h2 id=\"普通模式\">普通模式</h2>\r\n<p>普通模式下的 Vim 的光标呈现一个方块的形状, 盖在当前字符上, 进入其他模式后会发生变化, 这是区分当前模式的方法之一.</p>\r\n<p>进入 Vim 时, 默认处于普通模式. 这个时候, 用户可以移动光标, 或进入其他模式. 这个模式下的 Vim 可以当作一个文本阅读器.</p>\r\n<p>从任何模式, 都可以按 <kbd>Esc</kbd> 键退回该模式. 命令模式除外, 只需要将最开始的冒号 <code>:</code> 删掉即可.</p>\r\n<p>Vim 会将在普通模式下输入的字符记录并在右下角显示, 当输入的字符满足触发指令的时候, 就会执行相关指令. 例如切换模式等.</p>\r\n<h2 id=\"输入模式\">输入模式</h2>\r\n<p>输入模式, 包括 插入, 替换 两种输入方式.</p>\r\n<p>要进入输入模式, 可以通过 <kbd>i</kbd> 等按键从普通模式进入. 当前先掌握下表按键:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">按键</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><kbd>i</kbd></td>\r\n<td>在当前光标前插入</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><kbd>a</kbd></td>\r\n<td>在当前光标后插入</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><kbd>o</kbd></td>\r\n<td>在下方另起一行插入</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><kbd>O</kbd></td>\r\n<td>在上方另起一行插入</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><kbd>r</kbd></td>\r\n<td>替换当前字符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><kbd>R</kbd></td>\r\n<td>进入替换模式</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<!--\r\n|<kbd>s</kbd>|删除当前字符并插入|\r\n|<kbd>S</kbd>|删除当前行并插入|\r\n|<kbd>I</kbd>|在当前行的头部插入|\r\n|<kbd>A</kbd>|在当前行的尾部插入|\r\n|<kbd></kbd>||\r\n-->\r\n<p>进入插入模式后, 左下角会显示提示符 <code>--INSERT--</code> , 再按下按键就将在光标位置处插入对应文本.</p>\r\n<p>具体说一下 <code>r</code> <code>R</code> 两个键的作用:</p>\r\n<p>输入 <code>r</code> 后, 在右下角会显示一个提示符 <code>r</code>(在普通模式下输入的字符都会被记录在右下角, 试图解释为命令), 这时候输入任意一个字符, 就会将光标下的字符替换, 然后退出.</p>\r\n<p>而输入 <code>R</code> 则会进入替换模式, 在左下角有提示符 <code>--REPLACE--</code>, 此时输入的字符会将光标下的字符覆盖, 直到按下 <code>Ecs</code> 退出.</p>\r\n<p>简单来说, 就是 <code>r</code> 只替换一个字符, <code>R</code> 则进入替换模式.</p>\r\n<h1 id=\"选择模式\">选择模式</h1>\r\n<p>普通模式下输入 <kbd>v</kbd> 进入选择模式, 此种选择模式是 <code>流选择</code>, 效果就和在其他文本编辑器中按下 <kbd>Shift</kbd> 并移动光标一样.</p>\r\n<p>普通模式下输入 <kbd>V</kbd> 进入行选择模式, 会按行选择.</p>\r\n<p>对于两种选择方式, 有 <code>--VISUAL--</code> 和 <code>--VISUAL LINE--</code> 两种提示符.</p>\r\n<p>TODO: 怎么 <code>块选择</code>?</p>\r\n<h1 id=\"命令模式\">命令模式</h1>\r\n<p>在普通模式下输入冒号 <kbd>:</kbd> 进入冒号模式, 会在最下方显示一个输入框, 开头就是输入的冒号. 在冒号后面输入要运行的指令并回车, 就会执行.</p>\r\n<p>最常用的指令, 比如 <code>:w</code> <code>:wq</code> <code>:q!</code> 等等. 则会 <code>保存文件</code> , <code>保存文件并退出</code> , <code>退出, 不保存更改</code> .</p>\r\n<h1 id=\"打开-保存-另存为\">打开 保存 另存为</h1>\r\n<p>在终端中输入</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim filename</span><br></pre></td></tr></table></figure>\r\n<p>则会以文本模式打开一个文件. 而加上 <code>-b</code> 参数, 则会以二进制模式打开. 因为二进制没怎么用过, 暂且不表.</p>\r\n<p>编辑完文件后, 在 Vim 的普通模式下输入 <kbd>:</kbd> 进入命令模式.</p>\r\n<ul>\r\n<li><code>:wq</code>, 保存并退出.</li>\r\n<li><code>:q!</code>, 退出且不保存.</li>\r\n<li><code>:w</code>, 保存, 不退出</li>\r\n<li><code>:w new_file_path</code>, 将文件另存为到指定文件中. (可使用相对路径或绝对路径).</li>\r\n</ul>\r\n<h1 id=\"移动光标\">移动光标</h1>\r\n<p>在任何模式下, 都可以通过键盘方向键移动光标, 而在普通模式和选择模式下, 可以用<code>kjhl</code> 移动光标, 效果和方向键相同.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  上             k</span><br><span class=\"line\">左下右         h j l</span><br></pre></td></tr></table></figure>\r\n<p>还有另一些功能特殊的键:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">输入</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>w</code></td>\r\n<td>移动到下一个单词头部</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>e</code></td>\r\n<td>移动到下一个单词尾部</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>b</code></td>\r\n<td>移动到上一个单词头部</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>ge</code></td>\r\n<td>移动到上一个单词尾部</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>^</code></td>\r\n<td>移动到行首</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>$</code></td>\r\n<td>移动到行尾</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>gg</code></td>\r\n<td>移动到文件头部</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>G</code></td>\r\n<td>移动到文件尾部</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h1 id=\"输入文本\">输入文本</h1>\r\n<p>参阅 <a href=\"#输入模式\">插入与替换</a>.</p>\r\n<h1 id=\"删除文本\">删除文本</h1>\r\n<ul>\r\n<li>在普通模式下, 输入 <code>dd</code> 删除光标所在行.</li>\r\n<li>在选择模式下, 输入 <code>d</code> 删除选中部分.</li>\r\n</ul>\r\n<h1 id=\"选择文本\">选择文本</h1>\r\n<p>在 <a href=\"#选择模式\">选择模式</a> 下移动光标即可选择文本.</p>\r\n<h1 id=\"复制\">复制</h1>\r\n<ul>\r\n<li>在普通模式下, 输入 <code>yy</code> 复制光标所在行.</li>\r\n<li>在选择模式下, 输入 <code>y</code> 复制选中部分.</li>\r\n</ul>\r\n<h1 id=\"粘贴\">粘贴</h1>\r\n<p>普通模式下:</p>\r\n<ul>\r\n<li><code>p</code> (小写), 粘贴到下一行.</li>\r\n<li><code>P</code> (大写), 粘贴到上一行.</li>\r\n<li><code>gp</code> 粘贴到光标之后.</li>\r\n<li><code>gP</code> 粘贴到光标之前.</li>\r\n</ul>\r\n<h1 id=\"剪切\">剪切</h1>\r\n<p>用命令删除的文本会被保存到寄存器中, 如果再粘贴出来, 就是 &quot;剪切+粘贴&quot; 的效果.</p>\r\n<p>TODO:</p>\r\n<h1 id=\"搜索\">搜索</h1>\r\n<p>Vim 的搜索功能通过命令来实现.</p>\r\n<h1 id=\"替换\">替换</h1>\r\n<p>除了输入模式里介绍过的 <code>r</code> 与 <code>R</code> 之外, Vim 还可以用命令替换指定字符串.</p>\r\n<h1 id=\"撤销动作\">撤销动作</h1>\r\n<p>在普通模式下输入 <code>u</code> 撤销一次修改. 可以一直回退, 虽然修改记录的数量应该会有一个极限, 但大多数时候我都能回退到打开文件最开始时的状态.</p>\r\n","site":{"data":{}},"excerpt":"<p>了解 Vim 的基本操作, 能进行 NotePad.exe 所能进行的操作.</p>\r\n<h1 id=\"概览\">概览</h1>\r\n<p>本文记录以下功能的实现方法:</p>\r\n<ul>\r\n<li>打开 保存 另存为</li>\r\n<li>移动光标</li>\r\n<li>输入文本</li>\r\n<li>删除文本</li>\r\n<li>选择文本</li>\r\n<li>复制</li>\r\n<li>剪切</li>\r\n<li>粘贴</li>\r\n<li>搜索</li>\r\n<li>替换</li>\r\n<li>撤销动作</li>\r\n</ul>","more":"<p><strong> 我刚开始用 Vim 的时候有一个误区, 认为 Vim 在普通模式下的按下的键就是按键. 但实际上是向 Vim 输入了对应字符, 只是这输入被解释为命令罢了. 所以, 不要纳闷一些 &quot;特殊符号&quot; 的键怎么按, 两个符号明明在同一个键位上怎么区分等问题了... </strong></p>\r\n<h1 id=\"先说说-vim-的四种模式\">先说说 Vim 的四种模式</h1>\r\n<p>Vim 有四种模式:</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>普通模式</li>\r\n<li>输入模式</li>\r\n<li>命令模式</li>\r\n<li>可视模式(翻译为选择模式更贴切)</li>\r\n</ol>\r\n<h2 id=\"普通模式\">普通模式</h2>\r\n<p>普通模式下的 Vim 的光标呈现一个方块的形状, 盖在当前字符上, 进入其他模式后会发生变化, 这是区分当前模式的方法之一.</p>\r\n<p>进入 Vim 时, 默认处于普通模式. 这个时候, 用户可以移动光标, 或进入其他模式. 这个模式下的 Vim 可以当作一个文本阅读器.</p>\r\n<p>从任何模式, 都可以按 <kbd>Esc</kbd> 键退回该模式. 命令模式除外, 只需要将最开始的冒号 <code>:</code> 删掉即可.</p>\r\n<p>Vim 会将在普通模式下输入的字符记录并在右下角显示, 当输入的字符满足触发指令的时候, 就会执行相关指令. 例如切换模式等.</p>\r\n<h2 id=\"输入模式\">输入模式</h2>\r\n<p>输入模式, 包括 插入, 替换 两种输入方式.</p>\r\n<p>要进入输入模式, 可以通过 <kbd>i</kbd> 等按键从普通模式进入. 当前先掌握下表按键:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">按键</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><kbd>i</kbd></td>\r\n<td>在当前光标前插入</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><kbd>a</kbd></td>\r\n<td>在当前光标后插入</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><kbd>o</kbd></td>\r\n<td>在下方另起一行插入</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><kbd>O</kbd></td>\r\n<td>在上方另起一行插入</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><kbd>r</kbd></td>\r\n<td>替换当前字符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><kbd>R</kbd></td>\r\n<td>进入替换模式</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<!--\r\n|<kbd>s</kbd>|删除当前字符并插入|\r\n|<kbd>S</kbd>|删除当前行并插入|\r\n|<kbd>I</kbd>|在当前行的头部插入|\r\n|<kbd>A</kbd>|在当前行的尾部插入|\r\n|<kbd></kbd>||\r\n-->\r\n<p>进入插入模式后, 左下角会显示提示符 <code>--INSERT--</code> , 再按下按键就将在光标位置处插入对应文本.</p>\r\n<p>具体说一下 <code>r</code> <code>R</code> 两个键的作用:</p>\r\n<p>输入 <code>r</code> 后, 在右下角会显示一个提示符 <code>r</code>(在普通模式下输入的字符都会被记录在右下角, 试图解释为命令), 这时候输入任意一个字符, 就会将光标下的字符替换, 然后退出.</p>\r\n<p>而输入 <code>R</code> 则会进入替换模式, 在左下角有提示符 <code>--REPLACE--</code>, 此时输入的字符会将光标下的字符覆盖, 直到按下 <code>Ecs</code> 退出.</p>\r\n<p>简单来说, 就是 <code>r</code> 只替换一个字符, <code>R</code> 则进入替换模式.</p>\r\n<h1 id=\"选择模式\">选择模式</h1>\r\n<p>普通模式下输入 <kbd>v</kbd> 进入选择模式, 此种选择模式是 <code>流选择</code>, 效果就和在其他文本编辑器中按下 <kbd>Shift</kbd> 并移动光标一样.</p>\r\n<p>普通模式下输入 <kbd>V</kbd> 进入行选择模式, 会按行选择.</p>\r\n<p>对于两种选择方式, 有 <code>--VISUAL--</code> 和 <code>--VISUAL LINE--</code> 两种提示符.</p>\r\n<p>TODO: 怎么 <code>块选择</code>?</p>\r\n<h1 id=\"命令模式\">命令模式</h1>\r\n<p>在普通模式下输入冒号 <kbd>:</kbd> 进入冒号模式, 会在最下方显示一个输入框, 开头就是输入的冒号. 在冒号后面输入要运行的指令并回车, 就会执行.</p>\r\n<p>最常用的指令, 比如 <code>:w</code> <code>:wq</code> <code>:q!</code> 等等. 则会 <code>保存文件</code> , <code>保存文件并退出</code> , <code>退出, 不保存更改</code> .</p>\r\n<h1 id=\"打开-保存-另存为\">打开 保存 另存为</h1>\r\n<p>在终端中输入</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim filename</span><br></pre></td></tr></table></figure>\r\n<p>则会以文本模式打开一个文件. 而加上 <code>-b</code> 参数, 则会以二进制模式打开. 因为二进制没怎么用过, 暂且不表.</p>\r\n<p>编辑完文件后, 在 Vim 的普通模式下输入 <kbd>:</kbd> 进入命令模式.</p>\r\n<ul>\r\n<li><code>:wq</code>, 保存并退出.</li>\r\n<li><code>:q!</code>, 退出且不保存.</li>\r\n<li><code>:w</code>, 保存, 不退出</li>\r\n<li><code>:w new_file_path</code>, 将文件另存为到指定文件中. (可使用相对路径或绝对路径).</li>\r\n</ul>\r\n<h1 id=\"移动光标\">移动光标</h1>\r\n<p>在任何模式下, 都可以通过键盘方向键移动光标, 而在普通模式和选择模式下, 可以用<code>kjhl</code> 移动光标, 效果和方向键相同.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  上             k</span><br><span class=\"line\">左下右         h j l</span><br></pre></td></tr></table></figure>\r\n<p>还有另一些功能特殊的键:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">输入</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>w</code></td>\r\n<td>移动到下一个单词头部</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>e</code></td>\r\n<td>移动到下一个单词尾部</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>b</code></td>\r\n<td>移动到上一个单词头部</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>ge</code></td>\r\n<td>移动到上一个单词尾部</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>^</code></td>\r\n<td>移动到行首</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>$</code></td>\r\n<td>移动到行尾</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>gg</code></td>\r\n<td>移动到文件头部</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>G</code></td>\r\n<td>移动到文件尾部</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h1 id=\"输入文本\">输入文本</h1>\r\n<p>参阅 <a href=\"#输入模式\">插入与替换</a>.</p>\r\n<h1 id=\"删除文本\">删除文本</h1>\r\n<ul>\r\n<li>在普通模式下, 输入 <code>dd</code> 删除光标所在行.</li>\r\n<li>在选择模式下, 输入 <code>d</code> 删除选中部分.</li>\r\n</ul>\r\n<h1 id=\"选择文本\">选择文本</h1>\r\n<p>在 <a href=\"#选择模式\">选择模式</a> 下移动光标即可选择文本.</p>\r\n<h1 id=\"复制\">复制</h1>\r\n<ul>\r\n<li>在普通模式下, 输入 <code>yy</code> 复制光标所在行.</li>\r\n<li>在选择模式下, 输入 <code>y</code> 复制选中部分.</li>\r\n</ul>\r\n<h1 id=\"粘贴\">粘贴</h1>\r\n<p>普通模式下:</p>\r\n<ul>\r\n<li><code>p</code> (小写), 粘贴到下一行.</li>\r\n<li><code>P</code> (大写), 粘贴到上一行.</li>\r\n<li><code>gp</code> 粘贴到光标之后.</li>\r\n<li><code>gP</code> 粘贴到光标之前.</li>\r\n</ul>\r\n<h1 id=\"剪切\">剪切</h1>\r\n<p>用命令删除的文本会被保存到寄存器中, 如果再粘贴出来, 就是 &quot;剪切+粘贴&quot; 的效果.</p>\r\n<p>TODO:</p>\r\n<h1 id=\"搜索\">搜索</h1>\r\n<p>Vim 的搜索功能通过命令来实现.</p>\r\n<h1 id=\"替换\">替换</h1>\r\n<p>除了输入模式里介绍过的 <code>r</code> 与 <code>R</code> 之外, Vim 还可以用命令替换指定字符串.</p>\r\n<h1 id=\"撤销动作\">撤销动作</h1>\r\n<p>在普通模式下输入 <code>u</code> 撤销一次修改. 可以一直回退, 虽然修改记录的数量应该会有一个极限, 但大多数时候我都能回退到打开文件最开始时的状态.</p>"},{"title":"Windows安装Jupyter","date":"2018-08-23T08:12:38.114Z","_content":"\n<!--more-->\n\n# 安装 Anaconda\n\n不要从官方下载, 去清华大学镜像站, 否则你就会知道什么叫 \"毛细作用\"\n\n[清华大学镜像站](https://mirrors.tuna.tsinghua.edu.cn)\n\n在右侧导航栏有一个 获取下载链接, 在里面 \"获取安装镜像\"--> \"应用软件\" -->\"Conda\" 中下载对应版本.\n\n下载完成后使用 `.exe` 安装.\n\n# 配置软件源\n\n[清华大学官方帮助](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda)\n\n# 配置环境变量\n\n设 `$INSTALL` 为安装 `Anaconda` 的目录, 需要将以下三个路径添加到 `Path` 环境变量.\n\n```\n$INSTALL/\n$INSTALL/Scripts\n$INSTALL/Library/bin\n```\n\n# 配置 Jupyter Notebook\n\n首先创建一个目录 `~/.jupyter`, 随后使用 `jupyter notebook --generate-config` 生成默认配置文件.\n\n配置文件为 `~/.jupyter/jupyter_notebook_config.py`\n\n在默认配置文件中, 修改默认工作目录. 配置项处于第 214 行.\n\n随后需要生成一个密码用于登陆, 使用 `jupyter notebook password`\n\n随后会要求在终端输入密码. 输入密码并确认一次之后, 在配置文件目录中生成 `jupyter_notebook_config.json` 文件, 其中存储了密码的 `sha1` 散列值.\n\n使用 `jupyter notebook` 运行服务, 随后可在 `localhost:8888` 使用 `Jupyter NoteBook`. 进去之后会要求输入密码, 只需要输入设置的密码就好(别输散列值).\n\nEnjoy! 🙂\n\n# 修改 Jupyter Notebook 主题\n\n[Jupyter-Themes](https://github.com/dunovank/jupyter-themes)\n\n使用 `pip` 安装之后, 对于浏览器界面, 需要在命令行中执行命名更改主题, 所有代码参考 [这里](https://github.com/dunovank/jupyter-themes#command-line-usage).\n\n比如我使用了\n\n```\njt -t oceans16 -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T\n#设置 oceans16 主题, 设置 fira 字体, 设置代码字体大小 13px, 设置 Cell 宽度 90% 屏幕, 设置输出块字体大小 11px, 设置工具栏可见.\n```\n\n而对于作图(ploting) 的主题, 需要在 Notebook 代码中使用\n\n```py\nfrom jupyterthemes import jtplot\njtplot.style(<args>)\n```\n\nEnjoy!😄\n\n# 在远程服务器上部署 Jupyter NoteBook\n\n就像在本地上安装并运行 Jupyter NoteBook 一样.\n\n除此之外, 需要讲以下 Jupyter NoteBook 的用户和权限控制.","source":"_posts/Windows安装Jupyter.md","raw":"---\ntitle: Windows安装Jupyter\ntags:\n  - Python\n  - Anaconda\n  - Jupyter\ncategories:\n  - 日常\ndate:\n---\n\n<!--more-->\n\n# 安装 Anaconda\n\n不要从官方下载, 去清华大学镜像站, 否则你就会知道什么叫 \"毛细作用\"\n\n[清华大学镜像站](https://mirrors.tuna.tsinghua.edu.cn)\n\n在右侧导航栏有一个 获取下载链接, 在里面 \"获取安装镜像\"--> \"应用软件\" -->\"Conda\" 中下载对应版本.\n\n下载完成后使用 `.exe` 安装.\n\n# 配置软件源\n\n[清华大学官方帮助](https://mirrors.tuna.tsinghua.edu.cn/help/anaconda)\n\n# 配置环境变量\n\n设 `$INSTALL` 为安装 `Anaconda` 的目录, 需要将以下三个路径添加到 `Path` 环境变量.\n\n```\n$INSTALL/\n$INSTALL/Scripts\n$INSTALL/Library/bin\n```\n\n# 配置 Jupyter Notebook\n\n首先创建一个目录 `~/.jupyter`, 随后使用 `jupyter notebook --generate-config` 生成默认配置文件.\n\n配置文件为 `~/.jupyter/jupyter_notebook_config.py`\n\n在默认配置文件中, 修改默认工作目录. 配置项处于第 214 行.\n\n随后需要生成一个密码用于登陆, 使用 `jupyter notebook password`\n\n随后会要求在终端输入密码. 输入密码并确认一次之后, 在配置文件目录中生成 `jupyter_notebook_config.json` 文件, 其中存储了密码的 `sha1` 散列值.\n\n使用 `jupyter notebook` 运行服务, 随后可在 `localhost:8888` 使用 `Jupyter NoteBook`. 进去之后会要求输入密码, 只需要输入设置的密码就好(别输散列值).\n\nEnjoy! 🙂\n\n# 修改 Jupyter Notebook 主题\n\n[Jupyter-Themes](https://github.com/dunovank/jupyter-themes)\n\n使用 `pip` 安装之后, 对于浏览器界面, 需要在命令行中执行命名更改主题, 所有代码参考 [这里](https://github.com/dunovank/jupyter-themes#command-line-usage).\n\n比如我使用了\n\n```\njt -t oceans16 -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T\n#设置 oceans16 主题, 设置 fira 字体, 设置代码字体大小 13px, 设置 Cell 宽度 90% 屏幕, 设置输出块字体大小 11px, 设置工具栏可见.\n```\n\n而对于作图(ploting) 的主题, 需要在 Notebook 代码中使用\n\n```py\nfrom jupyterthemes import jtplot\njtplot.style(<args>)\n```\n\nEnjoy!😄\n\n# 在远程服务器上部署 Jupyter NoteBook\n\n就像在本地上安装并运行 Jupyter NoteBook 一样.\n\n除此之外, 需要讲以下 Jupyter NoteBook 的用户和权限控制.","slug":"Windows安装Jupyter","published":1,"updated":"2018-08-23T17:46:02.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw76001gw8lknq05im6a","content":"<a id=\"more\"></a>\r\n<h1 id=\"安装-anaconda\">安装 Anaconda</h1>\r\n<p>不要从官方下载, 去清华大学镜像站, 否则你就会知道什么叫 &quot;毛细作用&quot;</p>\r\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn\" target=\"_blank\" rel=\"noopener\">清华大学镜像站</a></p>\r\n<p>在右侧导航栏有一个 获取下载链接, 在里面 &quot;获取安装镜像&quot;--&gt; &quot;应用软件&quot; --&gt;&quot;Conda&quot; 中下载对应版本.</p>\r\n<p>下载完成后使用 <code>.exe</code> 安装.</p>\r\n<h1 id=\"配置软件源\">配置软件源</h1>\r\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda\" target=\"_blank\" rel=\"noopener\">清华大学官方帮助</a></p>\r\n<h1 id=\"配置环境变量\">配置环境变量</h1>\r\n<p>设 <code>$INSTALL</code> 为安装 <code>Anaconda</code> 的目录, 需要将以下三个路径添加到 <code>Path</code> 环境变量.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$INSTALL/</span><br><span class=\"line\">$INSTALL/Scripts</span><br><span class=\"line\">$INSTALL/Library/bin</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"配置-jupyter-notebook\">配置 Jupyter Notebook</h1>\r\n<p>首先创建一个目录 <code>~/.jupyter</code>, 随后使用 <code>jupyter notebook --generate-config</code> 生成默认配置文件.</p>\r\n<p>配置文件为 <code>~/.jupyter/jupyter_notebook_config.py</code></p>\r\n<p>在默认配置文件中, 修改默认工作目录. 配置项处于第 214 行.</p>\r\n<p>随后需要生成一个密码用于登陆, 使用 <code>jupyter notebook password</code></p>\r\n<p>随后会要求在终端输入密码. 输入密码并确认一次之后, 在配置文件目录中生成 <code>jupyter_notebook_config.json</code> 文件, 其中存储了密码的 <code>sha1</code> 散列值.</p>\r\n<p>使用 <code>jupyter notebook</code> 运行服务, 随后可在 <code>localhost:8888</code> 使用 <code>Jupyter NoteBook</code>. 进去之后会要求输入密码, 只需要输入设置的密码就好(别输散列值).</p>\r\n<p>Enjoy! 🙂</p>\r\n<h1 id=\"修改-jupyter-notebook-主题\">修改 Jupyter Notebook 主题</h1>\r\n<p><a href=\"https://github.com/dunovank/jupyter-themes\" target=\"_blank\" rel=\"noopener\">Jupyter-Themes</a></p>\r\n<p>使用 <code>pip</code> 安装之后, 对于浏览器界面, 需要在命令行中执行命名更改主题, 所有代码参考 <a href=\"https://github.com/dunovank/jupyter-themes#command-line-usage\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\r\n<p>比如我使用了</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jt -t oceans16 -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T</span><br><span class=\"line\">#设置 oceans16 主题, 设置 fira 字体, 设置代码字体大小 13px, 设置 Cell 宽度 90% 屏幕, 设置输出块字体大小 11px, 设置工具栏可见.</span><br></pre></td></tr></table></figure>\r\n<p>而对于作图(ploting) 的主题, 需要在 Notebook 代码中使用</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> jupyterthemes <span class=\"keyword\">import</span> jtplot</span><br><span class=\"line\">jtplot.style(&lt;args&gt;)</span><br></pre></td></tr></table></figure>\r\n<p>Enjoy!😄</p>\r\n<h1 id=\"在远程服务器上部署-jupyter-notebook\">在远程服务器上部署 Jupyter NoteBook</h1>\r\n<p>就像在本地上安装并运行 Jupyter NoteBook 一样.</p>\r\n<p>除此之外, 需要讲以下 Jupyter NoteBook 的用户和权限控制.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装-anaconda\">安装 Anaconda</h1>\r\n<p>不要从官方下载, 去清华大学镜像站, 否则你就会知道什么叫 &quot;毛细作用&quot;</p>\r\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn\" target=\"_blank\" rel=\"noopener\">清华大学镜像站</a></p>\r\n<p>在右侧导航栏有一个 获取下载链接, 在里面 &quot;获取安装镜像&quot;--&gt; &quot;应用软件&quot; --&gt;&quot;Conda&quot; 中下载对应版本.</p>\r\n<p>下载完成后使用 <code>.exe</code> 安装.</p>\r\n<h1 id=\"配置软件源\">配置软件源</h1>\r\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda\" target=\"_blank\" rel=\"noopener\">清华大学官方帮助</a></p>\r\n<h1 id=\"配置环境变量\">配置环境变量</h1>\r\n<p>设 <code>$INSTALL</code> 为安装 <code>Anaconda</code> 的目录, 需要将以下三个路径添加到 <code>Path</code> 环境变量.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$INSTALL/</span><br><span class=\"line\">$INSTALL/Scripts</span><br><span class=\"line\">$INSTALL/Library/bin</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"配置-jupyter-notebook\">配置 Jupyter Notebook</h1>\r\n<p>首先创建一个目录 <code>~/.jupyter</code>, 随后使用 <code>jupyter notebook --generate-config</code> 生成默认配置文件.</p>\r\n<p>配置文件为 <code>~/.jupyter/jupyter_notebook_config.py</code></p>\r\n<p>在默认配置文件中, 修改默认工作目录. 配置项处于第 214 行.</p>\r\n<p>随后需要生成一个密码用于登陆, 使用 <code>jupyter notebook password</code></p>\r\n<p>随后会要求在终端输入密码. 输入密码并确认一次之后, 在配置文件目录中生成 <code>jupyter_notebook_config.json</code> 文件, 其中存储了密码的 <code>sha1</code> 散列值.</p>\r\n<p>使用 <code>jupyter notebook</code> 运行服务, 随后可在 <code>localhost:8888</code> 使用 <code>Jupyter NoteBook</code>. 进去之后会要求输入密码, 只需要输入设置的密码就好(别输散列值).</p>\r\n<p>Enjoy! 🙂</p>\r\n<h1 id=\"修改-jupyter-notebook-主题\">修改 Jupyter Notebook 主题</h1>\r\n<p><a href=\"https://github.com/dunovank/jupyter-themes\" target=\"_blank\" rel=\"noopener\">Jupyter-Themes</a></p>\r\n<p>使用 <code>pip</code> 安装之后, 对于浏览器界面, 需要在命令行中执行命名更改主题, 所有代码参考 <a href=\"https://github.com/dunovank/jupyter-themes#command-line-usage\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\r\n<p>比如我使用了</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jt -t oceans16 -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T</span><br><span class=\"line\">#设置 oceans16 主题, 设置 fira 字体, 设置代码字体大小 13px, 设置 Cell 宽度 90% 屏幕, 设置输出块字体大小 11px, 设置工具栏可见.</span><br></pre></td></tr></table></figure>\r\n<p>而对于作图(ploting) 的主题, 需要在 Notebook 代码中使用</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> jupyterthemes <span class=\"keyword\">import</span> jtplot</span><br><span class=\"line\">jtplot.style(&lt;args&gt;)</span><br></pre></td></tr></table></figure>\r\n<p>Enjoy!😄</p>\r\n<h1 id=\"在远程服务器上部署-jupyter-notebook\">在远程服务器上部署 Jupyter NoteBook</h1>\r\n<p>就像在本地上安装并运行 Jupyter NoteBook 一样.</p>\r\n<p>除此之外, 需要讲以下 Jupyter NoteBook 的用户和权限控制.</p>"},{"title":"Hello World","date":"2018-07-23T14:12:38.000Z","mathjax":true,"_content":"\n# Hello World!\n\n今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.\n\n我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想. \n\n首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.\n\n另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.\n\n最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄\n\n## 感谢指导我搭建博客的几篇博文\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 `npm install hexo` 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径... 所以在安装的时候, 请注意切换到一个合适的路径吧.\n\n顺便在这里记录一下 Hexo 的常用操作\n\n|简写指令|完整指令|作用|\n|-|-|-|\n|`hexo n \"标题\"`|`hexo new`|创建一个 标题.md 文档在 /source/_posts 目录下|\n|`hexo clean`||清楚缓存|\n|`hexo g`|`hexo generate`|生成 public 下的文件|\n|`hexo s`|`hexo server`|启动 hexo 服务器, 默认在 localhost 下的 :4000 端口|\n|`hexo d`|`hexo deploy`|部署到远程服务器, 依据 _config.yml 的设置|\n\n## 接下来打算干的事\n\n准备在该博客上发布一些好玩的东西和学习笔记.\n\n0. [x] 更换主题, 感觉 [Next主题](https://github.com/iissnan/hexo-theme-next) 比较好看.\n    - 更换主题, 将下载的主题包解压到 `/theme/` 目录下, 然后在 `/_config.yml` 中配置 `theme: landscape` 项(默认主题是 landscape) 为 `theme: 主题文件夹名` 即可.\n0. [ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\n    - 选择了 [Gitalk](https://github.com/gitalk/gitalk)\n    - [Gitalk 配置过程]()\n0. [x] {2018.7.24更新}GitHub Page 只能显示一页?\n    - 哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\n        - 问题解决了.","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-07-23 22:12:38\nmathjax: true\ntags:\n  - Hexo\n---\n\n# Hello World!\n\n今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.\n\n我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想. \n\n首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.\n\n另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.\n\n最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄\n\n## 感谢指导我搭建博客的几篇博文\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 `npm install hexo` 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径... 所以在安装的时候, 请注意切换到一个合适的路径吧.\n\n顺便在这里记录一下 Hexo 的常用操作\n\n|简写指令|完整指令|作用|\n|-|-|-|\n|`hexo n \"标题\"`|`hexo new`|创建一个 标题.md 文档在 /source/_posts 目录下|\n|`hexo clean`||清楚缓存|\n|`hexo g`|`hexo generate`|生成 public 下的文件|\n|`hexo s`|`hexo server`|启动 hexo 服务器, 默认在 localhost 下的 :4000 端口|\n|`hexo d`|`hexo deploy`|部署到远程服务器, 依据 _config.yml 的设置|\n\n## 接下来打算干的事\n\n准备在该博客上发布一些好玩的东西和学习笔记.\n\n0. [x] 更换主题, 感觉 [Next主题](https://github.com/iissnan/hexo-theme-next) 比较好看.\n    - 更换主题, 将下载的主题包解压到 `/theme/` 目录下, 然后在 `/_config.yml` 中配置 `theme: landscape` 项(默认主题是 landscape) 为 `theme: 主题文件夹名` 即可.\n0. [ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\n    - 选择了 [Gitalk](https://github.com/gitalk/gitalk)\n    - [Gitalk 配置过程]()\n0. [x] {2018.7.24更新}GitHub Page 只能显示一页?\n    - 哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\n        - 问题解决了.","slug":"hello-world","published":1,"updated":"2018-08-02T09:21:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw76001jw8lk57eikqmb","content":"<h1 id=\"hello-world\">Hello World!</h1>\r\n<p>今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.</p>\r\n<p>我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想.</p>\r\n<p>首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.</p>\r\n<p>另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.</p>\r\n<p>最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄</p>\r\n<h2 id=\"感谢指导我搭建博客的几篇博文\">感谢指导我搭建博客的几篇博文</h2>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 <code>npm install hexo</code> 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径... 所以在安装的时候, 请注意切换到一个合适的路径吧.</p>\r\n<p>顺便在这里记录一下 Hexo 的常用操作</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>简写指令</th>\r\n<th>完整指令</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>hexo n &quot;标题&quot;</code></td>\r\n<td><code>hexo new</code></td>\r\n<td>创建一个 标题.md 文档在 /source/_posts 目录下</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo clean</code></td>\r\n<td></td>\r\n<td>清楚缓存</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo g</code></td>\r\n<td><code>hexo generate</code></td>\r\n<td>生成 public 下的文件</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo s</code></td>\r\n<td><code>hexo server</code></td>\r\n<td>启动 hexo 服务器, 默认在 localhost 下的 :4000 端口</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo d</code></td>\r\n<td><code>hexo deploy</code></td>\r\n<td>部署到远程服务器, 依据 _config.yml 的设置</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"接下来打算干的事\">接下来打算干的事</h2>\r\n<p>准备在该博客上发布一些好玩的东西和学习笔记.</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>[x] 更换主题, 感觉 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next主题</a> 比较好看.\r\n<ul>\r\n<li>更换主题, 将下载的主题包解压到 <code>/theme/</code> 目录下, 然后在 <code>/_config.yml</code> 中配置 <code>theme: landscape</code> 项(默认主题是 landscape) 为 <code>theme: 主题文件夹名</code> 即可.</li>\r\n</ul></li>\r\n<li>[ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\r\n<ul>\r\n<li>选择了 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">Gitalk</a></li>\r\n<li><a href=\"\">Gitalk 配置过程</a></li>\r\n</ul></li>\r\n<li>[x] {2018.7.24更新}GitHub Page 只能显示一页?\r\n<ul>\r\n<li>哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\r\n<ul>\r\n<li>问题解决了.</li>\r\n</ul></li>\r\n</ul></li>\r\n</ol>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hello-world\">Hello World!</h1>\r\n<p>今天鼓起勇气创建了一个博客. 因为自己在计算机方面只能算个业余爱好者, 所以也就只能按照网上的教程一样地利用 GitHub 的公共仓库来承载这个博客.</p>\r\n<p>我创建这个博客的用意何在呢? 我自己都得提醒自己多想一想.</p>\r\n<p>首先, 我在计算机技术方面也有点兴趣, 很想亲身实践一下创建一个网站的过程. 而创建一个博客相对来说比较简单, 所以将其作为我实践的第一步.</p>\r\n<p>另一方面呢, 也想要尝试一下将自己收集整理的资料和自己的想法放到互联网上给众人观摩. 尝试这么一种以前从来没试过的笔记方式.</p>\r\n<p>最后, 也许是最重要的一个因素: 有个自己的博客是多酷的一件事啊. 2333😄</p>\r\n<h2 id=\"感谢指导我搭建博客的几篇博文\">感谢指导我搭建博客的几篇博文</h2>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>我搭建博客的步骤和这几篇教程基本一致, 没有什么区别. 只是在安装 Hexo 的时候犯了一个傻, 就是执行 <code>npm install hexo</code> 的时候, 会把 Hexo 安装到当前路径下, 而非另一个默认路径... 所以在安装的时候, 请注意切换到一个合适的路径吧.</p>\r\n<p>顺便在这里记录一下 Hexo 的常用操作</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>简写指令</th>\r\n<th>完整指令</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>hexo n &quot;标题&quot;</code></td>\r\n<td><code>hexo new</code></td>\r\n<td>创建一个 标题.md 文档在 /source/_posts 目录下</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo clean</code></td>\r\n<td></td>\r\n<td>清楚缓存</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo g</code></td>\r\n<td><code>hexo generate</code></td>\r\n<td>生成 public 下的文件</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>hexo s</code></td>\r\n<td><code>hexo server</code></td>\r\n<td>启动 hexo 服务器, 默认在 localhost 下的 :4000 端口</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>hexo d</code></td>\r\n<td><code>hexo deploy</code></td>\r\n<td>部署到远程服务器, 依据 _config.yml 的设置</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"接下来打算干的事\">接下来打算干的事</h2>\r\n<p>准备在该博客上发布一些好玩的东西和学习笔记.</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>[x] 更换主题, 感觉 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next主题</a> 比较好看.\r\n<ul>\r\n<li>更换主题, 将下载的主题包解压到 <code>/theme/</code> 目录下, 然后在 <code>/_config.yml</code> 中配置 <code>theme: landscape</code> 项(默认主题是 landscape) 为 <code>theme: 主题文件夹名</code> 即可.</li>\r\n</ul></li>\r\n<li>[ ] TODO:添加支持 Markdown 甚至是渲染数学公式的评论框.\r\n<ul>\r\n<li>选择了 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">Gitalk</a></li>\r\n<li><a href=\"\">Gitalk 配置过程</a></li>\r\n</ul></li>\r\n<li>[x] {2018.7.24更新}GitHub Page 只能显示一页?\r\n<ul>\r\n<li>哇, 贼坑. 上传到 GitHub 之后, 文件名的大写字母全部变成小写了, 偏偏在 Archive 页面跳转的 url 又区分了大小写, 导致页面 404. 现尝试将文件名改成全小写, 再次尝试.(但是为什么混用中英文时就不会出现区分大小写导致的错误呢?)\r\n<ul>\r\n<li>问题解决了.</li>\r\n</ul></li>\r\n</ul></li>\r\n</ol>\r\n"},{"title":"Hexo配置过程","date":"2018-07-25T13:30:45.000Z","mathjax":true,"_content":"# Hexo 配置过程\n\n## 配置目标\n\n**一期目标**\n\n- [x] 启用 `tag`, `category` 等页面.\n- [x] 使用 `MathJax` 渲染 LaTeX 公式.\n- [ ] 使用 `Gitalk` 作为评论系统.\n  - [ ] 使用 [MD5](https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1) 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.\n\n**二期目标**\n\n- [x] 在网站内保存图片等文件, 而非使用第三方图床.\n\n闹了半天, 原来直接把图片存在 `/source` 目录的随意子目录下, 然后引用相对链接即可...\n\n## 步骤\n\n<!--more-->\n\n### 开始使用 Hexo\n\n这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.\n\n补充说一点, 我使用的是 [NexT 主题](https://hexo.io/zh-cn/) . 在配置网站语言为简体中文的时候, 应在 Hexo 的 `_config.yml` 里配置 `language:` 为 `language: zh-CN`. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件...\n\n## 启用 \"tags\" 页面\n\n要使用 tags 页面, 先得确保 **主题** 的 _config.yml 文件里 `menu:` 项中 `tags` 选项被启用. 例如\n\n```yml\nmenu:\n  home: / || home\n  #about: /about/ || user\n  tags: /tags/ || tags\n  #categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n\n`||` 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.\n\n然后, 需要创建一个 \"Page\" 类型的页面.\n\n```sh\nhexo new page \"tags\"\n```\n\n之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:\n\n```markdown\n---\ntitle: tags\ndate: 2018-07-25 21:21:00\n---\n```\n\n需要稍微修改一下, \n\n```markdown\n---\ntitle: 标签\ndate: 2018-07-25 21:21:00\ntype: \"tags\"\ncomments: false\n---\n```\n\n`conmments: false` 表示在此页面禁用评论功能.\n\n在发布的博文的 front-matter 中使用\n\n```yml\n---\ntags:\n  - tagname1\n  - tagname2\n  ...\n---\n```\n\n来给文章添加标签.\n\n其他同理.\n\n### 启用 MathJax \n\n根据 NexT 提供的 [文档](https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md)\n\n$$ Hello \\; MathJax $$\n\n### 启用 Gitalk\n\nTODO:\n\n## 参考资料\n\n[NexT 已适配MathJax](https://theme-next.iissnan.com/third-party-services.html#mathjax)\n\n[NexT 添加Gitalk](https://github.com/gitalk/gitalk/blob/master/readme-cn.md)\n\n[NexT 官网](https://hexo.io/zh-cn/)\n\n[NexT 使用文档](https://theme-next.iissnan.com/)\n\n[Gitalk 官网](https://gitalk.github.io/)\n","source":"_posts/hexo配置过程.md","raw":"---\ntitle: Hexo配置过程\ndate: 2018-07-25 21:30:45\nmathjax: true\ntags:\n  - Hexo\ncategories:\n  - 网站\n---\n# Hexo 配置过程\n\n## 配置目标\n\n**一期目标**\n\n- [x] 启用 `tag`, `category` 等页面.\n- [x] 使用 `MathJax` 渲染 LaTeX 公式.\n- [ ] 使用 `Gitalk` 作为评论系统.\n  - [ ] 使用 [MD5](https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1) 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.\n\n**二期目标**\n\n- [x] 在网站内保存图片等文件, 而非使用第三方图床.\n\n闹了半天, 原来直接把图片存在 `/source` 目录的随意子目录下, 然后引用相对链接即可...\n\n## 步骤\n\n<!--more-->\n\n### 开始使用 Hexo\n\n这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:\n\n[HEXO博客搭建日记 - 青鸟晴空 - 博客园](http://www.cnblogs.com/airbird/p/6160209.html)\n\n[教你免费搭建个人博客，Hexo&Github](https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/)\n\n这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.\n\n补充说一点, 我使用的是 [NexT 主题](https://hexo.io/zh-cn/) . 在配置网站语言为简体中文的时候, 应在 Hexo 的 `_config.yml` 里配置 `language:` 为 `language: zh-CN`. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件...\n\n## 启用 \"tags\" 页面\n\n要使用 tags 页面, 先得确保 **主题** 的 _config.yml 文件里 `menu:` 项中 `tags` 选项被启用. 例如\n\n```yml\nmenu:\n  home: / || home\n  #about: /about/ || user\n  tags: /tags/ || tags\n  #categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n\n`||` 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.\n\n然后, 需要创建一个 \"Page\" 类型的页面.\n\n```sh\nhexo new page \"tags\"\n```\n\n之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:\n\n```markdown\n---\ntitle: tags\ndate: 2018-07-25 21:21:00\n---\n```\n\n需要稍微修改一下, \n\n```markdown\n---\ntitle: 标签\ndate: 2018-07-25 21:21:00\ntype: \"tags\"\ncomments: false\n---\n```\n\n`conmments: false` 表示在此页面禁用评论功能.\n\n在发布的博文的 front-matter 中使用\n\n```yml\n---\ntags:\n  - tagname1\n  - tagname2\n  ...\n---\n```\n\n来给文章添加标签.\n\n其他同理.\n\n### 启用 MathJax \n\n根据 NexT 提供的 [文档](https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md)\n\n$$ Hello \\; MathJax $$\n\n### 启用 Gitalk\n\nTODO:\n\n## 参考资料\n\n[NexT 已适配MathJax](https://theme-next.iissnan.com/third-party-services.html#mathjax)\n\n[NexT 添加Gitalk](https://github.com/gitalk/gitalk/blob/master/readme-cn.md)\n\n[NexT 官网](https://hexo.io/zh-cn/)\n\n[NexT 使用文档](https://theme-next.iissnan.com/)\n\n[Gitalk 官网](https://gitalk.github.io/)\n","slug":"hexo配置过程","published":1,"updated":"2018-08-23T17:42:56.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw76001ow8lk3diare44","content":"<h1 id=\"hexo-配置过程\">Hexo 配置过程</h1>\r\n<h2 id=\"配置目标\">配置目标</h2>\r\n<p><strong>一期目标</strong></p>\r\n<ul>\r\n<li>[x] 启用 <code>tag</code>, <code>category</code> 等页面.</li>\r\n<li>[x] 使用 <code>MathJax</code> 渲染 LaTeX 公式.</li>\r\n<li>[ ] 使用 <code>Gitalk</code> 作为评论系统.</li>\r\n<li>[ ] 使用 <a href=\"https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1\" target=\"_blank\" rel=\"noopener\">MD5</a> 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.</li>\r\n</ul>\r\n<p><strong>二期目标</strong></p>\r\n<ul>\r\n<li>[x] 在网站内保存图片等文件, 而非使用第三方图床.</li>\r\n</ul>\r\n<p>闹了半天, 原来直接把图片存在 <code>/source</code> 目录的随意子目录下, 然后引用相对链接即可...</p>\r\n<h2 id=\"步骤\">步骤</h2>\r\n<a id=\"more\"></a>\r\n<h3 id=\"开始使用-hexo\">开始使用 Hexo</h3>\r\n<p>这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:</p>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.</p>\r\n<p>补充说一点, 我使用的是 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 主题</a> . 在配置网站语言为简体中文的时候, 应在 Hexo 的 <code>_config.yml</code> 里配置 <code>language:</code> 为 <code>language: zh-CN</code>. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件...</p>\r\n<h2 id=\"启用-tags-页面\">启用 &quot;tags&quot; 页面</h2>\r\n<p>要使用 tags 页面, 先得确保 <strong>主题</strong> 的 _config.yml 文件里 <code>menu:</code> 项中 <code>tags</code> 选项被启用. 例如</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\r\n<p><code>||</code> 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.</p>\r\n<p>然后, 需要创建一个 &quot;Page&quot; 类型的页面.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure>\r\n<p>之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p>需要稍微修改一下,</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p><code>conmments: false</code> 表示在此页面禁用评论功能.</p>\r\n<p>在发布的博文的 front-matter 中使用</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname1</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname2</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\r\n<p>来给文章添加标签.</p>\r\n<p>其他同理.</p>\r\n<h3 id=\"启用-mathjax\">启用 MathJax</h3>\r\n<p>根据 NexT 提供的 <a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md\" target=\"_blank\" rel=\"noopener\">文档</a></p>\r\n<p><span class=\"math display\">\\[ Hello \\; MathJax \\]</span></p>\r\n<h3 id=\"启用-gitalk\">启用 Gitalk</h3>\r\n<p>TODO:</p>\r\n<h2 id=\"参考资料\">参考资料</h2>\r\n<p><a href=\"https://theme-next.iissnan.com/third-party-services.html#mathjax\" target=\"_blank\" rel=\"noopener\">NexT 已适配MathJax</a></p>\r\n<p><a href=\"https://github.com/gitalk/gitalk/blob/master/readme-cn.md\" target=\"_blank\" rel=\"noopener\">NexT 添加Gitalk</a></p>\r\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 官网</a></p>\r\n<p><a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a></p>\r\n<p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk 官网</a></p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"hexo-配置过程\">Hexo 配置过程</h1>\r\n<h2 id=\"配置目标\">配置目标</h2>\r\n<p><strong>一期目标</strong></p>\r\n<ul>\r\n<li>[x] 启用 <code>tag</code>, <code>category</code> 等页面.</li>\r\n<li>[x] 使用 <code>MathJax</code> 渲染 LaTeX 公式.</li>\r\n<li>[ ] 使用 <code>Gitalk</code> 作为评论系统.</li>\r\n<li>[ ] 使用 <a href=\"https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js#L1\" target=\"_blank\" rel=\"noopener\">MD5</a> 的标签, 以规避由于文章标题过长而无法正常创建 GitHub issue 的问题.</li>\r\n</ul>\r\n<p><strong>二期目标</strong></p>\r\n<ul>\r\n<li>[x] 在网站内保存图片等文件, 而非使用第三方图床.</li>\r\n</ul>\r\n<p>闹了半天, 原来直接把图片存在 <code>/source</code> 目录的随意子目录下, 然后引用相对链接即可...</p>\r\n<h2 id=\"步骤\">步骤</h2>","more":"<h3 id=\"开始使用-hexo\">开始使用 Hexo</h3>\r\n<p>这部分内容有很多其他的博主都介绍过了, 我参考了这几篇文章:</p>\r\n<p><a href=\"http://www.cnblogs.com/airbird/p/6160209.html\" target=\"_blank\" rel=\"noopener\">HEXO博客搭建日记 - 青鸟晴空 - 博客园</a></p>\r\n<p><a href=\"https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/\" target=\"_blank\" rel=\"noopener\">教你免费搭建个人博客，Hexo&amp;Github</a></p>\r\n<p>这些文章介绍了下载安装 Node.js 到生成 Hexo 静态博客, 并部署到 GitPage 的步骤.</p>\r\n<p>补充说一点, 我使用的是 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 主题</a> . 在配置网站语言为简体中文的时候, 应在 Hexo 的 <code>_config.yml</code> 里配置 <code>language:</code> 为 <code>language: zh-CN</code>. 尽管依据国际标准应为 zh-Hans , 但是在 /theme/next/languages/ 目录下只有 zh-CN.yml 文件...</p>\r\n<h2 id=\"启用-tags-页面\">启用 &quot;tags&quot; 页面</h2>\r\n<p>要使用 tags 页面, 先得确保 <strong>主题</strong> 的 _config.yml 文件里 <code>menu:</code> 项中 <code>tags</code> 选项被启用. 例如</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || th</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\r\n<p><code>||</code> 前的部分表示路径, 后面表示在页面上的显示内容, 最好不要改动.</p>\r\n<p>然后, 需要创建一个 &quot;Page&quot; 类型的页面.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure>\r\n<p>之后会在 /source/ 目录下出现一个 tags/ 目录, 里面有一个 index.md 文件. 其内容为:</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p>需要稍微修改一下,</p>\r\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-07-25 21:21:00</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\r\n<p><code>conmments: false</code> 表示在此页面禁用评论功能.</p>\r\n<p>在发布的博文的 front-matter 中使用</p>\r\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname1</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">tagname2</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\r\n<p>来给文章添加标签.</p>\r\n<p>其他同理.</p>\r\n<h3 id=\"启用-mathjax\">启用 MathJax</h3>\r\n<p>根据 NexT 提供的 <a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md\" target=\"_blank\" rel=\"noopener\">文档</a></p>\r\n<p><span class=\"math display\">\\[ Hello \\; MathJax \\]</span></p>\r\n<h3 id=\"启用-gitalk\">启用 Gitalk</h3>\r\n<p>TODO:</p>\r\n<h2 id=\"参考资料\">参考资料</h2>\r\n<p><a href=\"https://theme-next.iissnan.com/third-party-services.html#mathjax\" target=\"_blank\" rel=\"noopener\">NexT 已适配MathJax</a></p>\r\n<p><a href=\"https://github.com/gitalk/gitalk/blob/master/readme-cn.md\" target=\"_blank\" rel=\"noopener\">NexT 添加Gitalk</a></p>\r\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">NexT 官网</a></p>\r\n<p><a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a></p>\r\n<p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk 官网</a></p>"},{"title":"PowerShell创建链接文件","date":"2018-07-24T13:01:59.000Z","_content":"# PowerShell 创建链接文件\n\nLinux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 \"快捷方式\" 了?\n\n事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.\n\nWindows 下链接文件的格式可以有:\n\n- 软连接 SymbolicLink\n- 硬链接 HardLink\n- \"Junction\"\n\n## 创建链接文件的 PowerShell 命令\n\n**创建链接文件需要管理员权限** .\n\n创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target #创建符号链接 D:\\Link -> D:\\Target\nNew-Item -ItemType HardLink -Path D:\\Link -Value D:\\Target #创建硬链接 D:\\Link -> D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录\nNew-Item -ItemType Junction -Path D:\\Link -Value D:\\Target #创建 Junction D:\\Link -> D:\\Target\n```\n\n<!--more-->\n\n在创建链接时, 可以使用 `-Force` 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 \"NewItemError, resource exists\", 并不会创建该链接. 那么, 就得使用 `-Force` 参数强行创建, 覆盖已经存在的文件或子目录.\n\n## 移除/修改链接文件\n\n我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我\"将删除其下所有子项, 是否继续?\". 吓得我赶紧按下 N + 回车, 逃之夭夭.\n\n我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡\n\n幸好经 [StackOverflow 上的这个回答](https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows) 提示, 我想到了一个变通方案.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value 'D:\\$Recycle.Bin' -Force\n```\n\n我将该链接重新指向了一个空目录, 然后把它 `Remove-Item` 掉了, 之后重新创建了一个新的链接.\n\n刚才在知乎提了一个问, [轮子哥回答](https://www.zhihu.com/question/286730188/answer/451072733) 说可以用 cmd 的 `rmdir` 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.\n\nPowerShell 到底有没有此功能? 在 [PowerShell在GitHub上的一个issue](https://github.com/powershell/powershell/issues/621) 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务...\n\n```powershell\nPS D:\\> Remove-Item .\\LinkTest\\\n\n确认\nD:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。\n所在位置 行:1 字符: 1\n+ Remove-Item .\\LinkTest\\\n+ ~~~~~~~~~~~~~~\n    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove\n   -Item], IOException\n    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.\n   RemoveItemCommand\n\nPS D:\\> Remove-Item .\\LinkTest -Force\n\n确认\nD:\\LinkTest 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : 请求中指定的标记与重分析点中存在的标记不匹配。\n所在位置 行:1 字符: 1\n+ rm .\\LinkTest -Force\n+ ~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception\n    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P\n   owerShell.Commands.RemoveItemCommand\n```\n\n出现了 \"请求中指定的标记与重分析点中存在的标记不匹配\" 的问题... 等我搞明白这句话用英语怎么说就去 [GitHub](https://github.com/powershell/powershell/issues) 提 issue 去...\n\n知乎上 [Gee Law的回答](https://www.zhihu.com/question/286730188/answer/451095023) 提出的方法:\n\n```powershell\n(Get-Item D:\\LinkDir).Delete($false) # 无参数也行\n```\n\n调用 `DirectotyInfo.Delete()` 方法进行删除. 实测有效.\n\n## 创建链接的用处\n\n0. 区分对待同一根目录下的不同子目录使用 OneDrive 的策略.\n    OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.\n\n## 小结\n\n0. 使用 `New-Item -ItemType xxx -Path Link -Value Target` 创建链接.\n0. 使用 `-Force` 参数使创建的链接覆盖同名文件/目录.\n0. 使用 `(Get-Item .\\Link).Delete()` 方法删除链接, 而不影响被链接的文件.","source":"_posts/powershell创建链接文件.md","raw":"---\ntitle: PowerShell创建链接文件\ndate: 2018-07-24 21:01:59\ntags:\n  - PowerShell\ncategories:\n  - 日常\n---\n# PowerShell 创建链接文件\n\nLinux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 \"快捷方式\" 了?\n\n事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.\n\nWindows 下链接文件的格式可以有:\n\n- 软连接 SymbolicLink\n- 硬链接 HardLink\n- \"Junction\"\n\n## 创建链接文件的 PowerShell 命令\n\n**创建链接文件需要管理员权限** .\n\n创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target #创建符号链接 D:\\Link -> D:\\Target\nNew-Item -ItemType HardLink -Path D:\\Link -Value D:\\Target #创建硬链接 D:\\Link -> D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录\nNew-Item -ItemType Junction -Path D:\\Link -Value D:\\Target #创建 Junction D:\\Link -> D:\\Target\n```\n\n<!--more-->\n\n在创建链接时, 可以使用 `-Force` 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 \"NewItemError, resource exists\", 并不会创建该链接. 那么, 就得使用 `-Force` 参数强行创建, 覆盖已经存在的文件或子目录.\n\n## 移除/修改链接文件\n\n我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我\"将删除其下所有子项, 是否继续?\". 吓得我赶紧按下 N + 回车, 逃之夭夭.\n\n我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡\n\n幸好经 [StackOverflow 上的这个回答](https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows) 提示, 我想到了一个变通方案.\n\n```powershell\nNew-Item -ItemType SymbolicLink -Path D:\\Link -Value 'D:\\$Recycle.Bin' -Force\n```\n\n我将该链接重新指向了一个空目录, 然后把它 `Remove-Item` 掉了, 之后重新创建了一个新的链接.\n\n刚才在知乎提了一个问, [轮子哥回答](https://www.zhihu.com/question/286730188/answer/451072733) 说可以用 cmd 的 `rmdir` 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.\n\nPowerShell 到底有没有此功能? 在 [PowerShell在GitHub上的一个issue](https://github.com/powershell/powershell/issues/621) 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务...\n\n```powershell\nPS D:\\> Remove-Item .\\LinkTest\\\n\n确认\nD:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。\n所在位置 行:1 字符: 1\n+ Remove-Item .\\LinkTest\\\n+ ~~~~~~~~~~~~~~\n    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove\n   -Item], IOException\n    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.\n   RemoveItemCommand\n\nPS D:\\> Remove-Item .\\LinkTest -Force\n\n确认\nD:\\LinkTest 处的项具有子项，并且未指定 Recurse\n参数。如果继续，所有子项均将随该项删除。是否确实要继续?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助\n(默认值为“Y”):Y\nrm : 请求中指定的标记与重分析点中存在的标记不匹配。\n所在位置 行:1 字符: 1\n+ rm .\\LinkTest -Force\n+ ~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception\n    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P\n   owerShell.Commands.RemoveItemCommand\n```\n\n出现了 \"请求中指定的标记与重分析点中存在的标记不匹配\" 的问题... 等我搞明白这句话用英语怎么说就去 [GitHub](https://github.com/powershell/powershell/issues) 提 issue 去...\n\n知乎上 [Gee Law的回答](https://www.zhihu.com/question/286730188/answer/451095023) 提出的方法:\n\n```powershell\n(Get-Item D:\\LinkDir).Delete($false) # 无参数也行\n```\n\n调用 `DirectotyInfo.Delete()` 方法进行删除. 实测有效.\n\n## 创建链接的用处\n\n0. 区分对待同一根目录下的不同子目录使用 OneDrive 的策略.\n    OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.\n\n## 小结\n\n0. 使用 `New-Item -ItemType xxx -Path Link -Value Target` 创建链接.\n0. 使用 `-Force` 参数使创建的链接覆盖同名文件/目录.\n0. 使用 `(Get-Item .\\Link).Delete()` 方法删除链接, 而不影响被链接的文件.","slug":"powershell创建链接文件","published":1,"updated":"2018-08-23T17:43:53.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m001rw8lkj27r7c86","content":"<h1 id=\"powershell-创建链接文件\">PowerShell 创建链接文件</h1>\r\n<p>Linux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 &quot;快捷方式&quot; 了?</p>\r\n<p>事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.</p>\r\n<p>Windows 下链接文件的格式可以有:</p>\r\n<ul>\r\n<li>软连接 SymbolicLink</li>\r\n<li>硬链接 HardLink</li>\r\n<li>&quot;Junction&quot;</li>\r\n</ul>\r\n<h2 id=\"创建链接文件的-powershell-命令\">创建链接文件的 PowerShell 命令</h2>\r\n<p><strong>创建链接文件需要管理员权限</strong> .</p>\r\n<p>创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建符号链接 D:\\Link -&gt; D:\\Target</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType HardLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建硬链接 D:\\Link -&gt; D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType Junction -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建 Junction D:\\Link -&gt; D:\\Target</span></span><br></pre></td></tr></table></figure>\r\n<a id=\"more\"></a>\r\n<p>在创建链接时, 可以使用 <code>-Force</code> 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 &quot;NewItemError, resource exists&quot;, 并不会创建该链接. 那么, 就得使用 <code>-Force</code> 参数强行创建, 覆盖已经存在的文件或子目录.</p>\r\n<h2 id=\"移除修改链接文件\">移除/修改链接文件</h2>\r\n<p>我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我&quot;将删除其下所有子项, 是否继续?&quot;. 吓得我赶紧按下 N + 回车, 逃之夭夭.</p>\r\n<p>我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡</p>\r\n<p>幸好经 <a href=\"https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows\" target=\"_blank\" rel=\"noopener\">StackOverflow 上的这个回答</a> 提示, 我想到了一个变通方案.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value <span class=\"string\">'D:\\$Recycle.Bin'</span> -Force</span><br></pre></td></tr></table></figure>\r\n<p>我将该链接重新指向了一个空目录, 然后把它 <code>Remove-Item</code> 掉了, 之后重新创建了一个新的链接.</p>\r\n<p>刚才在知乎提了一个问, <a href=\"https://www.zhihu.com/question/286730188/answer/451072733\" target=\"_blank\" rel=\"noopener\">轮子哥回答</a> 说可以用 cmd 的 <code>rmdir</code> 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.</p>\r\n<p>PowerShell 到底有没有此功能? 在 <a href=\"https://github.com/powershell/powershell/issues/621\" target=\"_blank\" rel=\"noopener\">PowerShell在GitHub上的一个issue</a> 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务...</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove</span><br><span class=\"line\">   -Item], IOException</span><br><span class=\"line\">    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.</span><br><span class=\"line\">   RemoveItemCommand</span><br><span class=\"line\"></span><br><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest -Force</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : 请求中指定的标记与重分析点中存在的标记不匹配。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ rm .\\LinkTest -Force</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception</span><br><span class=\"line\">    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P</span><br><span class=\"line\">   owerShell.Commands.RemoveItemCommand</span><br></pre></td></tr></table></figure>\r\n<p>出现了 &quot;请求中指定的标记与重分析点中存在的标记不匹配&quot; 的问题... 等我搞明白这句话用英语怎么说就去 <a href=\"https://github.com/powershell/powershell/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a> 提 issue 去...</p>\r\n<p>知乎上 <a href=\"https://www.zhihu.com/question/286730188/answer/451095023\" target=\"_blank\" rel=\"noopener\">Gee Law的回答</a> 提出的方法:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">Get-Item</span> D:\\LinkDir).Delete(<span class=\"literal\">$false</span>) <span class=\"comment\"># 无参数也行</span></span><br></pre></td></tr></table></figure>\r\n<p>调用 <code>DirectotyInfo.Delete()</code> 方法进行删除. 实测有效.</p>\r\n<h2 id=\"创建链接的用处\">创建链接的用处</h2>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>区分对待同一根目录下的不同子目录使用 OneDrive 的策略. OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.</li>\r\n</ol>\r\n<h2 id=\"小结\">小结</h2>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>使用 <code>New-Item -ItemType xxx -Path Link -Value Target</code> 创建链接.</li>\r\n<li>使用 <code>-Force</code> 参数使创建的链接覆盖同名文件/目录.</li>\r\n<li>使用 <code>(Get-Item .\\Link).Delete()</code> 方法删除链接, 而不影响被链接的文件.</li>\r\n</ol>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"powershell-创建链接文件\">PowerShell 创建链接文件</h1>\r\n<p>Linux 系统中, 用户可以随意创建软连接( SymbolicLink) 或 硬链接( HardLink). 而 Windows 好像就只能创建 &quot;快捷方式&quot; 了?</p>\r\n<p>事实上, Windows 系统同样可以创建链接文件, 并且其效果和 Linux 下的 *Link 完全相同.</p>\r\n<p>Windows 下链接文件的格式可以有:</p>\r\n<ul>\r\n<li>软连接 SymbolicLink</li>\r\n<li>硬链接 HardLink</li>\r\n<li>&quot;Junction&quot;</li>\r\n</ul>\r\n<h2 id=\"创建链接文件的-powershell-命令\">创建链接文件的 PowerShell 命令</h2>\r\n<p><strong>创建链接文件需要管理员权限</strong> .</p>\r\n<p>创建链接文件和创建普通文件使用的 PowerShell 命令相同, 只是需要加上特定的参数.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建符号链接 D:\\Link -&gt; D:\\Target</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType HardLink -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建硬链接 D:\\Link -&gt; D:\\Target. 注意, 硬链接只能链接两个文件, 不能链接两个目录</span></span><br><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType Junction -Path D:\\Link -Value D:\\Target <span class=\"comment\">#创建 Junction D:\\Link -&gt; D:\\Target</span></span><br></pre></td></tr></table></figure>","more":"<p>在创建链接时, 可以使用 <code>-Force</code> 参数. 如果在创建链接之前, 目录中已经存在一个与链接同名的文件或子目录, 那么系统会报错 &quot;NewItemError, resource exists&quot;, 并不会创建该链接. 那么, 就得使用 <code>-Force</code> 参数强行创建, 覆盖已经存在的文件或子目录.</p>\r\n<h2 id=\"移除修改链接文件\">移除/修改链接文件</h2>\r\n<p>我创建完一个从本博客所在目录到 Document 目录的符号链接之后, 发现该目录深度少了两级. 当我想要删除已经创建的链接时, 系统提示我&quot;将删除其下所有子项, 是否继续?&quot;. 吓得我赶紧按下 N + 回车, 逃之夭夭.</p>\r\n<p>我为此查询了微软的官方文档, 又 Google 了一翻. 结果发现这东西只管拉屎不管填坑啊! 连猫都不如啊混蛋! 😡</p>\r\n<p>幸好经 <a href=\"https://stackoverflow.com/questions/45536928/powershell-remove-symbolic-link-windows\" target=\"_blank\" rel=\"noopener\">StackOverflow 上的这个回答</a> 提示, 我想到了一个变通方案.</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-Item</span> -ItemType SymbolicLink -Path D:\\Link -Value <span class=\"string\">'D:\\$Recycle.Bin'</span> -Force</span><br></pre></td></tr></table></figure>\r\n<p>我将该链接重新指向了一个空目录, 然后把它 <code>Remove-Item</code> 掉了, 之后重新创建了一个新的链接.</p>\r\n<p>刚才在知乎提了一个问, <a href=\"https://www.zhihu.com/question/286730188/answer/451072733\" target=\"_blank\" rel=\"noopener\">轮子哥回答</a> 说可以用 cmd 的 <code>rmdir</code> 命令来删除该链接. 经测试, 的确能删除, 并且文件依然存在于原目录.</p>\r\n<p>PowerShell 到底有没有此功能? 在 <a href=\"https://github.com/powershell/powershell/issues/621\" target=\"_blank\" rel=\"noopener\">PowerShell在GitHub上的一个issue</a> 里了解到微软正在解决这个问题. 但是根据实测的结果来看, 恐怕还是只能靠 cmd 来完成这个任务...</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest\\ 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : D:\\LinkTest\\ 是 NTFS 交接点。请使用 Force 参数删除或修改该对象。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">Remove-Item</span> .\\LinkTest\\</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : WriteError: (D:\\LinkTest\\:DirectoryInfo) [Remove</span><br><span class=\"line\">   -Item], IOException</span><br><span class=\"line\">    + FullyQualifiedErrorId : DirectoryNotEmpty,Microsoft.PowerShell.Commands.</span><br><span class=\"line\">   RemoveItemCommand</span><br><span class=\"line\"></span><br><span class=\"line\">PS D:\\&gt; <span class=\"built_in\">Remove-Item</span> .\\LinkTest -Force</span><br><span class=\"line\"></span><br><span class=\"line\">确认</span><br><span class=\"line\">D:\\LinkTest 处的项具有子项，并且未指定 Recurse</span><br><span class=\"line\">参数。如果继续，所有子项均将随该项删除。是否确实要继续?</span><br><span class=\"line\">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助</span><br><span class=\"line\">(默认值为“Y”):Y</span><br><span class=\"line\">rm : 请求中指定的标记与重分析点中存在的标记不匹配。</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ rm .\\LinkTest -Force</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [Remove-Item], Win32Exception</span><br><span class=\"line\">    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.P</span><br><span class=\"line\">   owerShell.Commands.RemoveItemCommand</span><br></pre></td></tr></table></figure>\r\n<p>出现了 &quot;请求中指定的标记与重分析点中存在的标记不匹配&quot; 的问题... 等我搞明白这句话用英语怎么说就去 <a href=\"https://github.com/powershell/powershell/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a> 提 issue 去...</p>\r\n<p>知乎上 <a href=\"https://www.zhihu.com/question/286730188/answer/451095023\" target=\"_blank\" rel=\"noopener\">Gee Law的回答</a> 提出的方法:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">Get-Item</span> D:\\LinkDir).Delete(<span class=\"literal\">$false</span>) <span class=\"comment\"># 无参数也行</span></span><br></pre></td></tr></table></figure>\r\n<p>调用 <code>DirectotyInfo.Delete()</code> 方法进行删除. 实测有效.</p>\r\n<h2 id=\"创建链接的用处\">创建链接的用处</h2>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>区分对待同一根目录下的不同子目录使用 OneDrive 的策略. OneDrive 只能同步一个目录之下的所有子项. 若有一些经常变动且无关紧要的文件与需要注意保存和备份的文件处于同一目录下, 就可以通过在 OneDrive 目录之外创建目录, 并将其中需要同步的目录链接到 OneDrive 目录内的方式来达成目的.</li>\r\n</ol>\r\n<h2 id=\"小结\">小结</h2>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>使用 <code>New-Item -ItemType xxx -Path Link -Value Target</code> 创建链接.</li>\r\n<li>使用 <code>-Force</code> 参数使创建的链接覆盖同名文件/目录.</li>\r\n<li>使用 <code>(Get-Item .\\Link).Delete()</code> 方法删除链接, 而不影响被链接的文件.</li>\r\n</ol>"},{"title":"[PyNote]-0-Python基础认识","mathjax":false,"date":"2018-07-26T07:29:44.000Z","_content":"\n<!--more-->\n\n# Python 基础认识\n\n## 配置 Python 开发环境\n\n先来了解一下怎么安装 Python 吧.\n\n对于 Windows 系统, 安装 Python 可以去 [Python 官网](http://www.python.org/) 下载官方提供的 `Windows x86-64 executable installer` 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .\n\n下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 `C:\\Python` . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题...\n\n安装时选择 \"add Python to PATH\" 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. `C:\\Python` 和 `C:\\Python\\Scripts` 都需要添加到环境变量 `PATH` 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.\n\n安装之后, 可以使用\n\n```powershell\npython -V # 或 python --version\npip -v\n```\n\n来确认一下 `C:\\Python` 和 `C:\\Python\\Scripts` 是否已经配置好了.\n\n之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度...\n\n依照着 [清华大学镜像的帮助文档](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/) 将 pip 的软件源更换为清华镜像. \n\n> **设为默认**\n> 修改 %APPDATA%\\\\pip\\\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如\n> ```ini\n> [global]\n> index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n> ```\n> pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。\n\n不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 `%AppData%\\Roaming\\pip\\pip.ini` \n\n配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.\n\n- 下载 [pylint](https://www.pylint.org/#install)\n- 下载 [autopep8](https://github.com/hhatto/autopep8) , 该程序会按照 [pep8](https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html) 代码规范格式化文档.\n  - 另一种代码格式化程序的选择是 [yapf](https://github.com/google/yapf) , 按 [Google 的标准](http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/) .\n\n```powershell\npython -m pip install pylint\npython -m pip install autopep8\n```\n\n搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.\n\n## Python 的脚本模式和交互式模式\n\nPython 安装好了之后, 可以用两种方式使用 Python\n\n0. 交互式\n  要进入这种模式, 只需要在终端中输入 `Python` 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 `print()` 函数. 要退出此环境, 需要执行 `exit()` 函数.\n0. 脚本模式\n  这个模式就是编写一个 Python 脚本, 文件需要以 `.py` 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 `print()` 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 `exit()` 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 `exit(xxx)` 函数.\n\n## Python 脚本的源代码是怎样的\n\n编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好.\n下面以一个 \"Hello World\" 程序介绍一下 Python 的源代码一般长什么样吧.\n\n```py\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n\"\"\"\n这是一条行间注释\n可以换行, 写很多行\n一般会用于写文档, \n比如在一个自定义函数下面说明函数的功能和参数的含义\n\"\"\"\nimport os\nfor i in range(1,10):\n    print(\"Hello World\") # 使用 Python 内建函数 print()\nos.system(\"echo Hello World\") # 使用 os 模块的 system() 函数调用外部命令 echo Hello World.\n```\n- Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:\n  - 第一行: `#! /usr/bin/python3` 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 `#! /bin/bash`. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 `./filename` 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 `python .\\filename.py`.\n  - 第二行: `# -*- coding: utf-8 -*-` 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧...\n- Python 用 `\"\"\" 多行注释 \"\"\"` 和 `# 单行注释` 注释.\n- Python 可以用 import 语句导入一个模块, 比如这里导入的 `os` 模块. 导入之后, 使用 `.` 对象运算符从模块中使用该模块定义的 `system()` 函数.\n- Python 的控制结构后面会用 `:` 冒号.\n- Python 以相同的 **缩进** 标识一个语句块.\n\n## 小结\n\n安装 Python:\n\n- 下载安装包并安装  ->\n- 配置环境变量      ->\n- 配置 pip 软件源   ->\n- 通过 pip 安装 pylint 和 代码格式化程序\n\nPython 代码的基本结构:\n\n- (可选) 特殊注释, 前两行\n- 语句\n\n了解了 Python 的基本概念之后, 就先学习一下 Python 的 [运算符](/2018/07/pynote-python运算符/) 和 [控制结构](/2018/07/pynote-python控制结构) 吧. 先把 Python 用起来.\n\n- 数据结构\n  - 数字\n    - 整数\n    - 浮点数\n    - 复数\n  - 字符串\n  - 集合\n    - 列表\n    - 元组\n    - 字典\n- 运算符\n  - 算术运算符\n  - 关系运算符\n  - 赋值运算符\n  - 逻辑运算符\n  - 位运算符\n  - 成员运算符\n  - 身份运算符\n- 控制结构\n  - 分支\n  - 循环","source":"_posts/pynote-0-python基本认识.md","raw":"---\ntitle: '[PyNote]-0-Python基础认识'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-26 15:29:44\n---\n\n<!--more-->\n\n# Python 基础认识\n\n## 配置 Python 开发环境\n\n先来了解一下怎么安装 Python 吧.\n\n对于 Windows 系统, 安装 Python 可以去 [Python 官网](http://www.python.org/) 下载官方提供的 `Windows x86-64 executable installer` 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .\n\n下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 `C:\\Python` . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题...\n\n安装时选择 \"add Python to PATH\" 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. `C:\\Python` 和 `C:\\Python\\Scripts` 都需要添加到环境变量 `PATH` 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.\n\n安装之后, 可以使用\n\n```powershell\npython -V # 或 python --version\npip -v\n```\n\n来确认一下 `C:\\Python` 和 `C:\\Python\\Scripts` 是否已经配置好了.\n\n之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度...\n\n依照着 [清华大学镜像的帮助文档](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/) 将 pip 的软件源更换为清华镜像. \n\n> **设为默认**\n> 修改 %APPDATA%\\\\pip\\\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如\n> ```ini\n> [global]\n> index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n> ```\n> pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。\n\n不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 `%AppData%\\Roaming\\pip\\pip.ini` \n\n配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.\n\n- 下载 [pylint](https://www.pylint.org/#install)\n- 下载 [autopep8](https://github.com/hhatto/autopep8) , 该程序会按照 [pep8](https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html) 代码规范格式化文档.\n  - 另一种代码格式化程序的选择是 [yapf](https://github.com/google/yapf) , 按 [Google 的标准](http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/) .\n\n```powershell\npython -m pip install pylint\npython -m pip install autopep8\n```\n\n搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.\n\n## Python 的脚本模式和交互式模式\n\nPython 安装好了之后, 可以用两种方式使用 Python\n\n0. 交互式\n  要进入这种模式, 只需要在终端中输入 `Python` 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 `print()` 函数. 要退出此环境, 需要执行 `exit()` 函数.\n0. 脚本模式\n  这个模式就是编写一个 Python 脚本, 文件需要以 `.py` 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 `print()` 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 `exit()` 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 `exit(xxx)` 函数.\n\n## Python 脚本的源代码是怎样的\n\n编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好.\n下面以一个 \"Hello World\" 程序介绍一下 Python 的源代码一般长什么样吧.\n\n```py\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n\"\"\"\n这是一条行间注释\n可以换行, 写很多行\n一般会用于写文档, \n比如在一个自定义函数下面说明函数的功能和参数的含义\n\"\"\"\nimport os\nfor i in range(1,10):\n    print(\"Hello World\") # 使用 Python 内建函数 print()\nos.system(\"echo Hello World\") # 使用 os 模块的 system() 函数调用外部命令 echo Hello World.\n```\n- Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:\n  - 第一行: `#! /usr/bin/python3` 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 `#! /bin/bash`. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 `./filename` 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 `python .\\filename.py`.\n  - 第二行: `# -*- coding: utf-8 -*-` 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧...\n- Python 用 `\"\"\" 多行注释 \"\"\"` 和 `# 单行注释` 注释.\n- Python 可以用 import 语句导入一个模块, 比如这里导入的 `os` 模块. 导入之后, 使用 `.` 对象运算符从模块中使用该模块定义的 `system()` 函数.\n- Python 的控制结构后面会用 `:` 冒号.\n- Python 以相同的 **缩进** 标识一个语句块.\n\n## 小结\n\n安装 Python:\n\n- 下载安装包并安装  ->\n- 配置环境变量      ->\n- 配置 pip 软件源   ->\n- 通过 pip 安装 pylint 和 代码格式化程序\n\nPython 代码的基本结构:\n\n- (可选) 特殊注释, 前两行\n- 语句\n\n了解了 Python 的基本概念之后, 就先学习一下 Python 的 [运算符](/2018/07/pynote-python运算符/) 和 [控制结构](/2018/07/pynote-python控制结构) 吧. 先把 Python 用起来.\n\n- 数据结构\n  - 数字\n    - 整数\n    - 浮点数\n    - 复数\n  - 字符串\n  - 集合\n    - 列表\n    - 元组\n    - 字典\n- 运算符\n  - 算术运算符\n  - 关系运算符\n  - 赋值运算符\n  - 逻辑运算符\n  - 位运算符\n  - 成员运算符\n  - 身份运算符\n- 控制结构\n  - 分支\n  - 循环","slug":"pynote-0-python基本认识","published":1,"updated":"2018-08-23T17:44:54.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m001uw8lkxb3oezq5","content":"<a id=\"more\"></a>\r\n<h1 id=\"python-基础认识\">Python 基础认识</h1>\r\n<h2 id=\"配置-python-开发环境\">配置 Python 开发环境</h2>\r\n<p>先来了解一下怎么安装 Python 吧.</p>\r\n<p>对于 Windows 系统, 安装 Python 可以去 <a href=\"http://www.python.org/\" target=\"_blank\" rel=\"noopener\">Python 官网</a> 下载官方提供的 <code>Windows x86-64 executable installer</code> 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .</p>\r\n<p>下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 <code>C:\\Python</code> . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题...</p>\r\n<p>安装时选择 &quot;add Python to PATH&quot; 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 都需要添加到环境变量 <code>PATH</code> 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.</p>\r\n<p>安装之后, 可以使用</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V <span class=\"comment\"># 或 python --version</span></span><br><span class=\"line\">pip -v</span><br></pre></td></tr></table></figure>\r\n<p>来确认一下 <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 是否已经配置好了.</p>\r\n<p>之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度...</p>\r\n<p>依照着 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\" target=\"_blank\" rel=\"noopener\">清华大学镜像的帮助文档</a> 将 pip 的软件源更换为清华镜像.</p>\r\n<blockquote>\r\n<p><strong>设为默认</strong> 修改 %APPDATA%\\pip\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如 <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [global]</span><br><span class=\"line\">&gt; index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\r\n</blockquote>\r\n<blockquote>\r\n<p>pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。</p>\r\n</blockquote>\r\n<p>不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 <code>%AppData%\\Roaming\\pip\\pip.ini</code></p>\r\n<p>配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.</p>\r\n<ul>\r\n<li>下载 <a href=\"https://www.pylint.org/#install\" target=\"_blank\" rel=\"noopener\">pylint</a></li>\r\n<li>下载 <a href=\"https://github.com/hhatto/autopep8\" target=\"_blank\" rel=\"noopener\">autopep8</a> , 该程序会按照 <a href=\"https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html\" target=\"_blank\" rel=\"noopener\">pep8</a> 代码规范格式化文档.</li>\r\n<li>另一种代码格式化程序的选择是 <a href=\"https://github.com/google/yapf\" target=\"_blank\" rel=\"noopener\">yapf</a> , 按 <a href=\"http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/\" target=\"_blank\" rel=\"noopener\">Google 的标准</a> .</li>\r\n</ul>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install pylint</span><br><span class=\"line\">python -m pip install autopep8</span><br></pre></td></tr></table></figure>\r\n<p>搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.</p>\r\n<h2 id=\"python-的脚本模式和交互式模式\">Python 的脚本模式和交互式模式</h2>\r\n<p>Python 安装好了之后, 可以用两种方式使用 Python</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>交互式 要进入这种模式, 只需要在终端中输入 <code>Python</code> 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 <code>print()</code> 函数. 要退出此环境, 需要执行 <code>exit()</code> 函数.</li>\r\n<li>脚本模式 这个模式就是编写一个 Python 脚本, 文件需要以 <code>.py</code> 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 <code>print()</code> 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 <code>exit()</code> 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 <code>exit(xxx)</code> 函数.</li>\r\n</ol>\r\n<h2 id=\"python-脚本的源代码是怎样的\">Python 脚本的源代码是怎样的</h2>\r\n<p>编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好. 下面以一个 &quot;Hello World&quot; 程序介绍一下 Python 的源代码一般长什么样吧.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">这是一条行间注释</span></span><br><span class=\"line\"><span class=\"string\">可以换行, 写很多行</span></span><br><span class=\"line\"><span class=\"string\">一般会用于写文档, </span></span><br><span class=\"line\"><span class=\"string\">比如在一个自定义函数下面说明函数的功能和参数的含义</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"Hello World\"</span>) <span class=\"comment\"># 使用 Python 内建函数 print()</span></span><br><span class=\"line\">os.system(<span class=\"string\">\"echo Hello World\"</span>) <span class=\"comment\"># 使用 os 模块的 system() 函数调用外部命令 echo Hello World.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:</li>\r\n<li>第一行: <code>#! /usr/bin/python3</code> 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 <code>#! /bin/bash</code>. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 <code>./filename</code> 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 <code>python .\\filename.py</code>.</li>\r\n<li>第二行: <code># -*- coding: utf-8 -*-</code> 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧...</li>\r\n<li>Python 用 <code>&quot;&quot;&quot; 多行注释 &quot;&quot;&quot;</code> 和 <code># 单行注释</code> 注释.</li>\r\n<li>Python 可以用 import 语句导入一个模块, 比如这里导入的 <code>os</code> 模块. 导入之后, 使用 <code>.</code> 对象运算符从模块中使用该模块定义的 <code>system()</code> 函数.</li>\r\n<li>Python 的控制结构后面会用 <code>:</code> 冒号.</li>\r\n<li>Python 以相同的 <strong>缩进</strong> 标识一个语句块.</li>\r\n</ul>\r\n<h2 id=\"小结\">小结</h2>\r\n<p>安装 Python:</p>\r\n<ul>\r\n<li>下载安装包并安装 -&gt;</li>\r\n<li>配置环境变量 -&gt;</li>\r\n<li>配置 pip 软件源 -&gt;</li>\r\n<li>通过 pip 安装 pylint 和 代码格式化程序</li>\r\n</ul>\r\n<p>Python 代码的基本结构:</p>\r\n<ul>\r\n<li>(可选) 特殊注释, 前两行</li>\r\n<li>语句</li>\r\n</ul>\r\n<p>了解了 Python 的基本概念之后, 就先学习一下 Python 的 <a href=\"/2018/07/pynote-python运算符/\">运算符</a> 和 <a href=\"/2018/07/pynote-python控制结构\">控制结构</a> 吧. 先把 Python 用起来.</p>\r\n<ul>\r\n<li>数据结构</li>\r\n<li>数字\r\n<ul>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n</ul></li>\r\n<li>字符串</li>\r\n<li>集合\r\n<ul>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul></li>\r\n<li>运算符</li>\r\n<li>算术运算符</li>\r\n<li>关系运算符</li>\r\n<li>赋值运算符</li>\r\n<li>逻辑运算符</li>\r\n<li>位运算符</li>\r\n<li>成员运算符</li>\r\n<li>身份运算符</li>\r\n<li>控制结构</li>\r\n<li>分支</li>\r\n<li>循环</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-基础认识\">Python 基础认识</h1>\r\n<h2 id=\"配置-python-开发环境\">配置 Python 开发环境</h2>\r\n<p>先来了解一下怎么安装 Python 吧.</p>\r\n<p>对于 Windows 系统, 安装 Python 可以去 <a href=\"http://www.python.org/\" target=\"_blank\" rel=\"noopener\">Python 官网</a> 下载官方提供的 <code>Windows x86-64 executable installer</code> 安装包. Python2 还是 Python3 随便选择, 不过 Python2 是历史遗留, 未来大部分 Python 语言肯定都会用 Python3 的. 我准备学习 Python3 .</p>\r\n<p>下载完成之后, 直接运行该 .exe 文件, 安装路径最好就选在 <code>C:\\Python</code> . 如果按照默认设置 安装在 APPDATA 里的话, 可能在执行一些脚本时由于路径过长导致一些问题...</p>\r\n<p>安装时选择 &quot;add Python to PATH&quot; 可以自动将 Python 添加进系统的环境变量里. 如果忘了的话, 也可以自行在系统设置里添加环境变量. <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 都需要添加到环境变量 <code>PATH</code> 里, 前者是 Python 解释器的路径, 后者是通过 Python-pip 下载的第三方模块或脚本的路径.</p>\r\n<p>安装之后, 可以使用</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V <span class=\"comment\"># 或 python --version</span></span><br><span class=\"line\">pip -v</span><br></pre></td></tr></table></figure>\r\n<p>来确认一下 <code>C:\\Python</code> 和 <code>C:\\Python\\Scripts</code> 是否已经配置好了.</p>\r\n<p>之后最好配置一下 pip 的软件源. 否则按国内的网络环境, 经常会下载失败或者只有毛细作用般的下载速度...</p>\r\n<p>依照着 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\" target=\"_blank\" rel=\"noopener\">清华大学镜像的帮助文档</a> 将 pip 的软件源更换为清华镜像.</p>\r\n<blockquote>\r\n<p><strong>设为默认</strong> 修改 %APPDATA%\\pip\\pip.ini (Windows 10) (没有就创建一个)， 修改 index-url至tuna，例如 <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [global]</span><br><span class=\"line\">&gt; index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\r\n</blockquote>\r\n<blockquote>\r\n<p>pip 和 pip3 并存时，只需修改 ~/.pip/pip.conf。</p>\r\n</blockquote>\r\n<p>不过他们提供的文件所处的路径有问题, 实际上这个文件的路径应该是 <code>%AppData%\\Roaming\\pip\\pip.ini</code></p>\r\n<p>配置好之后, 先通过 pip 下载 Python 的 lint 程序和代码格式化程序.</p>\r\n<ul>\r\n<li>下载 <a href=\"https://www.pylint.org/#install\" target=\"_blank\" rel=\"noopener\">pylint</a></li>\r\n<li>下载 <a href=\"https://github.com/hhatto/autopep8\" target=\"_blank\" rel=\"noopener\">autopep8</a> , 该程序会按照 <a href=\"https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html\" target=\"_blank\" rel=\"noopener\">pep8</a> 代码规范格式化文档.</li>\r\n<li>另一种代码格式化程序的选择是 <a href=\"https://github.com/google/yapf\" target=\"_blank\" rel=\"noopener\">yapf</a> , 按 <a href=\"http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/\" target=\"_blank\" rel=\"noopener\">Google 的标准</a> .</li>\r\n</ul>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install pylint</span><br><span class=\"line\">python -m pip install autopep8</span><br></pre></td></tr></table></figure>\r\n<p>搞完这些步骤, 就可以用任意喜欢的文本编辑器(最好是支持代码高亮的, 默认的 Notepad 就算了吧) 进行 Python 编程了.</p>\r\n<h2 id=\"python-的脚本模式和交互式模式\">Python 的脚本模式和交互式模式</h2>\r\n<p>Python 安装好了之后, 可以用两种方式使用 Python</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>交互式 要进入这种模式, 只需要在终端中输入 <code>Python</code> 就可以进入 Python 的交互式环境. 在里面可以一句一句地执行代码. 如果输入的是一个表达式, 在计算之后, Python 会自动地把结果 print 出来, 不需要使用 <code>print()</code> 函数. 要退出此环境, 需要执行 <code>exit()</code> 函数.</li>\r\n<li>脚本模式 这个模式就是编写一个 Python 脚本, 文件需要以 <code>.py</code> 结尾. 然后以参数的形式传递给 Python 解释器. 在这个模式下, 文件中写了什么, Python 就做什么, 没写的就不会做. 所以, 要在终端中显示内容, 必须使用 <code>print()</code> 函数了. 当执行到文件末尾的时候, 程序会自动退出, 不需要 <code>exit()</code> 函数. 不过如果需要向系统传递特定的退出参数, 也可以使用 <code>exit(xxx)</code> 函数.</li>\r\n</ol>\r\n<h2 id=\"python-脚本的源代码是怎样的\">Python 脚本的源代码是怎样的</h2>\r\n<p>编写一个 Python 程序并没有多苛刻的要求, 只需要一行一行地把功能给实现了就好. 下面以一个 &quot;Hello World&quot; 程序介绍一下 Python 的源代码一般长什么样吧.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">这是一条行间注释</span></span><br><span class=\"line\"><span class=\"string\">可以换行, 写很多行</span></span><br><span class=\"line\"><span class=\"string\">一般会用于写文档, </span></span><br><span class=\"line\"><span class=\"string\">比如在一个自定义函数下面说明函数的功能和参数的含义</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"Hello World\"</span>) <span class=\"comment\"># 使用 Python 内建函数 print()</span></span><br><span class=\"line\">os.system(<span class=\"string\">\"echo Hello World\"</span>) <span class=\"comment\"># 使用 os 模块的 system() 函数调用外部命令 echo Hello World.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 程序可以有两条特殊注释, 这两条注释必须写在源代码前两行, 在其他地方不会起作用:</li>\r\n<li>第一行: <code>#! /usr/bin/python3</code> 用来向系统声明 Python 解释器的路径. 不过这个功能只有 Linux 等类 Unix 的系统才有用, 如果看过 Linux 的 bash 脚本, 会发现其第一行也有类似的特殊注释 <code>#! /bin/bash</code>. 有了这条注释, 在终端中运行该脚本的时候, 只需要输入 <code>./filename</code> 就可以调用声明的解释器来执行了, 连文件扩展名都不需要的. 但是 Windows 系统基于 NT 内核. 这条特殊注释没有作用. 无论怎样, 都需要 <code>python .\\filename.py</code>.</li>\r\n<li>第二行: <code># -*- coding: utf-8 -*-</code> 向 Python 解释器声明该文件使用的字符编码. 如果不写该注释的话, Python 默认以 utf-8 作为编码格式. 一般情况下都用 utf-8. 这个注释估计是一个历史遗留功能了吧...</li>\r\n<li>Python 用 <code>&quot;&quot;&quot; 多行注释 &quot;&quot;&quot;</code> 和 <code># 单行注释</code> 注释.</li>\r\n<li>Python 可以用 import 语句导入一个模块, 比如这里导入的 <code>os</code> 模块. 导入之后, 使用 <code>.</code> 对象运算符从模块中使用该模块定义的 <code>system()</code> 函数.</li>\r\n<li>Python 的控制结构后面会用 <code>:</code> 冒号.</li>\r\n<li>Python 以相同的 <strong>缩进</strong> 标识一个语句块.</li>\r\n</ul>\r\n<h2 id=\"小结\">小结</h2>\r\n<p>安装 Python:</p>\r\n<ul>\r\n<li>下载安装包并安装 -&gt;</li>\r\n<li>配置环境变量 -&gt;</li>\r\n<li>配置 pip 软件源 -&gt;</li>\r\n<li>通过 pip 安装 pylint 和 代码格式化程序</li>\r\n</ul>\r\n<p>Python 代码的基本结构:</p>\r\n<ul>\r\n<li>(可选) 特殊注释, 前两行</li>\r\n<li>语句</li>\r\n</ul>\r\n<p>了解了 Python 的基本概念之后, 就先学习一下 Python 的 <a href=\"/2018/07/pynote-python运算符/\">运算符</a> 和 <a href=\"/2018/07/pynote-python控制结构\">控制结构</a> 吧. 先把 Python 用起来.</p>\r\n<ul>\r\n<li>数据结构</li>\r\n<li>数字\r\n<ul>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n</ul></li>\r\n<li>字符串</li>\r\n<li>集合\r\n<ul>\r\n<li>列表</li>\r\n<li>元组</li>\r\n<li>字典</li>\r\n</ul></li>\r\n<li>运算符</li>\r\n<li>算术运算符</li>\r\n<li>关系运算符</li>\r\n<li>赋值运算符</li>\r\n<li>逻辑运算符</li>\r\n<li>位运算符</li>\r\n<li>成员运算符</li>\r\n<li>身份运算符</li>\r\n<li>控制结构</li>\r\n<li>分支</li>\r\n<li>循环</li>\r\n</ul>"},{"title":"[PyNote]-3.1-Python中的数字与字符串","mathjax":false,"date":"2018-07-28T13:37:09.000Z","_content":"\n- 数字\n  - 整数\n  - 浮点数\n  - 复数\n- 字符串\n\n> 可以使用 Python 内建函数 `type()` 来查看一个数据的类型\n\n<!--more-->\n\n# 基本数据类型\n\n## 整数-int\n\nPython 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.\n\n整数的相关信息可以从 `sys.int_info` 获得\n\n```py\nimport sys\nprint(sys.int_info)\n\n# 以下是经过整理的输出信息\n\nsys.int_info(           # 长整数是普通整数的组合\n  bits_per_digit=30,    # 每个整数占用 30 个 bit. \n  sizeof_digit=4        # 每个整数占用 4 个 byte (32 bit) 的内存空间.\n  )\n```\n\nTODO: 为啥差 2 bit 呢?\n\n### 布尔数-bool\n\n布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 `0`, `1` (二进制).\n在 Python 中, 还可以用 `True`(1) `False`(0) 来表示它们.\n\n## 浮点数-float\n\n所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.\n\n- 首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.\n- 其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\\\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.\n  - 这里随便尝试了一下:\n\n```py\n>>> a = 1.0000000000000006\n>>> print(a)\n1.0000000000000007\n>>>\n>>> a = 1.00000000000000006\n>>> print(a)\n1.0\n```\n\n浮点数的相关信息可以从 `sys.float_info` 对象获得.\n\n[Python 官方文档 对 sys.float_info 的解释](https://docs.python.org/3/library/sys.html#sys.float_info)\n\n```py\nimport sys\nprint(sys.float_info)\n\n# 以下是经过整理的输出信息\n\nsys.float_info(         # 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.\n  max=1.7976931348623157e+308,  # 可表示的最大正数\n  max_exp=1024,                 # < 2**1024\n  max_10_exp=308,               # 十进制时可正常处理的最大指数\n  min=2.2250738585072014e-308,  # 可表示的最小正数\n  min_exp=-1021,                # > 2**-1021\n  min_10_exp=-307,              # 十进制时可正常处理的最小指数\n  dig=15,                       # 十进制下可正常处理的最大小数位数\n  mant_dig=53,                  # 浮动精度, 二进制下表示有效数字的 bit 位数.\n  epsilon=2.220446049250313e-16,# 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)\n  radix=2,                      # \"基数\" 即指数部分的 \"底数\".\n  rounds=1                      # 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节\n  )\n```\n\n对于一个\n\n## 复数-complex\n\n- 复数的概念与数学上的一致, 由 `实部+虚部j` 表示. 但是这里虚数单位的表示法是 `j` 不是 `i` , 需要注意别搞混淆了.\n- 复数的实部与虚部都是浮点数.\n- 可以使用 `complex.real` 和 `complex.imag` 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)\n\n```py\ntest = 1.0 + 89.0j\nprint(str(test), end='=')\nprint(str(test.real), end='+')\nprint(str(test.imag)+'j')\n```\n\n输出为\n\n```py\n(1+89j)=1.0+89.0j\n```\n\n## 字符串-str\n\n- Python 字符串用 `\"字符串\"` 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 `\\` 反斜杠转义 `\\\"`. \n  - 如果需要在字符串中表示反斜杠, 可以使用 `\\\\` 对反斜杠转义, 也可以使用 `r\"不用\\转义的原始字符串\"` 在引号外使用字母 `r`.\n  - 如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 `u`. `u\"这是一个\\u0020字符\"` (\\u0020是空格).\n  - 如果要将字符串转化为 `byte-like` 对象, 在引号外使用字母 `b`.\n- Python 的字符串也可以使用成对的三引号`\"\"\"超级多的字符\"\"\"`. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.\n\n```py\nstring = \"\"\"测试三引号\n包裹的字符\n    是啥样的?\n\"\"\"\nprint(repr(string))\n```\n\n输出了 `'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'` 可以看到, 特殊字符被识别并转换为对应的转义字符了.\n\n- Python 没有单独的 \"字符\" 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.\n- Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.\n- Python 可用 `%` 符号表示格式化字符串. **其右侧本质上是一个元组(tuple)**\n\n### 格式化字符串\n\n|格式符|含义|\n|-|-|\n|`%c`|字符及其 ASCII 码|\n|`%s`|字符串|\n|`%d`|整数|\n|`%o`|八进制整数|\n|`%x`|十六进制整数|\n|`%X`|十六进制整数(字母大写)|\n|`%f`|小数表示的浮点数|\n|`%e`|科学记数法表示的浮点数|\n|`%E`|科学记数法表示的浮点数(字母大写)|\n|`%g`|从 `%e` 和 `%f` 中选择输出短的|\n|`%G`|从 `%E` 和 `%F` 中选择输出短的|\n\n  - 传递多个格式化字符串需要使用 `()` 圆括号将参数括起来. 然后在内部用 `,` 逗号划分各参数. **元组**\n\n```py\ntest1 = \"hello\"\ntest2 = \"HELLO\"\ntest3 = \"WoRlD\"\nprint(\"%s(%s) %s!\"%(test1,test2,test3))\n```\n\n输出:\n\n```\nhello(HELLO) WoRlD!\n```\n\n  - 另一种格式化方法为 `\"{}{}\".format(a,b)` 对字符串调用 `format()` 方法.\n\n```py\ntest1 = 1\ntest2 = 3.14\ntest3 = '哈哈哈'\n# 按顺序\nprint(\"按顺序:{},{},{}\".format(test1,test2,test3))\n# 按索引号\nprint(\"按索引号:{2},{1},{0}\".format(test1,test2,test3))\n# 按参数名\nprint(\"按参数名:{a},{c},{b}\".format(a=test1, b=test2, c=test3))\n```\n\n对格式化字符可以使用修饰符\n\n|修饰符|含义|\n|-|-|\n|`#`|十六进制前添`0x`, 八进制前添`0`|\n|`+`|在数字前添加正负号|\n|`m.n`| `m`表示显示数字的总位数(整数部分+小数部分); `n` 表示保留小数点的位数, 若 `m` 的条件已达到, 则 `n` 将被忽略.|\n|`0`|数字前填0, 默认空格|\n|`-`|左对齐, 默认右对齐|\n\n### 字符串的截取与分段\n\n一个字符串变量, 实质上可以视作一个由字符拼接起来的 \"元组\", 可以在变量名后用 `[index]` 提取其中的一个元素, 或者使用 `[index1:index2]` 提取其中一段, 注意有一个 **要头不要腚** 的规则.\n\n> 我突然想到用这个字符串来做例子也许会更形象...\n> \n> ```py\n> \"_(:з」∠)_\"    # 要头不要腚\n> ```\n\n```py\nstr = \"abcdefg\"\nfor i in range(7) # i = 0,1,2,3,4,5,6\n    print(str[i], end=':index(%d)|'%(i))\nprint() # 换行\nprint(str[0:2]) # 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).\n```\n\nindex 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.\n\n```\nstr     a  b  c  d  e  f  g\n+       0  1  2  3  4  5  6\n-      -7 -6 -5 -4 -3 -2 -1\n```\n\nindex 可以留空一个, 表示从另一个开始一直取到末尾(或头部).\n\n```py\nprint(str[2:]) # 打印 'cdefg\\n' 从c开始向末尾\nprint(str[:4]) # 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)\n```\n\n无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.\n\n```py\n# 对照着上面那个表看\nprint(str[1:6])\nprint(str[-6:6])\nprint(str[1:-1])\n# 都打印 'bcdef\\n'\n\nprint(str[0:5])\nprint(str[:5])\nprint(str[:-2])\n# 都打印 'abcde\\n'\n# ... 以此类推\n```\n\n### 字符串的\"运算\"\n\nPython 中的字符串参与运算:\n\n- `\"str1\" + \"str2\"` 拼接一个新的字符串 `\"str1str2\"`.\n- `\"str\"*int` 重复一个字符串 `int` 次. 例如 `\"str\"*3` == `\"strstrstr\"` \n\n# 数据类型转换\n\n## `int()`\n\n`help(int())`:\n\n```py\nclass int(object)\n |  int([x]) -> integer\n |  int(x, base=10) -> integer\n |\n |  Convert a number or string to an integer, or return 0 if no arguments\n |  are given.  If x is a number, return x.__int__().  For floating point\n |  numbers, this truncates towards zero.\n |\n |  If x is not a number or if base is given, then x must be a string,\n |  bytes, or bytearray instance representing an integer literal in the\n |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n |  Base 0 means to interpret the base from the string as an integer literal.\n```\n\n- `int()` 可接受的参数有:\n  - `x` 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.\n  - `base` 表示转换时依据的进制基数, 默认 10 进制.\n- 若 `x` 是一个整数, 返回其自身.\n- 若 `x` 是一个浮点数, 其小数部分会被砍掉.\n- 若 `x` 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符. \n  - 默认基数为 `base=10`, 可接受的基数值为 0 或 从 2 到 36. \n    - 就是说 10 进制下只能有 `0123456789`, 十六进制下可以有 `0123456789abcdef`, 最高可以在 36 进制下用 `z` 表示 `35`.\n    - `base=0` 的情况下, 根据字符串内容猜测进制. 但适用情况较少:\n      - `0x10` 会被识别为 16 进制的 `16`.\n      - `f`    会被识别为 16 进制的 `15`.\n      - `0o10` 会被识别为 8 进制的 `8`. (零后面是小写的字母O)\n      - `29134` 会被识别为 10 进制.\n      - `01423` 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 `0`.\n      - 只能从 `16` `8` `10` 中猜测.\n  - 字符串中可以在前面有 `+ -` 正负号. 也可以在两侧有空格.\n  - **规定了基数 `base` 时, 必须输入字符串.**\n\n## `float()`\n\n`help(float())`:\n\n```py\nclass float(object)\n |  float(x=0, /)\n |\n |  Convert a string or number to a floating point number, if possible.\n```\n\nTODO: 文档说得这么简洁, 我也没啥好说的... 只能用多了再来说说感受了...\n\n- `float.hex()` 返回一个用 16 进制表示的浮点数.\n- `float.fromhex()` 从字符串转换一个 16 进制的浮点数. 形式为 `0xf.fp+1` 用 `p` 表示 16 为底的指数.\n\n## `complex()`\n\n`help(complex())`:\n\n```py\nclass complex(object)\n |  complex(real=0, imag=0)\n |\n |  Create a complex number from a real part and an optional imaginary part.\n |\n |  This is equivalent to (real + imag*1j) where imag defaults to 0.\n```\n\n## `str()`\n\n```py\nclass str(object)\n |  str(object='') -> str\n |  str(bytes_or_buffer[, encoding[, errors]]) -> str\n |  \n |  Create a new string object from the given object. If encoding or\n |  errors is specified, then the object must expose a data buffer\n |  that will be decoded using the given encoding and error handler.\n |  Otherwise, returns the result of object.__str__() (if defined)\n |  or repr(object).\n |  encoding defaults to sys.getdefaultencoding().\n |  errors defaults to 'strict'.\n```\n\n大意是说:\n\n- 从给定对象创建一个新的字符串对象. 如果指定了 `encoding` 或 `errors`, 则必须公开 `bytes_or_buffer` 来编码字符串和处理错误信息.\n- `str()` 可接受的参数有:\n  - `object` 被转换的对象.\n  - `bytes_or_buffer` 字节或缓冲区.\n  - `encoding` 字符编码, 默认值由 `sys.getdefaultencoding()` 获得, 一般为 `utf-8`\n  - `errors` 错误策略. 默认为 `strict`.\n\n## 其他\n\n- `hex()` 将整数转换为其 16 进制形式的字符串.\n- `oct()` 将整数转换未其  8 进制形式的字符串.\n- `chr()` 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 `0<=i<=0x10ffff`.\n- `ord()` 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .\n- `repr()` 类似 `str()` 但返回的是一个字符串表达式.\n\n```py\n>>> repr('string')\n\"'string'\"\n>>> str('string')\n'string'\n```","source":"_posts/pynote-python中的数字与字符串.md","raw":"---\ntitle: '[PyNote]-3.1-Python中的数字与字符串'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-28 21:37:09\n---\n\n- 数字\n  - 整数\n  - 浮点数\n  - 复数\n- 字符串\n\n> 可以使用 Python 内建函数 `type()` 来查看一个数据的类型\n\n<!--more-->\n\n# 基本数据类型\n\n## 整数-int\n\nPython 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.\n\n整数的相关信息可以从 `sys.int_info` 获得\n\n```py\nimport sys\nprint(sys.int_info)\n\n# 以下是经过整理的输出信息\n\nsys.int_info(           # 长整数是普通整数的组合\n  bits_per_digit=30,    # 每个整数占用 30 个 bit. \n  sizeof_digit=4        # 每个整数占用 4 个 byte (32 bit) 的内存空间.\n  )\n```\n\nTODO: 为啥差 2 bit 呢?\n\n### 布尔数-bool\n\n布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 `0`, `1` (二进制).\n在 Python 中, 还可以用 `True`(1) `False`(0) 来表示它们.\n\n## 浮点数-float\n\n所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.\n\n- 首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.\n- 其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\\\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.\n  - 这里随便尝试了一下:\n\n```py\n>>> a = 1.0000000000000006\n>>> print(a)\n1.0000000000000007\n>>>\n>>> a = 1.00000000000000006\n>>> print(a)\n1.0\n```\n\n浮点数的相关信息可以从 `sys.float_info` 对象获得.\n\n[Python 官方文档 对 sys.float_info 的解释](https://docs.python.org/3/library/sys.html#sys.float_info)\n\n```py\nimport sys\nprint(sys.float_info)\n\n# 以下是经过整理的输出信息\n\nsys.float_info(         # 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.\n  max=1.7976931348623157e+308,  # 可表示的最大正数\n  max_exp=1024,                 # < 2**1024\n  max_10_exp=308,               # 十进制时可正常处理的最大指数\n  min=2.2250738585072014e-308,  # 可表示的最小正数\n  min_exp=-1021,                # > 2**-1021\n  min_10_exp=-307,              # 十进制时可正常处理的最小指数\n  dig=15,                       # 十进制下可正常处理的最大小数位数\n  mant_dig=53,                  # 浮动精度, 二进制下表示有效数字的 bit 位数.\n  epsilon=2.220446049250313e-16,# 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)\n  radix=2,                      # \"基数\" 即指数部分的 \"底数\".\n  rounds=1                      # 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节\n  )\n```\n\n对于一个\n\n## 复数-complex\n\n- 复数的概念与数学上的一致, 由 `实部+虚部j` 表示. 但是这里虚数单位的表示法是 `j` 不是 `i` , 需要注意别搞混淆了.\n- 复数的实部与虚部都是浮点数.\n- 可以使用 `complex.real` 和 `complex.imag` 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)\n\n```py\ntest = 1.0 + 89.0j\nprint(str(test), end='=')\nprint(str(test.real), end='+')\nprint(str(test.imag)+'j')\n```\n\n输出为\n\n```py\n(1+89j)=1.0+89.0j\n```\n\n## 字符串-str\n\n- Python 字符串用 `\"字符串\"` 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 `\\` 反斜杠转义 `\\\"`. \n  - 如果需要在字符串中表示反斜杠, 可以使用 `\\\\` 对反斜杠转义, 也可以使用 `r\"不用\\转义的原始字符串\"` 在引号外使用字母 `r`.\n  - 如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 `u`. `u\"这是一个\\u0020字符\"` (\\u0020是空格).\n  - 如果要将字符串转化为 `byte-like` 对象, 在引号外使用字母 `b`.\n- Python 的字符串也可以使用成对的三引号`\"\"\"超级多的字符\"\"\"`. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.\n\n```py\nstring = \"\"\"测试三引号\n包裹的字符\n    是啥样的?\n\"\"\"\nprint(repr(string))\n```\n\n输出了 `'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'` 可以看到, 特殊字符被识别并转换为对应的转义字符了.\n\n- Python 没有单独的 \"字符\" 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.\n- Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.\n- Python 可用 `%` 符号表示格式化字符串. **其右侧本质上是一个元组(tuple)**\n\n### 格式化字符串\n\n|格式符|含义|\n|-|-|\n|`%c`|字符及其 ASCII 码|\n|`%s`|字符串|\n|`%d`|整数|\n|`%o`|八进制整数|\n|`%x`|十六进制整数|\n|`%X`|十六进制整数(字母大写)|\n|`%f`|小数表示的浮点数|\n|`%e`|科学记数法表示的浮点数|\n|`%E`|科学记数法表示的浮点数(字母大写)|\n|`%g`|从 `%e` 和 `%f` 中选择输出短的|\n|`%G`|从 `%E` 和 `%F` 中选择输出短的|\n\n  - 传递多个格式化字符串需要使用 `()` 圆括号将参数括起来. 然后在内部用 `,` 逗号划分各参数. **元组**\n\n```py\ntest1 = \"hello\"\ntest2 = \"HELLO\"\ntest3 = \"WoRlD\"\nprint(\"%s(%s) %s!\"%(test1,test2,test3))\n```\n\n输出:\n\n```\nhello(HELLO) WoRlD!\n```\n\n  - 另一种格式化方法为 `\"{}{}\".format(a,b)` 对字符串调用 `format()` 方法.\n\n```py\ntest1 = 1\ntest2 = 3.14\ntest3 = '哈哈哈'\n# 按顺序\nprint(\"按顺序:{},{},{}\".format(test1,test2,test3))\n# 按索引号\nprint(\"按索引号:{2},{1},{0}\".format(test1,test2,test3))\n# 按参数名\nprint(\"按参数名:{a},{c},{b}\".format(a=test1, b=test2, c=test3))\n```\n\n对格式化字符可以使用修饰符\n\n|修饰符|含义|\n|-|-|\n|`#`|十六进制前添`0x`, 八进制前添`0`|\n|`+`|在数字前添加正负号|\n|`m.n`| `m`表示显示数字的总位数(整数部分+小数部分); `n` 表示保留小数点的位数, 若 `m` 的条件已达到, 则 `n` 将被忽略.|\n|`0`|数字前填0, 默认空格|\n|`-`|左对齐, 默认右对齐|\n\n### 字符串的截取与分段\n\n一个字符串变量, 实质上可以视作一个由字符拼接起来的 \"元组\", 可以在变量名后用 `[index]` 提取其中的一个元素, 或者使用 `[index1:index2]` 提取其中一段, 注意有一个 **要头不要腚** 的规则.\n\n> 我突然想到用这个字符串来做例子也许会更形象...\n> \n> ```py\n> \"_(:з」∠)_\"    # 要头不要腚\n> ```\n\n```py\nstr = \"abcdefg\"\nfor i in range(7) # i = 0,1,2,3,4,5,6\n    print(str[i], end=':index(%d)|'%(i))\nprint() # 换行\nprint(str[0:2]) # 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).\n```\n\nindex 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.\n\n```\nstr     a  b  c  d  e  f  g\n+       0  1  2  3  4  5  6\n-      -7 -6 -5 -4 -3 -2 -1\n```\n\nindex 可以留空一个, 表示从另一个开始一直取到末尾(或头部).\n\n```py\nprint(str[2:]) # 打印 'cdefg\\n' 从c开始向末尾\nprint(str[:4]) # 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)\n```\n\n无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.\n\n```py\n# 对照着上面那个表看\nprint(str[1:6])\nprint(str[-6:6])\nprint(str[1:-1])\n# 都打印 'bcdef\\n'\n\nprint(str[0:5])\nprint(str[:5])\nprint(str[:-2])\n# 都打印 'abcde\\n'\n# ... 以此类推\n```\n\n### 字符串的\"运算\"\n\nPython 中的字符串参与运算:\n\n- `\"str1\" + \"str2\"` 拼接一个新的字符串 `\"str1str2\"`.\n- `\"str\"*int` 重复一个字符串 `int` 次. 例如 `\"str\"*3` == `\"strstrstr\"` \n\n# 数据类型转换\n\n## `int()`\n\n`help(int())`:\n\n```py\nclass int(object)\n |  int([x]) -> integer\n |  int(x, base=10) -> integer\n |\n |  Convert a number or string to an integer, or return 0 if no arguments\n |  are given.  If x is a number, return x.__int__().  For floating point\n |  numbers, this truncates towards zero.\n |\n |  If x is not a number or if base is given, then x must be a string,\n |  bytes, or bytearray instance representing an integer literal in the\n |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n |  Base 0 means to interpret the base from the string as an integer literal.\n```\n\n- `int()` 可接受的参数有:\n  - `x` 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.\n  - `base` 表示转换时依据的进制基数, 默认 10 进制.\n- 若 `x` 是一个整数, 返回其自身.\n- 若 `x` 是一个浮点数, 其小数部分会被砍掉.\n- 若 `x` 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符. \n  - 默认基数为 `base=10`, 可接受的基数值为 0 或 从 2 到 36. \n    - 就是说 10 进制下只能有 `0123456789`, 十六进制下可以有 `0123456789abcdef`, 最高可以在 36 进制下用 `z` 表示 `35`.\n    - `base=0` 的情况下, 根据字符串内容猜测进制. 但适用情况较少:\n      - `0x10` 会被识别为 16 进制的 `16`.\n      - `f`    会被识别为 16 进制的 `15`.\n      - `0o10` 会被识别为 8 进制的 `8`. (零后面是小写的字母O)\n      - `29134` 会被识别为 10 进制.\n      - `01423` 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 `0`.\n      - 只能从 `16` `8` `10` 中猜测.\n  - 字符串中可以在前面有 `+ -` 正负号. 也可以在两侧有空格.\n  - **规定了基数 `base` 时, 必须输入字符串.**\n\n## `float()`\n\n`help(float())`:\n\n```py\nclass float(object)\n |  float(x=0, /)\n |\n |  Convert a string or number to a floating point number, if possible.\n```\n\nTODO: 文档说得这么简洁, 我也没啥好说的... 只能用多了再来说说感受了...\n\n- `float.hex()` 返回一个用 16 进制表示的浮点数.\n- `float.fromhex()` 从字符串转换一个 16 进制的浮点数. 形式为 `0xf.fp+1` 用 `p` 表示 16 为底的指数.\n\n## `complex()`\n\n`help(complex())`:\n\n```py\nclass complex(object)\n |  complex(real=0, imag=0)\n |\n |  Create a complex number from a real part and an optional imaginary part.\n |\n |  This is equivalent to (real + imag*1j) where imag defaults to 0.\n```\n\n## `str()`\n\n```py\nclass str(object)\n |  str(object='') -> str\n |  str(bytes_or_buffer[, encoding[, errors]]) -> str\n |  \n |  Create a new string object from the given object. If encoding or\n |  errors is specified, then the object must expose a data buffer\n |  that will be decoded using the given encoding and error handler.\n |  Otherwise, returns the result of object.__str__() (if defined)\n |  or repr(object).\n |  encoding defaults to sys.getdefaultencoding().\n |  errors defaults to 'strict'.\n```\n\n大意是说:\n\n- 从给定对象创建一个新的字符串对象. 如果指定了 `encoding` 或 `errors`, 则必须公开 `bytes_or_buffer` 来编码字符串和处理错误信息.\n- `str()` 可接受的参数有:\n  - `object` 被转换的对象.\n  - `bytes_or_buffer` 字节或缓冲区.\n  - `encoding` 字符编码, 默认值由 `sys.getdefaultencoding()` 获得, 一般为 `utf-8`\n  - `errors` 错误策略. 默认为 `strict`.\n\n## 其他\n\n- `hex()` 将整数转换为其 16 进制形式的字符串.\n- `oct()` 将整数转换未其  8 进制形式的字符串.\n- `chr()` 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 `0<=i<=0x10ffff`.\n- `ord()` 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .\n- `repr()` 类似 `str()` 但返回的是一个字符串表达式.\n\n```py\n>>> repr('string')\n\"'string'\"\n>>> str('string')\n'string'\n```","slug":"pynote-python中的数字与字符串","published":1,"updated":"2018-08-23T17:45:21.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m001xw8lk2tm41qwk","content":"<ul>\r\n<li>数字</li>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n<li>字符串</li>\r\n</ul>\r\n<blockquote>\r\n<p>可以使用 Python 内建函数 <code>type()</code> 来查看一个数据的类型</p>\r\n</blockquote>\r\n<a id=\"more\"></a>\r\n<h1 id=\"基本数据类型\">基本数据类型</h1>\r\n<h2 id=\"整数-int\">整数-int</h2>\r\n<p>Python 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.</p>\r\n<p>整数的相关信息可以从 <code>sys.int_info</code> 获得</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.int_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.int_info(           <span class=\"comment\"># 长整数是普通整数的组合</span></span><br><span class=\"line\">  bits_per_digit=<span class=\"number\">30</span>,    <span class=\"comment\"># 每个整数占用 30 个 bit. </span></span><br><span class=\"line\">  sizeof_digit=<span class=\"number\">4</span>        <span class=\"comment\"># 每个整数占用 4 个 byte (32 bit) 的内存空间.</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 为啥差 2 bit 呢?</p>\r\n<h3 id=\"布尔数-bool\">布尔数-bool</h3>\r\n<p>布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 <code>0</code>, <code>1</code> (二进制). 在 Python 中, 还可以用 <code>True</code>(1) <code>False</code>(0) 来表示它们.</p>\r\n<h2 id=\"浮点数-float\">浮点数-float</h2>\r\n<p>所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.</p>\r\n<ul>\r\n<li>首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.</li>\r\n<li>其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.</li>\r\n<li>这里随便尝试了一下:</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.0000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0000000000000007</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.00000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\r\n<p>浮点数的相关信息可以从 <code>sys.float_info</code> 对象获得.</p>\r\n<p><a href=\"https://docs.python.org/3/library/sys.html#sys.float_info\" target=\"_blank\" rel=\"noopener\">Python 官方文档 对 sys.float_info 的解释</a></p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.float_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.float_info(         <span class=\"comment\"># 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.</span></span><br><span class=\"line\">  max=<span class=\"number\">1.7976931348623157e+308</span>,  <span class=\"comment\"># 可表示的最大正数</span></span><br><span class=\"line\">  max_exp=<span class=\"number\">1024</span>,                 <span class=\"comment\"># &lt; 2**1024</span></span><br><span class=\"line\">  max_10_exp=<span class=\"number\">308</span>,               <span class=\"comment\"># 十进制时可正常处理的最大指数</span></span><br><span class=\"line\">  min=<span class=\"number\">2.2250738585072014e-308</span>,  <span class=\"comment\"># 可表示的最小正数</span></span><br><span class=\"line\">  min_exp=<span class=\"number\">-1021</span>,                <span class=\"comment\"># &gt; 2**-1021</span></span><br><span class=\"line\">  min_10_exp=<span class=\"number\">-307</span>,              <span class=\"comment\"># 十进制时可正常处理的最小指数</span></span><br><span class=\"line\">  dig=<span class=\"number\">15</span>,                       <span class=\"comment\"># 十进制下可正常处理的最大小数位数</span></span><br><span class=\"line\">  mant_dig=<span class=\"number\">53</span>,                  <span class=\"comment\"># 浮动精度, 二进制下表示有效数字的 bit 位数.</span></span><br><span class=\"line\">  epsilon=<span class=\"number\">2.220446049250313e-16</span>,<span class=\"comment\"># 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)</span></span><br><span class=\"line\">  radix=<span class=\"number\">2</span>,                      <span class=\"comment\"># \"基数\" 即指数部分的 \"底数\".</span></span><br><span class=\"line\">  rounds=<span class=\"number\">1</span>                      <span class=\"comment\"># 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>对于一个</p>\r\n<h2 id=\"复数-complex\">复数-complex</h2>\r\n<ul>\r\n<li>复数的概念与数学上的一致, 由 <code>实部+虚部j</code> 表示. 但是这里虚数单位的表示法是 <code>j</code> 不是 <code>i</code> , 需要注意别搞混淆了.</li>\r\n<li>复数的实部与虚部都是浮点数.</li>\r\n<li>可以使用 <code>complex.real</code> 和 <code>complex.imag</code> 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test = <span class=\"number\">1.0</span> + <span class=\"number\">89.0j</span></span><br><span class=\"line\">print(str(test), end=<span class=\"string\">'='</span>)</span><br><span class=\"line\">print(str(test.real), end=<span class=\"string\">'+'</span>)</span><br><span class=\"line\">print(str(test.imag)+<span class=\"string\">'j'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>输出为</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">89j</span>)=<span class=\"number\">1.0</span>+<span class=\"number\">89.0j</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"字符串-str\">字符串-str</h2>\r\n<ul>\r\n<li>Python 字符串用 <code>&quot;字符串&quot;</code> 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 <code>\\</code> 反斜杠转义 <code>\\&quot;</code>.</li>\r\n<li>如果需要在字符串中表示反斜杠, 可以使用 <code>\\\\</code> 对反斜杠转义, 也可以使用 <code>r&quot;不用\\转义的原始字符串&quot;</code> 在引号外使用字母 <code>r</code>.</li>\r\n<li>如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 <code>u</code>. <code>u&quot;这是一个\\u0020字符&quot;</code> (020是空格).</li>\r\n<li>如果要将字符串转化为 <code>byte-like</code> 对象, 在引号外使用字母 <code>b</code>.</li>\r\n<li>Python 的字符串也可以使用成对的三引号<code>&quot;&quot;&quot;超级多的字符&quot;&quot;&quot;</code>. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"\"\"测试三引号</span></span><br><span class=\"line\"><span class=\"string\">包裹的字符</span></span><br><span class=\"line\"><span class=\"string\">    是啥样的?</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(repr(string))</span><br></pre></td></tr></table></figure>\r\n<p>输出了 <code>'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'</code> 可以看到, 特殊字符被识别并转换为对应的转义字符了.</p>\r\n<ul>\r\n<li>Python 没有单独的 &quot;字符&quot; 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.</li>\r\n<li>Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.</li>\r\n<li>Python 可用 <code>%</code> 符号表示格式化字符串. <strong>其右侧本质上是一个元组(tuple)</strong></li>\r\n</ul>\r\n<h3 id=\"格式化字符串\">格式化字符串</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>格式符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>%c</code></td>\r\n<td>字符及其 ASCII 码</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%s</code></td>\r\n<td>字符串</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%d</code></td>\r\n<td>整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%o</code></td>\r\n<td>八进制整数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%x</code></td>\r\n<td>十六进制整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%X</code></td>\r\n<td>十六进制整数(字母大写)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%f</code></td>\r\n<td>小数表示的浮点数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%e</code></td>\r\n<td>科学记数法表示的浮点数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%E</code></td>\r\n<td>科学记数法表示的浮点数(字母大写)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%g</code></td>\r\n<td>从 <code>%e</code> 和 <code>%f</code> 中选择输出短的</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%G</code></td>\r\n<td>从 <code>%E</code> 和 <code>%F</code> 中选择输出短的</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>传递多个格式化字符串需要使用 <code>()</code> 圆括号将参数括起来. 然后在内部用 <code>,</code> 逗号划分各参数. <strong>元组</strong></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">test2 = <span class=\"string\">\"HELLO\"</span></span><br><span class=\"line\">test3 = <span class=\"string\">\"WoRlD\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"%s(%s) %s!\"</span>%(test1,test2,test3))</span><br></pre></td></tr></table></figure>\r\n<p>输出:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(HELLO) WoRlD!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>另一种格式化方法为 <code>&quot;{}{}&quot;.format(a,b)</code> 对字符串调用 <code>format()</code> 方法.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"number\">1</span></span><br><span class=\"line\">test2 = <span class=\"number\">3.14</span></span><br><span class=\"line\">test3 = <span class=\"string\">'哈哈哈'</span></span><br><span class=\"line\"><span class=\"comment\"># 按顺序</span></span><br><span class=\"line\">print(<span class=\"string\">\"按顺序:&#123;&#125;,&#123;&#125;,&#123;&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按索引号</span></span><br><span class=\"line\">print(<span class=\"string\">\"按索引号:&#123;2&#125;,&#123;1&#125;,&#123;0&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按参数名</span></span><br><span class=\"line\">print(<span class=\"string\">\"按参数名:&#123;a&#125;,&#123;c&#125;,&#123;b&#125;\"</span>.format(a=test1, b=test2, c=test3))</span><br></pre></td></tr></table></figure>\r\n<p>对格式化字符可以使用修饰符</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>修饰符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>#</code></td>\r\n<td>十六进制前添<code>0x</code>, 八进制前添<code>0</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>+</code></td>\r\n<td>在数字前添加正负号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>m.n</code></td>\r\n<td><code>m</code>表示显示数字的总位数(整数部分+小数部分); <code>n</code> 表示保留小数点的位数, 若 <code>m</code> 的条件已达到, 则 <code>n</code> 将被忽略.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>0</code></td>\r\n<td>数字前填0, 默认空格</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>-</code></td>\r\n<td>左对齐, 默认右对齐</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"字符串的截取与分段\">字符串的截取与分段</h3>\r\n<p>一个字符串变量, 实质上可以视作一个由字符拼接起来的 &quot;元组&quot;, 可以在变量名后用 <code>[index]</code> 提取其中的一个元素, 或者使用 <code>[index1:index2]</code> 提取其中一段, 注意有一个 <strong>要头不要腚</strong> 的规则.</p>\r\n<blockquote>\r\n<p>我突然想到用这个字符串来做例子也许会更形象...</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">\"_(:з」∠)_\"</span>    <span class=\"comment\"># 要头不要腚</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\r\n</blockquote>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"abcdefg\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>) <span class=\"comment\"># i = 0,1,2,3,4,5,6</span></span><br><span class=\"line\">    print(str[i], end=<span class=\"string\">':index(%d)|'</span>%(i))</span><br><span class=\"line\">print() <span class=\"comment\"># 换行</span></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">2</span>]) <span class=\"comment\"># 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).</span></span><br></pre></td></tr></table></figure>\r\n<p>index 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str     a  b  c  d  e  f  g</span><br><span class=\"line\">+       0  1  2  3  4  5  6</span><br><span class=\"line\">-      -7 -6 -5 -4 -3 -2 -1</span><br></pre></td></tr></table></figure>\r\n<p>index 可以留空一个, 表示从另一个开始一直取到末尾(或头部).</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(str[<span class=\"number\">2</span>:]) <span class=\"comment\"># 打印 'cdefg\\n' 从c开始向末尾</span></span><br><span class=\"line\">print(str[:<span class=\"number\">4</span>]) <span class=\"comment\"># 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)</span></span><br></pre></td></tr></table></figure>\r\n<p>无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对照着上面那个表看</span></span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">-6</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'bcdef\\n'</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">-2</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'abcde\\n'</span></span><br><span class=\"line\"><span class=\"comment\"># ... 以此类推</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"字符串的运算\">字符串的&quot;运算&quot;</h3>\r\n<p>Python 中的字符串参与运算:</p>\r\n<ul>\r\n<li><code>&quot;str1&quot; + &quot;str2&quot;</code> 拼接一个新的字符串 <code>&quot;str1str2&quot;</code>.</li>\r\n<li><code>&quot;str&quot;*int</code> 重复一个字符串 <code>int</code> 次. 例如 <code>&quot;str&quot;*3</code> == <code>&quot;strstrstr&quot;</code></li>\r\n</ul>\r\n<h1 id=\"数据类型转换\">数据类型转换</h1>\r\n<h2 id=\"int\"><code>int()</code></h2>\r\n<p><code>help(int())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">int</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">int</span><span class=\"params\">([x])</span> -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |  int(x, base=10) -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  Convert a number or string to an integer, or return 0 if no arguments</span></span><br><span class=\"line\"><span class=\"class\"> |  are given.  If x is a number, return x.__int__().  For floating point</span></span><br><span class=\"line\"><span class=\"class\"> |  numbers, this truncates towards zero.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  If x is not a number or if base is given, then x must be a string,</span></span><br><span class=\"line\"><span class=\"class\"> |  bytes, or bytearray instance representing an integer literal in the</span></span><br><span class=\"line\"><span class=\"class\"> |  given base.  The literal can be preceded by '+' or '-' and be surrounded</span></span><br><span class=\"line\"><span class=\"class\"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span></span><br><span class=\"line\"><span class=\"class\"> |  Base 0 means to interpret the base from the string as an integer literal.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>int()</code> 可接受的参数有:</li>\r\n<li><code>x</code> 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.</li>\r\n<li><code>base</code> 表示转换时依据的进制基数, 默认 10 进制.</li>\r\n<li>若 <code>x</code> 是一个整数, 返回其自身.</li>\r\n<li>若 <code>x</code> 是一个浮点数, 其小数部分会被砍掉.</li>\r\n<li>若 <code>x</code> 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符.</li>\r\n<li>默认基数为 <code>base=10</code>, 可接受的基数值为 0 或 从 2 到 36.\r\n<ul>\r\n<li>就是说 10 进制下只能有 <code>0123456789</code>, 十六进制下可以有 <code>0123456789abcdef</code>, 最高可以在 36 进制下用 <code>z</code> 表示 <code>35</code>.</li>\r\n<li><code>base=0</code> 的情况下, 根据字符串内容猜测进制. 但适用情况较少:</li>\r\n<li><code>0x10</code> 会被识别为 16 进制的 <code>16</code>.</li>\r\n<li><code>f</code> 会被识别为 16 进制的 <code>15</code>.</li>\r\n<li><code>0o10</code> 会被识别为 8 进制的 <code>8</code>. (零后面是小写的字母O)</li>\r\n<li><code>29134</code> 会被识别为 10 进制.</li>\r\n<li><code>01423</code> 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 <code>0</code>.</li>\r\n<li>只能从 <code>16</code> <code>8</code> <code>10</code> 中猜测.</li>\r\n</ul></li>\r\n<li>字符串中可以在前面有 <code>+ -</code> 正负号. 也可以在两侧有空格.</li>\r\n<li><strong>规定了基数 <code>base</code> 时, 必须输入字符串.</strong></li>\r\n</ul>\r\n<h2 id=\"float\"><code>float()</code></h2>\r\n<p><code>help(float())</code>:</p>\r\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">float</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">float</span><span class=\"params\">(x=<span class=\"number\">0</span>, /)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"> |  Convert a string or number to a floating point number, if possible.</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 文档说得这么简洁, 我也没啥好说的... 只能用多了再来说说感受了...</p>\r\n<ul>\r\n<li><code>float.hex()</code> 返回一个用 16 进制表示的浮点数.</li>\r\n<li><code>float.fromhex()</code> 从字符串转换一个 16 进制的浮点数. 形式为 <code>0xf.fp+1</code> 用 <code>p</code> 表示 16 为底的指数.</li>\r\n</ul>\r\n<h2 id=\"complex\"><code>complex()</code></h2>\r\n<p><code>help(complex())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">complex</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">complex</span><span class=\"params\">(real=<span class=\"number\">0</span>, imag=<span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">Create</span> <span class=\"title\">a</span> <span class=\"title\">complex</span> <span class=\"title\">number</span> <span class=\"title\">from</span> <span class=\"title\">a</span> <span class=\"title\">real</span> <span class=\"title\">part</span> <span class=\"title\">and</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">imaginary</span> <span class=\"title\">part</span>.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">This</span> <span class=\"title\">is</span> <span class=\"title\">equivalent</span> <span class=\"title\">to</span> <span class=\"params\">(real + imag*<span class=\"number\">1j</span>)</span> <span class=\"title\">where</span> <span class=\"title\">imag</span> <span class=\"title\">defaults</span> <span class=\"title\">to</span> 0.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"str\"><code>str()</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">str</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">str</span><span class=\"params\">(object=<span class=\"string\">''</span>)</span> -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  </span></span><br><span class=\"line\"><span class=\"class\"> |  Create a new string object from the given object. If encoding or</span></span><br><span class=\"line\"><span class=\"class\"> |  errors is specified, then the object must expose a data buffer</span></span><br><span class=\"line\"><span class=\"class\"> |  that will be decoded using the given encoding and error handler.</span></span><br><span class=\"line\"><span class=\"class\"> |  Otherwise, returns the result of object.__str__() (if defined)</span></span><br><span class=\"line\"><span class=\"class\"> |  or repr(object).</span></span><br><span class=\"line\"><span class=\"class\"> |  encoding defaults to sys.getdefaultencoding().</span></span><br><span class=\"line\"><span class=\"class\"> |  errors defaults to 'strict'.</span></span><br></pre></td></tr></table></figure>\r\n<p>大意是说:</p>\r\n<ul>\r\n<li>从给定对象创建一个新的字符串对象. 如果指定了 <code>encoding</code> 或 <code>errors</code>, 则必须公开 <code>bytes_or_buffer</code> 来编码字符串和处理错误信息.</li>\r\n<li><code>str()</code> 可接受的参数有:</li>\r\n<li><code>object</code> 被转换的对象.</li>\r\n<li><code>bytes_or_buffer</code> 字节或缓冲区.</li>\r\n<li><code>encoding</code> 字符编码, 默认值由 <code>sys.getdefaultencoding()</code> 获得, 一般为 <code>utf-8</code></li>\r\n<li><code>errors</code> 错误策略. 默认为 <code>strict</code>.</li>\r\n</ul>\r\n<h2 id=\"其他\">其他</h2>\r\n<ul>\r\n<li><code>hex()</code> 将整数转换为其 16 进制形式的字符串.</li>\r\n<li><code>oct()</code> 将整数转换未其 8 进制形式的字符串.</li>\r\n<li><code>chr()</code> 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 <code>0&lt;=i&lt;=0x10ffff</code>.</li>\r\n<li><code>ord()</code> 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .</li>\r\n<li><code>repr()</code> 类似 <code>str()</code> 但返回的是一个字符串表达式.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>repr(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">\"'string'\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<ul>\r\n<li>数字</li>\r\n<li>整数</li>\r\n<li>浮点数</li>\r\n<li>复数</li>\r\n<li>字符串</li>\r\n</ul>\r\n<blockquote>\r\n<p>可以使用 Python 内建函数 <code>type()</code> 来查看一个数据的类型</p>\r\n</blockquote>","more":"<h1 id=\"基本数据类型\">基本数据类型</h1>\r\n<h2 id=\"整数-int\">整数-int</h2>\r\n<p>Python 中的整数与长整数没有什么区别 (Python3). 因为 Python3 会自动地处理整数的存储方式, 将整型与长整型互换. 从理论上讲, Python 中的整数的位数可以是无限长, 但实际上, 会受到内存空间的限制.</p>\r\n<p>整数的相关信息可以从 <code>sys.int_info</code> 获得</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.int_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.int_info(           <span class=\"comment\"># 长整数是普通整数的组合</span></span><br><span class=\"line\">  bits_per_digit=<span class=\"number\">30</span>,    <span class=\"comment\"># 每个整数占用 30 个 bit. </span></span><br><span class=\"line\">  sizeof_digit=<span class=\"number\">4</span>        <span class=\"comment\"># 每个整数占用 4 个 byte (32 bit) 的内存空间.</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 为啥差 2 bit 呢?</p>\r\n<h3 id=\"布尔数-bool\">布尔数-bool</h3>\r\n<p>布尔数是整数的一个子集. 它其实就是只有一个 bit 的整数. 其取值只有 <code>0</code>, <code>1</code> (二进制). 在 Python 中, 还可以用 <code>True</code>(1) <code>False</code>(0) 来表示它们.</p>\r\n<h2 id=\"浮点数-float\">浮点数-float</h2>\r\n<p>所谓的浮点数, 就是一种表示小数或按科学记数法记录的数字的数据类型. 计算机处理它和整数的方法有很大的区别.</p>\r\n<ul>\r\n<li>首先, 浮点数的位数不可能无限. 或者说, 浮点数的分布不是稠密的. 它不能和数学上的实数等价.</li>\r\n<li>其次, 浮点数的存储方法依然是二进制, 而人类所使用的十进制的基数是 $ 10=2 \\times 5 $ , 有个质因子, 因此, 浮点数在表现数字的时候, 总是会有无法避免的误差, 导致错误的四舍五入. 例如, 可以试一试将一个超出浮点数存储范围的小数赋值给一个变量, 会发现超出的部分直接消失了; 若将一个无法用二进制表示的十进制数赋值给变量, 会发现莫名的误差.</li>\r\n<li>这里随便尝试了一下:</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.0000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0000000000000007</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1.00000000000000006</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a)</span><br><span class=\"line\"><span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\r\n<p>浮点数的相关信息可以从 <code>sys.float_info</code> 对象获得.</p>\r\n<p><a href=\"https://docs.python.org/3/library/sys.html#sys.float_info\" target=\"_blank\" rel=\"noopener\">Python 官方文档 对 sys.float_info 的解释</a></p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">print(sys.float_info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是经过整理的输出信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">sys.float_info(         <span class=\"comment\"># 浮点数是以 2 进制储存的, 在需要时与 10 进制互相转换.</span></span><br><span class=\"line\">  max=<span class=\"number\">1.7976931348623157e+308</span>,  <span class=\"comment\"># 可表示的最大正数</span></span><br><span class=\"line\">  max_exp=<span class=\"number\">1024</span>,                 <span class=\"comment\"># &lt; 2**1024</span></span><br><span class=\"line\">  max_10_exp=<span class=\"number\">308</span>,               <span class=\"comment\"># 十进制时可正常处理的最大指数</span></span><br><span class=\"line\">  min=<span class=\"number\">2.2250738585072014e-308</span>,  <span class=\"comment\"># 可表示的最小正数</span></span><br><span class=\"line\">  min_exp=<span class=\"number\">-1021</span>,                <span class=\"comment\"># &gt; 2**-1021</span></span><br><span class=\"line\">  min_10_exp=<span class=\"number\">-307</span>,              <span class=\"comment\"># 十进制时可正常处理的最小指数</span></span><br><span class=\"line\">  dig=<span class=\"number\">15</span>,                       <span class=\"comment\"># 十进制下可正常处理的最大小数位数</span></span><br><span class=\"line\">  mant_dig=<span class=\"number\">53</span>,                  <span class=\"comment\"># 浮动精度, 二进制下表示有效数字的 bit 位数.</span></span><br><span class=\"line\">  epsilon=<span class=\"number\">2.220446049250313e-16</span>,<span class=\"comment\"># 十进制下 与 1 \"相邻\" 的浮点数与 1 的差. (浮点数的数量级不同, 这个值也不同, 详情...)</span></span><br><span class=\"line\">  radix=<span class=\"number\">2</span>,                      <span class=\"comment\"># \"基数\" 即指数部分的 \"底数\".</span></span><br><span class=\"line\">  rounds=<span class=\"number\">1</span>                      <span class=\"comment\"># 用于表示算术运算的舍入模式, 详情参见 C99 标准的5.2.4.2.2节</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\r\n<p>对于一个</p>\r\n<h2 id=\"复数-complex\">复数-complex</h2>\r\n<ul>\r\n<li>复数的概念与数学上的一致, 由 <code>实部+虚部j</code> 表示. 但是这里虚数单位的表示法是 <code>j</code> 不是 <code>i</code> , 需要注意别搞混淆了.</li>\r\n<li>复数的实部与虚部都是浮点数.</li>\r\n<li>可以使用 <code>complex.real</code> 和 <code>complex.imag</code> 分别取出复数的实部与虚部. (这里的 complex 是一个类型为复数的变量的变量名)</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test = <span class=\"number\">1.0</span> + <span class=\"number\">89.0j</span></span><br><span class=\"line\">print(str(test), end=<span class=\"string\">'='</span>)</span><br><span class=\"line\">print(str(test.real), end=<span class=\"string\">'+'</span>)</span><br><span class=\"line\">print(str(test.imag)+<span class=\"string\">'j'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>输出为</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">89j</span>)=<span class=\"number\">1.0</span>+<span class=\"number\">89.0j</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"字符串-str\">字符串-str</h2>\r\n<ul>\r\n<li>Python 字符串用 <code>&quot;字符串&quot;</code> 引号括起来, 可以使用双引号也可以使用单引号. 双引号中可以嵌套单引号, 反过来也一样. 但如果要在双引号中表示双引号, 需要用 <code>\\</code> 反斜杠转义 <code>\\&quot;</code>.</li>\r\n<li>如果需要在字符串中表示反斜杠, 可以使用 <code>\\\\</code> 对反斜杠转义, 也可以使用 <code>r&quot;不用\\转义的原始字符串&quot;</code> 在引号外使用字母 <code>r</code>.</li>\r\n<li>如果需要在字符串中使用 Unicode 编码插入 Unicode 字符, 可以在引号外使用字母 <code>u</code>. <code>u&quot;这是一个\\u0020字符&quot;</code> (020是空格).</li>\r\n<li>如果要将字符串转化为 <code>byte-like</code> 对象, 在引号外使用字母 <code>b</code>.</li>\r\n<li>Python 的字符串也可以使用成对的三引号<code>&quot;&quot;&quot;超级多的字符&quot;&quot;&quot;</code>. 这种方法标识的字符串中可以包含换行, 指标符和其他特殊字符.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"\"\"测试三引号</span></span><br><span class=\"line\"><span class=\"string\">包裹的字符</span></span><br><span class=\"line\"><span class=\"string\">    是啥样的?</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(repr(string))</span><br></pre></td></tr></table></figure>\r\n<p>输出了 <code>'测试三引号\\n包裹的字符\\n\\t是啥样的?\\n'</code> 可以看到, 特殊字符被识别并转换为对应的转义字符了.</p>\r\n<ul>\r\n<li>Python 没有单独的 &quot;字符&quot; 类型, 只有字符串. 但字符串中可以只有 1 个甚至 0 个字符.</li>\r\n<li>Python 字符串是只读的. 要更改, 可以创建并赋值一个新的字符串变量.</li>\r\n<li>Python 可用 <code>%</code> 符号表示格式化字符串. <strong>其右侧本质上是一个元组(tuple)</strong></li>\r\n</ul>\r\n<h3 id=\"格式化字符串\">格式化字符串</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>格式符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>%c</code></td>\r\n<td>字符及其 ASCII 码</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%s</code></td>\r\n<td>字符串</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%d</code></td>\r\n<td>整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%o</code></td>\r\n<td>八进制整数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%x</code></td>\r\n<td>十六进制整数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%X</code></td>\r\n<td>十六进制整数(字母大写)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%f</code></td>\r\n<td>小数表示的浮点数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%e</code></td>\r\n<td>科学记数法表示的浮点数</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%E</code></td>\r\n<td>科学记数法表示的浮点数(字母大写)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>%g</code></td>\r\n<td>从 <code>%e</code> 和 <code>%f</code> 中选择输出短的</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>%G</code></td>\r\n<td>从 <code>%E</code> 和 <code>%F</code> 中选择输出短的</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>传递多个格式化字符串需要使用 <code>()</code> 圆括号将参数括起来. 然后在内部用 <code>,</code> 逗号划分各参数. <strong>元组</strong></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">test2 = <span class=\"string\">\"HELLO\"</span></span><br><span class=\"line\">test3 = <span class=\"string\">\"WoRlD\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"%s(%s) %s!\"</span>%(test1,test2,test3))</span><br></pre></td></tr></table></figure>\r\n<p>输出:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello(HELLO) WoRlD!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>另一种格式化方法为 <code>&quot;{}{}&quot;.format(a,b)</code> 对字符串调用 <code>format()</code> 方法.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1 = <span class=\"number\">1</span></span><br><span class=\"line\">test2 = <span class=\"number\">3.14</span></span><br><span class=\"line\">test3 = <span class=\"string\">'哈哈哈'</span></span><br><span class=\"line\"><span class=\"comment\"># 按顺序</span></span><br><span class=\"line\">print(<span class=\"string\">\"按顺序:&#123;&#125;,&#123;&#125;,&#123;&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按索引号</span></span><br><span class=\"line\">print(<span class=\"string\">\"按索引号:&#123;2&#125;,&#123;1&#125;,&#123;0&#125;\"</span>.format(test1,test2,test3))</span><br><span class=\"line\"><span class=\"comment\"># 按参数名</span></span><br><span class=\"line\">print(<span class=\"string\">\"按参数名:&#123;a&#125;,&#123;c&#125;,&#123;b&#125;\"</span>.format(a=test1, b=test2, c=test3))</span><br></pre></td></tr></table></figure>\r\n<p>对格式化字符可以使用修饰符</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>修饰符</th>\r\n<th>含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><code>#</code></td>\r\n<td>十六进制前添<code>0x</code>, 八进制前添<code>0</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>+</code></td>\r\n<td>在数字前添加正负号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>m.n</code></td>\r\n<td><code>m</code>表示显示数字的总位数(整数部分+小数部分); <code>n</code> 表示保留小数点的位数, 若 <code>m</code> 的条件已达到, 则 <code>n</code> 将被忽略.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><code>0</code></td>\r\n<td>数字前填0, 默认空格</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><code>-</code></td>\r\n<td>左对齐, 默认右对齐</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"字符串的截取与分段\">字符串的截取与分段</h3>\r\n<p>一个字符串变量, 实质上可以视作一个由字符拼接起来的 &quot;元组&quot;, 可以在变量名后用 <code>[index]</code> 提取其中的一个元素, 或者使用 <code>[index1:index2]</code> 提取其中一段, 注意有一个 <strong>要头不要腚</strong> 的规则.</p>\r\n<blockquote>\r\n<p>我突然想到用这个字符串来做例子也许会更形象...</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">\"_(:з」∠)_\"</span>    <span class=\"comment\"># 要头不要腚</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\r\n</blockquote>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"abcdefg\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>) <span class=\"comment\"># i = 0,1,2,3,4,5,6</span></span><br><span class=\"line\">    print(str[i], end=<span class=\"string\">':index(%d)|'</span>%(i))</span><br><span class=\"line\">print() <span class=\"comment\"># 换行</span></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">2</span>]) <span class=\"comment\"># 打印 'ab\\n'  (文雅点说\"宁左毋右\"吧).</span></span><br></pre></td></tr></table></figure>\r\n<p>index 号可以为非负数, 代表从左到右的索引号; 也可以为负数, 代表从右到左的索引号.</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str     a  b  c  d  e  f  g</span><br><span class=\"line\">+       0  1  2  3  4  5  6</span><br><span class=\"line\">-      -7 -6 -5 -4 -3 -2 -1</span><br></pre></td></tr></table></figure>\r\n<p>index 可以留空一个, 表示从另一个开始一直取到末尾(或头部).</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(str[<span class=\"number\">2</span>:]) <span class=\"comment\"># 打印 'cdefg\\n' 从c开始向末尾</span></span><br><span class=\"line\">print(str[:<span class=\"number\">4</span>]) <span class=\"comment\"># 打印 'abcd\\n'  从d开始向头部 (仍然不要腚)</span></span><br></pre></td></tr></table></figure>\r\n<p>无论正负, index 都是一个对字符位置的索引号而已. 所以它的大小关系和一般整数无关. 因此, 以下这些输出都是一样的.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对照着上面那个表看</span></span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">-6</span>:<span class=\"number\">6</span>])</span><br><span class=\"line\">print(str[<span class=\"number\">1</span>:<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'bcdef\\n'</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">5</span>])</span><br><span class=\"line\">print(str[:<span class=\"number\">-2</span>])</span><br><span class=\"line\"><span class=\"comment\"># 都打印 'abcde\\n'</span></span><br><span class=\"line\"><span class=\"comment\"># ... 以此类推</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"字符串的运算\">字符串的&quot;运算&quot;</h3>\r\n<p>Python 中的字符串参与运算:</p>\r\n<ul>\r\n<li><code>&quot;str1&quot; + &quot;str2&quot;</code> 拼接一个新的字符串 <code>&quot;str1str2&quot;</code>.</li>\r\n<li><code>&quot;str&quot;*int</code> 重复一个字符串 <code>int</code> 次. 例如 <code>&quot;str&quot;*3</code> == <code>&quot;strstrstr&quot;</code></li>\r\n</ul>\r\n<h1 id=\"数据类型转换\">数据类型转换</h1>\r\n<h2 id=\"int\"><code>int()</code></h2>\r\n<p><code>help(int())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">int</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">int</span><span class=\"params\">([x])</span> -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |  int(x, base=10) -&gt; integer</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  Convert a number or string to an integer, or return 0 if no arguments</span></span><br><span class=\"line\"><span class=\"class\"> |  are given.  If x is a number, return x.__int__().  For floating point</span></span><br><span class=\"line\"><span class=\"class\"> |  numbers, this truncates towards zero.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  If x is not a number or if base is given, then x must be a string,</span></span><br><span class=\"line\"><span class=\"class\"> |  bytes, or bytearray instance representing an integer literal in the</span></span><br><span class=\"line\"><span class=\"class\"> |  given base.  The literal can be preceded by '+' or '-' and be surrounded</span></span><br><span class=\"line\"><span class=\"class\"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span></span><br><span class=\"line\"><span class=\"class\"> |  Base 0 means to interpret the base from the string as an integer literal.</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>int()</code> 可接受的参数有:</li>\r\n<li><code>x</code> 表示被转换的对象, 此参数未命名, 所以需要将对应实参放在参数表第一位.</li>\r\n<li><code>base</code> 表示转换时依据的进制基数, 默认 10 进制.</li>\r\n<li>若 <code>x</code> 是一个整数, 返回其自身.</li>\r\n<li>若 <code>x</code> 是一个浮点数, 其小数部分会被砍掉.</li>\r\n<li>若 <code>x</code> 是一个字符串, 会将字符串中的字符依据定义的基数转换为对应的整数. 且该字符串中不能有基数表示范围以外的字符.</li>\r\n<li>默认基数为 <code>base=10</code>, 可接受的基数值为 0 或 从 2 到 36.\r\n<ul>\r\n<li>就是说 10 进制下只能有 <code>0123456789</code>, 十六进制下可以有 <code>0123456789abcdef</code>, 最高可以在 36 进制下用 <code>z</code> 表示 <code>35</code>.</li>\r\n<li><code>base=0</code> 的情况下, 根据字符串内容猜测进制. 但适用情况较少:</li>\r\n<li><code>0x10</code> 会被识别为 16 进制的 <code>16</code>.</li>\r\n<li><code>f</code> 会被识别为 16 进制的 <code>15</code>.</li>\r\n<li><code>0o10</code> 会被识别为 8 进制的 <code>8</code>. (零后面是小写的字母O)</li>\r\n<li><code>29134</code> 会被识别为 10 进制.</li>\r\n<li><code>01423</code> 会被识别为 10 进制, 尽管没有任何大于 7 的数字, 在最前方也有个 <code>0</code>.</li>\r\n<li>只能从 <code>16</code> <code>8</code> <code>10</code> 中猜测.</li>\r\n</ul></li>\r\n<li>字符串中可以在前面有 <code>+ -</code> 正负号. 也可以在两侧有空格.</li>\r\n<li><strong>规定了基数 <code>base</code> 时, 必须输入字符串.</strong></li>\r\n</ul>\r\n<h2 id=\"float\"><code>float()</code></h2>\r\n<p><code>help(float())</code>:</p>\r\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">float</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">float</span><span class=\"params\">(x=<span class=\"number\">0</span>, /)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"> |  Convert a string or number to a floating point number, if possible.</span><br></pre></td></tr></table></figure>\r\n<p>TODO: 文档说得这么简洁, 我也没啥好说的... 只能用多了再来说说感受了...</p>\r\n<ul>\r\n<li><code>float.hex()</code> 返回一个用 16 进制表示的浮点数.</li>\r\n<li><code>float.fromhex()</code> 从字符串转换一个 16 进制的浮点数. 形式为 <code>0xf.fp+1</code> 用 <code>p</code> 表示 16 为底的指数.</li>\r\n</ul>\r\n<h2 id=\"complex\"><code>complex()</code></h2>\r\n<p><code>help(complex())</code>:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">complex</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">complex</span><span class=\"params\">(real=<span class=\"number\">0</span>, imag=<span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">Create</span> <span class=\"title\">a</span> <span class=\"title\">complex</span> <span class=\"title\">number</span> <span class=\"title\">from</span> <span class=\"title\">a</span> <span class=\"title\">real</span> <span class=\"title\">part</span> <span class=\"title\">and</span> <span class=\"title\">an</span> <span class=\"title\">optional</span> <span class=\"title\">imaginary</span> <span class=\"title\">part</span>.</span></span><br><span class=\"line\"><span class=\"class\"> |</span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">This</span> <span class=\"title\">is</span> <span class=\"title\">equivalent</span> <span class=\"title\">to</span> <span class=\"params\">(real + imag*<span class=\"number\">1j</span>)</span> <span class=\"title\">where</span> <span class=\"title\">imag</span> <span class=\"title\">defaults</span> <span class=\"title\">to</span> 0.</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"str\"><code>str()</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">str</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">str</span><span class=\"params\">(object=<span class=\"string\">''</span>)</span> -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span></span><br><span class=\"line\"><span class=\"class\"> |  </span></span><br><span class=\"line\"><span class=\"class\"> |  Create a new string object from the given object. If encoding or</span></span><br><span class=\"line\"><span class=\"class\"> |  errors is specified, then the object must expose a data buffer</span></span><br><span class=\"line\"><span class=\"class\"> |  that will be decoded using the given encoding and error handler.</span></span><br><span class=\"line\"><span class=\"class\"> |  Otherwise, returns the result of object.__str__() (if defined)</span></span><br><span class=\"line\"><span class=\"class\"> |  or repr(object).</span></span><br><span class=\"line\"><span class=\"class\"> |  encoding defaults to sys.getdefaultencoding().</span></span><br><span class=\"line\"><span class=\"class\"> |  errors defaults to 'strict'.</span></span><br></pre></td></tr></table></figure>\r\n<p>大意是说:</p>\r\n<ul>\r\n<li>从给定对象创建一个新的字符串对象. 如果指定了 <code>encoding</code> 或 <code>errors</code>, 则必须公开 <code>bytes_or_buffer</code> 来编码字符串和处理错误信息.</li>\r\n<li><code>str()</code> 可接受的参数有:</li>\r\n<li><code>object</code> 被转换的对象.</li>\r\n<li><code>bytes_or_buffer</code> 字节或缓冲区.</li>\r\n<li><code>encoding</code> 字符编码, 默认值由 <code>sys.getdefaultencoding()</code> 获得, 一般为 <code>utf-8</code></li>\r\n<li><code>errors</code> 错误策略. 默认为 <code>strict</code>.</li>\r\n</ul>\r\n<h2 id=\"其他\">其他</h2>\r\n<ul>\r\n<li><code>hex()</code> 将整数转换为其 16 进制形式的字符串.</li>\r\n<li><code>oct()</code> 将整数转换未其 8 进制形式的字符串.</li>\r\n<li><code>chr()</code> 将整数按 ASCII 转换为字符. 若整数值超出了 255 , 则按 Unicode 转换. 整数可以是 10, 8, 16 进制. 范围为 <code>0&lt;=i&lt;=0x10ffff</code>.</li>\r\n<li><code>ord()</code> 将字符 (单字符的字符串)转换为对应的 10 进制整数. 支持 Unicode .</li>\r\n<li><code>repr()</code> 类似 <code>str()</code> 但返回的是一个字符串表达式.</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>repr(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">\"'string'\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>"},{"title":"[PyNote]-2-Python控制结构","mathjax":false,"date":"2018-07-27T14:05:51.000Z","_content":"\n<!--more-->\n\n### 条件分支\n\n#### 单分支结构\n\n##### `if` 判断结构\n\n```py\nif condition:\n\tsentence1\n\tsentence2\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:` !\n\n#### 多分支结构\n\n##### `if ... else` 判断结构\n\n```py\nif condition:\n    True_block\nelse:\n    False_block\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 `else` 后的语句块.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:`!\n\n##### `if ... elif ... else` 判断结构\n\n```py\nif condition1:\n\tblock 1\nelif condition2:\n\tblock 2\nelif condition3:\n\tblock 3\n\t.\n\t.\nelse:\n\tdefault_block\n```\n\n- Python 检查 conditionX ( X = 1, 2, 3, ...) 的值, 若为 True 则执行 blockX, **执行该分支之后, 退出整个分支结构** (注意此处与 C 语言的 `switch` 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 `else` 为止.\n\n### 循环结构\n\n#### `while` 循环\n\n```py\nwhile condition:\n\tblock\n```\n\n#### `for` 循环\n\n```py\nfor element in list:\n\tblock\n```\n\n- `for` 循环会遍历每一个处于 list 中的元素, 执行语句块.\n\n#### 循环中起控制作用的关键字\n\n|关键字|作用|\n|:---:|:---|\n|`break`|结束当前循环|\n|`continue`|跳过后面语句, 进入下一次循环|\n|`else`|在循环执行完毕之后执行|\n\n- `else` 在循环中的使用举例:\n\n```py\na = 0\nwhile a < 10:\n\ta = a + 1\nelse:\n\tprint(\"The all done\")\n```","source":"_posts/pynote-python控制结构.md","raw":"---\ntitle: '[PyNote]-2-Python控制结构'\nmathjax: False\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-27 22:05:51\n---\n\n<!--more-->\n\n### 条件分支\n\n#### 单分支结构\n\n##### `if` 判断结构\n\n```py\nif condition:\n\tsentence1\n\tsentence2\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:` !\n\n#### 多分支结构\n\n##### `if ... else` 判断结构\n\n```py\nif condition:\n    True_block\nelse:\n    False_block\n```\n\n- Python 首先判断 `condition` 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 `else` 后的语句块.\n\t- 一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.\n- Python 以缩进相同且连续的多个语句为一个语句块.\n- 注意冒号 `:`!\n\n##### `if ... elif ... else` 判断结构\n\n```py\nif condition1:\n\tblock 1\nelif condition2:\n\tblock 2\nelif condition3:\n\tblock 3\n\t.\n\t.\nelse:\n\tdefault_block\n```\n\n- Python 检查 conditionX ( X = 1, 2, 3, ...) 的值, 若为 True 则执行 blockX, **执行该分支之后, 退出整个分支结构** (注意此处与 C 语言的 `switch` 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 `else` 为止.\n\n### 循环结构\n\n#### `while` 循环\n\n```py\nwhile condition:\n\tblock\n```\n\n#### `for` 循环\n\n```py\nfor element in list:\n\tblock\n```\n\n- `for` 循环会遍历每一个处于 list 中的元素, 执行语句块.\n\n#### 循环中起控制作用的关键字\n\n|关键字|作用|\n|:---:|:---|\n|`break`|结束当前循环|\n|`continue`|跳过后面语句, 进入下一次循环|\n|`else`|在循环执行完毕之后执行|\n\n- `else` 在循环中的使用举例:\n\n```py\na = 0\nwhile a < 10:\n\ta = a + 1\nelse:\n\tprint(\"The all done\")\n```","slug":"pynote-python控制结构","published":1,"updated":"2018-08-23T17:45:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m0020w8lkt6iqrnx8","content":"<a id=\"more\"></a>\r\n<h3 id=\"条件分支\">条件分支</h3>\r\n<h4 id=\"单分支结构\">单分支结构</h4>\r\n<h5 id=\"if-判断结构\"><code>if</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">\tsentence1</span><br><span class=\"line\">\tsentence2</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code> !</li>\r\n</ul>\r\n<h4 id=\"多分支结构\">多分支结构</h4>\r\n<h5 id=\"if-...-else-判断结构\"><code>if ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">    True_block</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    False_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 <code>else</code> 后的语句块.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code>!</li>\r\n</ul>\r\n<h5 id=\"if-...-elif-...-else-判断结构\"><code>if ... elif ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition1:</span><br><span class=\"line\">\tblock <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition2:</span><br><span class=\"line\">\tblock <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition3:</span><br><span class=\"line\">\tblock <span class=\"number\">3</span></span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tdefault_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 检查 conditionX ( X = 1, 2, 3, ...) 的值, 若为 True 则执行 blockX, <strong>执行该分支之后, 退出整个分支结构</strong> (注意此处与 C 语言的 <code>switch</code> 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 <code>else</code> 为止.</li>\r\n</ul>\r\n<h3 id=\"循环结构\">循环结构</h3>\r\n<h4 id=\"while-循环\"><code>while</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> condition:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"for-循环\"><code>for</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>for</code> 循环会遍历每一个处于 list 中的元素, 执行语句块.</li>\r\n</ul>\r\n<h4 id=\"循环中起控制作用的关键字\">循环中起控制作用的关键字</h4>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">关键字</th>\r\n<th align=\"left\">作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>break</code></td>\r\n<td align=\"left\">结束当前循环</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>continue</code></td>\r\n<td align=\"left\">跳过后面语句, 进入下一次循环</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>else</code></td>\r\n<td align=\"left\">在循环执行完毕之后执行</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><code>else</code> 在循环中的使用举例:</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">\ta = a + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">\"The all done\"</span>)</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"条件分支\">条件分支</h3>\r\n<h4 id=\"单分支结构\">单分支结构</h4>\r\n<h5 id=\"if-判断结构\"><code>if</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">\tsentence1</span><br><span class=\"line\">\tsentence2</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则跳过.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code> !</li>\r\n</ul>\r\n<h4 id=\"多分支结构\">多分支结构</h4>\r\n<h5 id=\"if-...-else-判断结构\"><code>if ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">    True_block</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    False_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 首先判断 <code>condition</code> 的值, 若为 1 (True) 则执行接下来的语句块, 若为 0 (False) 则执行 <code>else</code> 后的语句块.\r\n<ul>\r\n<li>一切非零非空的 condition 都为 True, 一切为零为空的 condition 都为 False.</li>\r\n</ul></li>\r\n<li>Python 以缩进相同且连续的多个语句为一个语句块.</li>\r\n<li>注意冒号 <code>:</code>!</li>\r\n</ul>\r\n<h5 id=\"if-...-elif-...-else-判断结构\"><code>if ... elif ... else</code> 判断结构</h5>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition1:</span><br><span class=\"line\">\tblock <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition2:</span><br><span class=\"line\">\tblock <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> condition3:</span><br><span class=\"line\">\tblock <span class=\"number\">3</span></span><br><span class=\"line\">\t.</span><br><span class=\"line\">\t.</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tdefault_block</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Python 检查 conditionX ( X = 1, 2, 3, ...) 的值, 若为 True 则执行 blockX, <strong>执行该分支之后, 退出整个分支结构</strong> (注意此处与 C 语言的 <code>switch</code> 结构不同) . 若为 False , 则继续向下判断 condition(X+1), 直到最后的 <code>else</code> 为止.</li>\r\n</ul>\r\n<h3 id=\"循环结构\">循环结构</h3>\r\n<h4 id=\"while-循环\"><code>while</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> condition:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"for-循环\"><code>for</code> 循环</h4>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">\tblock</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>for</code> 循环会遍历每一个处于 list 中的元素, 执行语句块.</li>\r\n</ul>\r\n<h4 id=\"循环中起控制作用的关键字\">循环中起控制作用的关键字</h4>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">关键字</th>\r\n<th align=\"left\">作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>break</code></td>\r\n<td align=\"left\">结束当前循环</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>continue</code></td>\r\n<td align=\"left\">跳过后面语句, 进入下一次循环</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>else</code></td>\r\n<td align=\"left\">在循环执行完毕之后执行</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><code>else</code> 在循环中的使用举例:</li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">\ta = a + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">\"The all done\"</span>)</span><br></pre></td></tr></table></figure>"},{"title":"[PyNote]-Python模块","_content":"\n<!--more-->\n\n# Python 模块的目录结构\n\n```\nModule_root/            # 模块的根目录\n├── __init__.py         # 每一个模块中必须要有 __init__.py 文件\n├── childdir/           # 模块的一个子目录, 被称为包\n│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件\n│   ├── script1.py\n│   └── scriptn.py\n├── childdirn/\n│   ├── __init__.py\n│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.\n|   |   └──script.py\n│   ├── script1.py\n│   └── scriptn.py\n├── script1.py\n├── script2.py\n└── scriptn.py\n```\n\n- 每一个模块中可以含有无数个 `.py` 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(`package`).\n- 模块, 包, `.py` 文件都是 `模块-子模块` 的关系, 本质上都是模块, 可以引用其中任意一级.\n- 一个有效的模块或者包中必须含有 `__init__.py` 文件. \n- `__init__.py` 文件中可以有代码, 也可以是一个空文件. 因为 `__init__.py` 在模块中代表该目录自身.\n\n\n# 在 Python 中引用模块或包\n\n```py\nimport Module_root                      # 引用整个模块\nimport Module_root.childdirn            # 引用模块中的一个包\nimport Module_root.childdir.script1     # 引用模块中的一个包的文件\nfrom . import *                         # 引用当前目录中所有模块\n```\n\n## 引用模块时, Python 解释器做了什么\n\n以以下目录结构为例:\n\n具体文件已打包 [module.example.zip](/assert/repos/python/module.example.zip)\n\n```\nmain/\n    - subdir/\n        - __init__.py\n        - test.py\n    - invalidir/\n        - test.py\n    - __init__.py\n    - echo.py\n    - echo_imported.py\n```\n\n其中,\n\n- `/main/echo_imported.py` 在 `/main/__init__.py` 中引用, 而 `echo.py` 没有.\n- `/main/subdir/__init__.py` 是个空文件\n\n0. 首先, 运行模块下的 `__init__.py` 文件.\n    - 同目录下的其他文件不会被执行.\n    - \n0. 创建一个和模块名一致的变量, 将模块对象赋值给此变量.\n    - 模块对象是模块类的一个实例.\n\n注意:\n\n- 当 Python 解释器直接解释执行 `.py` 文件时, 会将一个特殊变量 `__name__` 赋值为 `\"__main__\"`, 因此, 许多模块中都会有判断结构 `if __name__ == \"__main__\": test()` 方便测试.\n\n# 编写自己的 Python 模块\n\nTODO:\n\n# 常用系统模块(标准库)\n\n所有系统模块都在 [Python安装目录/Lib/](file:///C:/Python37/Lib/) 中.\n\n- `platform`    获取操作系统平台信息.\n- `sys`         操作 Python 解释器.\n- `os`          操作系统接口.\n- `subprocess`  子进程.\n- `getopt`      解析命令行参数.\n- `re`          正则表达式.\n- `urllib`      网络爬虫.\n- `glob`        模块提供了一个 `glob()` 函数用于用通配符搜索当前目录, 生成文件列表.\n- `random`      生成随机数.","source":"_posts/pynote-python模块.md","raw":"---\ntitle: '[PyNote]-Python模块'\ntags:\n    - Python\n    - Note\ncategories:\n    - Python\n---\n\n<!--more-->\n\n# Python 模块的目录结构\n\n```\nModule_root/            # 模块的根目录\n├── __init__.py         # 每一个模块中必须要有 __init__.py 文件\n├── childdir/           # 模块的一个子目录, 被称为包\n│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件\n│   ├── script1.py\n│   └── scriptn.py\n├── childdirn/\n│   ├── __init__.py\n│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.\n|   |   └──script.py\n│   ├── script1.py\n│   └── scriptn.py\n├── script1.py\n├── script2.py\n└── scriptn.py\n```\n\n- 每一个模块中可以含有无数个 `.py` 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(`package`).\n- 模块, 包, `.py` 文件都是 `模块-子模块` 的关系, 本质上都是模块, 可以引用其中任意一级.\n- 一个有效的模块或者包中必须含有 `__init__.py` 文件. \n- `__init__.py` 文件中可以有代码, 也可以是一个空文件. 因为 `__init__.py` 在模块中代表该目录自身.\n\n\n# 在 Python 中引用模块或包\n\n```py\nimport Module_root                      # 引用整个模块\nimport Module_root.childdirn            # 引用模块中的一个包\nimport Module_root.childdir.script1     # 引用模块中的一个包的文件\nfrom . import *                         # 引用当前目录中所有模块\n```\n\n## 引用模块时, Python 解释器做了什么\n\n以以下目录结构为例:\n\n具体文件已打包 [module.example.zip](/assert/repos/python/module.example.zip)\n\n```\nmain/\n    - subdir/\n        - __init__.py\n        - test.py\n    - invalidir/\n        - test.py\n    - __init__.py\n    - echo.py\n    - echo_imported.py\n```\n\n其中,\n\n- `/main/echo_imported.py` 在 `/main/__init__.py` 中引用, 而 `echo.py` 没有.\n- `/main/subdir/__init__.py` 是个空文件\n\n0. 首先, 运行模块下的 `__init__.py` 文件.\n    - 同目录下的其他文件不会被执行.\n    - \n0. 创建一个和模块名一致的变量, 将模块对象赋值给此变量.\n    - 模块对象是模块类的一个实例.\n\n注意:\n\n- 当 Python 解释器直接解释执行 `.py` 文件时, 会将一个特殊变量 `__name__` 赋值为 `\"__main__\"`, 因此, 许多模块中都会有判断结构 `if __name__ == \"__main__\": test()` 方便测试.\n\n# 编写自己的 Python 模块\n\nTODO:\n\n# 常用系统模块(标准库)\n\n所有系统模块都在 [Python安装目录/Lib/](file:///C:/Python37/Lib/) 中.\n\n- `platform`    获取操作系统平台信息.\n- `sys`         操作 Python 解释器.\n- `os`          操作系统接口.\n- `subprocess`  子进程.\n- `getopt`      解析命令行参数.\n- `re`          正则表达式.\n- `urllib`      网络爬虫.\n- `glob`        模块提供了一个 `glob()` 函数用于用通配符搜索当前目录, 生成文件列表.\n- `random`      生成随机数.","slug":"pynote-python模块","published":1,"date":"2018-08-19T12:03:06.055Z","updated":"2018-08-23T17:45:41.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m0024w8lkijncqva3","content":"<a id=\"more\"></a>\r\n<h1 id=\"python-模块的目录结构\">Python 模块的目录结构</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module_root/            # 模块的根目录</span><br><span class=\"line\">├── __init__.py         # 每一个模块中必须要有 __init__.py 文件</span><br><span class=\"line\">├── childdir/           # 模块的一个子目录, 被称为包</span><br><span class=\"line\">│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── childdirn/</span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.</span><br><span class=\"line\">|   |   └──script.py</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── script1.py</span><br><span class=\"line\">├── script2.py</span><br><span class=\"line\">└── scriptn.py</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>每一个模块中可以含有无数个 <code>.py</code> 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(<code>package</code>).</li>\r\n<li>模块, 包, <code>.py</code> 文件都是 <code>模块-子模块</code> 的关系, 本质上都是模块, 可以引用其中任意一级.</li>\r\n<li>一个有效的模块或者包中必须含有 <code>__init__.py</code> 文件.</li>\r\n<li><code>__init__.py</code> 文件中可以有代码, 也可以是一个空文件. 因为 <code>__init__.py</code> 在模块中代表该目录自身.</li>\r\n</ul>\r\n<h1 id=\"在-python-中引用模块或包\">在 Python 中引用模块或包</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Module_root                      <span class=\"comment\"># 引用整个模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdirn            <span class=\"comment\"># 引用模块中的一个包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdir.script1     <span class=\"comment\"># 引用模块中的一个包的文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> *                         <span class=\"comment\"># 引用当前目录中所有模块</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"引用模块时-python-解释器做了什么\">引用模块时, Python 解释器做了什么</h2>\r\n<p>以以下目录结构为例:</p>\r\n<p>具体文件已打包 <a href=\"/assert/repos/python/module.example.zip\">module.example.zip</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main/</span><br><span class=\"line\">    - subdir/</span><br><span class=\"line\">        - __init__.py</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - invalidir/</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - __init__.py</span><br><span class=\"line\">    - echo.py</span><br><span class=\"line\">    - echo_imported.py</span><br></pre></td></tr></table></figure>\r\n<p>其中,</p>\r\n<ul>\r\n<li><code>/main/echo_imported.py</code> 在 <code>/main/__init__.py</code> 中引用, 而 <code>echo.py</code> 没有.</li>\r\n<li><code>/main/subdir/__init__.py</code> 是个空文件</li>\r\n</ul>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 运行模块下的 <code>__init__.py</code> 文件.\r\n<ul>\r\n<li>同目录下的其他文件不会被执行.</li>\r\n<li></li>\r\n</ul></li>\r\n<li>创建一个和模块名一致的变量, 将模块对象赋值给此变量.\r\n<ul>\r\n<li>模块对象是模块类的一个实例.</li>\r\n</ul></li>\r\n</ol>\r\n<p>注意:</p>\r\n<ul>\r\n<li>当 Python 解释器直接解释执行 <code>.py</code> 文件时, 会将一个特殊变量 <code>__name__</code> 赋值为 <code>&quot;__main__&quot;</code>, 因此, 许多模块中都会有判断结构 <code>if __name__ == &quot;__main__&quot;: test()</code> 方便测试.</li>\r\n</ul>\r\n<h1 id=\"编写自己的-python-模块\">编写自己的 Python 模块</h1>\r\n<p>TODO:</p>\r\n<h1 id=\"常用系统模块标准库\">常用系统模块(标准库)</h1>\r\n<p>所有系统模块都在 <a href=\"file:///C:/Python37/Lib/\" target=\"_blank\" rel=\"noopener\">Python安装目录/Lib/</a> 中.</p>\r\n<ul>\r\n<li><code>platform</code> 获取操作系统平台信息.</li>\r\n<li><code>sys</code> 操作 Python 解释器.</li>\r\n<li><code>os</code> 操作系统接口.</li>\r\n<li><code>subprocess</code> 子进程.</li>\r\n<li><code>getopt</code> 解析命令行参数.</li>\r\n<li><code>re</code> 正则表达式.</li>\r\n<li><code>urllib</code> 网络爬虫.</li>\r\n<li><code>glob</code> 模块提供了一个 <code>glob()</code> 函数用于用通配符搜索当前目录, 生成文件列表.</li>\r\n<li><code>random</code> 生成随机数.</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-模块的目录结构\">Python 模块的目录结构</h1>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module_root/            # 模块的根目录</span><br><span class=\"line\">├── __init__.py         # 每一个模块中必须要有 __init__.py 文件</span><br><span class=\"line\">├── childdir/           # 模块的一个子目录, 被称为包</span><br><span class=\"line\">│   ├── __init__.py     # 一个有效的包里必须含有 __init__.py 文件</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── childdirn/</span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── childdir/       # 这个目录里没有 __init__.py 文件, 不能作为包引用.</span><br><span class=\"line\">|   |   └──script.py</span><br><span class=\"line\">│   ├── script1.py</span><br><span class=\"line\">│   └── scriptn.py</span><br><span class=\"line\">├── script1.py</span><br><span class=\"line\">├── script2.py</span><br><span class=\"line\">└── scriptn.py</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>每一个模块中可以含有无数个 <code>.py</code> 文件, 也可以含有无数个子目录, 模块中的子目录被称为 包(<code>package</code>).</li>\r\n<li>模块, 包, <code>.py</code> 文件都是 <code>模块-子模块</code> 的关系, 本质上都是模块, 可以引用其中任意一级.</li>\r\n<li>一个有效的模块或者包中必须含有 <code>__init__.py</code> 文件.</li>\r\n<li><code>__init__.py</code> 文件中可以有代码, 也可以是一个空文件. 因为 <code>__init__.py</code> 在模块中代表该目录自身.</li>\r\n</ul>\r\n<h1 id=\"在-python-中引用模块或包\">在 Python 中引用模块或包</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Module_root                      <span class=\"comment\"># 引用整个模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdirn            <span class=\"comment\"># 引用模块中的一个包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Module_root.childdir.script1     <span class=\"comment\"># 引用模块中的一个包的文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> *                         <span class=\"comment\"># 引用当前目录中所有模块</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"引用模块时-python-解释器做了什么\">引用模块时, Python 解释器做了什么</h2>\r\n<p>以以下目录结构为例:</p>\r\n<p>具体文件已打包 <a href=\"/assert/repos/python/module.example.zip\">module.example.zip</a></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main/</span><br><span class=\"line\">    - subdir/</span><br><span class=\"line\">        - __init__.py</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - invalidir/</span><br><span class=\"line\">        - test.py</span><br><span class=\"line\">    - __init__.py</span><br><span class=\"line\">    - echo.py</span><br><span class=\"line\">    - echo_imported.py</span><br></pre></td></tr></table></figure>\r\n<p>其中,</p>\r\n<ul>\r\n<li><code>/main/echo_imported.py</code> 在 <code>/main/__init__.py</code> 中引用, 而 <code>echo.py</code> 没有.</li>\r\n<li><code>/main/subdir/__init__.py</code> 是个空文件</li>\r\n</ul>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 运行模块下的 <code>__init__.py</code> 文件.\r\n<ul>\r\n<li>同目录下的其他文件不会被执行.</li>\r\n<li></li>\r\n</ul></li>\r\n<li>创建一个和模块名一致的变量, 将模块对象赋值给此变量.\r\n<ul>\r\n<li>模块对象是模块类的一个实例.</li>\r\n</ul></li>\r\n</ol>\r\n<p>注意:</p>\r\n<ul>\r\n<li>当 Python 解释器直接解释执行 <code>.py</code> 文件时, 会将一个特殊变量 <code>__name__</code> 赋值为 <code>&quot;__main__&quot;</code>, 因此, 许多模块中都会有判断结构 <code>if __name__ == &quot;__main__&quot;: test()</code> 方便测试.</li>\r\n</ul>\r\n<h1 id=\"编写自己的-python-模块\">编写自己的 Python 模块</h1>\r\n<p>TODO:</p>\r\n<h1 id=\"常用系统模块标准库\">常用系统模块(标准库)</h1>\r\n<p>所有系统模块都在 <a href=\"file:///C:/Python37/Lib/\" target=\"_blank\" rel=\"noopener\">Python安装目录/Lib/</a> 中.</p>\r\n<ul>\r\n<li><code>platform</code> 获取操作系统平台信息.</li>\r\n<li><code>sys</code> 操作 Python 解释器.</li>\r\n<li><code>os</code> 操作系统接口.</li>\r\n<li><code>subprocess</code> 子进程.</li>\r\n<li><code>getopt</code> 解析命令行参数.</li>\r\n<li><code>re</code> 正则表达式.</li>\r\n<li><code>urllib</code> 网络爬虫.</li>\r\n<li><code>glob</code> 模块提供了一个 <code>glob()</code> 函数用于用通配符搜索当前目录, 生成文件列表.</li>\r\n<li><code>random</code> 生成随机数.</li>\r\n</ul>"},{"title":"[PyNote]-1-Python运算符","mathjax":true,"date":"2018-07-27T14:01:59.000Z","_content":"\n<!--more-->\n\n### 算术运算\n\n|运算符|功能|\n|:---:|:--:|\n|`+,-,*,/`|与四则运算作用相同|\n|`**`|求幂, `a**b` == $ a^b $|\n|`//`|整除, $ a \\\\div b = (a//b) \\\\cdots (a \\\\% b) $|\n|`%`|取模, $ a \\\\div b = n \\\\cdots ( a \\\\% b) $|\n\n### 赋值运算符\n\nPython 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面.\n例如, `a += (exp)` 等价于 `a = a + (exp)`\n\n|运算符|作用|\n|:-:|-|\n|`=`|`a=b` 将变量 b 的值赋给变量 a|\n|`+=`|`a += exp` 等价于 `a = a + (exp)`|\n|`-=`|`a -= exp` 等价于 `a = a - (exp)`|\n|`*=`|`a *= exp` 等价于 `a = a * (exp)`|\n|`/=`|`a /= exp` 等价于 `a = a / (exp)`|\n|`%=`|`a %= exp` 等价于 `a = a % (exp)`|\n|`**=`|`a **= exp` 等价于 `a = a ** (exp)`|\n|`//=`|`a //= exp` 等价于 `a = a // (exp)`|\n\n### 关系运算\n\n|运算符|功能|\n|:---:|:--:|\n|`>`,`<`|大于, 小于|\n|`>=`,`<=`|大于等于, 小于等于|\n|`==`|等于, 不等于|\n|`!=`,`<>`|不等于|\n\n### 逻辑运算\n\n|运算符|作用|\n|:-:|-|\n|`and`|与, `x and y`, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值|\n|`or`|或, `x or y`, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值|\n|`not`|非, `not x`, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True|\n\n- 注意, 一切非零非空的值都为 `True`, 反之则为 `False`.\n\n### 成员运算符\n\n|运算符|作用|\n|:-:|-|\n|`in`|`element in list` 判断 `element` 是否在 `list` 中, 若是, 则返回 True|\n|`not in`|`element in list` 判断 `element` 是否在 `list` 中, 若不是, 则返回 True|\n\n### 身份运算符\n\n身份运算符用于比较两个对象的存储单元\n\n|运算符|作用|\n|:-:|-|\n|`is`|判断两个标识符是否是同一对象, 若是, 则返回 True|\n|`is not`|判断两个标识符是否是同一对象, 若是, 则返回 False|\n\n- 该运算符判断两个变量是否相同, 等同于 `id(x) == id(y)`\n\n### 位运算符\n\n以 `a = 00110011`, `b = 11001010` 为例\n\n|运算符|作用|\n|:-:|-|\n|`<<`|左移, 将二进制位左移 X 位, `a << 1` 为 `01100110`|\n|`>>`|右移, 将二进制位右移 X 位, `a >> 1` 为 `00011001`|\n|`&`|按位与, 二进制同时为 1, 输出为 1, `a & b` 为 `00000010`|\n|`|`|按位或, 二进制一方为 1, 输出为 1, `a | b` 为 `11111011`|\n|`^`|按位异或, 二进制相异为 1, 相同为 0, `a ^ b` 为 `11111001`|\n|`~`|按位非, 二进制数取反, `~a` 为 `11001100`|\n\n### 运算符优先级\n\n|运算符|描述|\n|:-:|-|\n|`**`|指数 (最高优先级)|\n|`~`,`+`,`-`|按位翻转, 一元加号和减号|\n|`*`,`/`,`%`,`//`|乘，除，取模和取整除|\n|`+`,`-`|加法减法|\n|`>>`,`<<`|右移，左移|\n|`&`|位 'AND'|\n|`^`,`|`|位运算符|\n|`<=`,`<`,`>`,`>=`|比较运算符|\n|`<>`,`==`,`!=`|比较运算符|\n|`=`,`%=`,`/=`,`//=`,`-=`,`+=`,`*=`,`**=`|赋值运算符|\n|`is`,`is not`|身份运算符|\n|`in`,`not in`|成员运算符|\n|`not`,`or`,`and`|逻辑运算符|","source":"_posts/pynote-python运算符.md","raw":"---\ntitle: '[PyNote]-1-Python运算符'\nmathjax: True\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-07-27 22:01:59\n---\n\n<!--more-->\n\n### 算术运算\n\n|运算符|功能|\n|:---:|:--:|\n|`+,-,*,/`|与四则运算作用相同|\n|`**`|求幂, `a**b` == $ a^b $|\n|`//`|整除, $ a \\\\div b = (a//b) \\\\cdots (a \\\\% b) $|\n|`%`|取模, $ a \\\\div b = n \\\\cdots ( a \\\\% b) $|\n\n### 赋值运算符\n\nPython 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面.\n例如, `a += (exp)` 等价于 `a = a + (exp)`\n\n|运算符|作用|\n|:-:|-|\n|`=`|`a=b` 将变量 b 的值赋给变量 a|\n|`+=`|`a += exp` 等价于 `a = a + (exp)`|\n|`-=`|`a -= exp` 等价于 `a = a - (exp)`|\n|`*=`|`a *= exp` 等价于 `a = a * (exp)`|\n|`/=`|`a /= exp` 等价于 `a = a / (exp)`|\n|`%=`|`a %= exp` 等价于 `a = a % (exp)`|\n|`**=`|`a **= exp` 等价于 `a = a ** (exp)`|\n|`//=`|`a //= exp` 等价于 `a = a // (exp)`|\n\n### 关系运算\n\n|运算符|功能|\n|:---:|:--:|\n|`>`,`<`|大于, 小于|\n|`>=`,`<=`|大于等于, 小于等于|\n|`==`|等于, 不等于|\n|`!=`,`<>`|不等于|\n\n### 逻辑运算\n\n|运算符|作用|\n|:-:|-|\n|`and`|与, `x and y`, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值|\n|`or`|或, `x or y`, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值|\n|`not`|非, `not x`, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True|\n\n- 注意, 一切非零非空的值都为 `True`, 反之则为 `False`.\n\n### 成员运算符\n\n|运算符|作用|\n|:-:|-|\n|`in`|`element in list` 判断 `element` 是否在 `list` 中, 若是, 则返回 True|\n|`not in`|`element in list` 判断 `element` 是否在 `list` 中, 若不是, 则返回 True|\n\n### 身份运算符\n\n身份运算符用于比较两个对象的存储单元\n\n|运算符|作用|\n|:-:|-|\n|`is`|判断两个标识符是否是同一对象, 若是, 则返回 True|\n|`is not`|判断两个标识符是否是同一对象, 若是, 则返回 False|\n\n- 该运算符判断两个变量是否相同, 等同于 `id(x) == id(y)`\n\n### 位运算符\n\n以 `a = 00110011`, `b = 11001010` 为例\n\n|运算符|作用|\n|:-:|-|\n|`<<`|左移, 将二进制位左移 X 位, `a << 1` 为 `01100110`|\n|`>>`|右移, 将二进制位右移 X 位, `a >> 1` 为 `00011001`|\n|`&`|按位与, 二进制同时为 1, 输出为 1, `a & b` 为 `00000010`|\n|`|`|按位或, 二进制一方为 1, 输出为 1, `a | b` 为 `11111011`|\n|`^`|按位异或, 二进制相异为 1, 相同为 0, `a ^ b` 为 `11111001`|\n|`~`|按位非, 二进制数取反, `~a` 为 `11001100`|\n\n### 运算符优先级\n\n|运算符|描述|\n|:-:|-|\n|`**`|指数 (最高优先级)|\n|`~`,`+`,`-`|按位翻转, 一元加号和减号|\n|`*`,`/`,`%`,`//`|乘，除，取模和取整除|\n|`+`,`-`|加法减法|\n|`>>`,`<<`|右移，左移|\n|`&`|位 'AND'|\n|`^`,`|`|位运算符|\n|`<=`,`<`,`>`,`>=`|比较运算符|\n|`<>`,`==`,`!=`|比较运算符|\n|`=`,`%=`,`/=`,`//=`,`-=`,`+=`,`*=`,`**=`|赋值运算符|\n|`is`,`is not`|身份运算符|\n|`in`,`not in`|成员运算符|\n|`not`,`or`,`and`|逻辑运算符|","slug":"pynote-python运算符","published":1,"updated":"2018-08-23T17:45:43.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m0027w8lkzu1lr1c8","content":"<a id=\"more\"></a>\r\n<h3 id=\"算术运算\">算术运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th align=\"center\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>+,-,*,/</code></td>\r\n<td align=\"center\">与四则运算作用相同</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>**</code></td>\r\n<td align=\"center\">求幂, <code>a**b</code> == $ a^b $</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>//</code></td>\r\n<td align=\"center\">整除, $ a \\div b = (a//b) \\cdots (a \\% b) $</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>%</code></td>\r\n<td align=\"center\">取模, $ a \\div b = n \\cdots ( a \\% b) $</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"赋值运算符\">赋值运算符</h3>\r\n<p>Python 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面. 例如, <code>a += (exp)</code> 等价于 <code>a = a + (exp)</code></p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>=</code></td>\r\n<td><code>a=b</code> 将变量 b 的值赋给变量 a</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>+=</code></td>\r\n<td><code>a += exp</code> 等价于 <code>a = a + (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>-=</code></td>\r\n<td><code>a -= exp</code> 等价于 <code>a = a - (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>*=</code></td>\r\n<td><code>a *= exp</code> 等价于 <code>a = a * (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>/=</code></td>\r\n<td><code>a /= exp</code> 等价于 <code>a = a / (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>%=</code></td>\r\n<td><code>a %= exp</code> 等价于 <code>a = a % (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>**=</code></td>\r\n<td><code>a **= exp</code> 等价于 <code>a = a ** (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>//=</code></td>\r\n<td><code>a //= exp</code> 等价于 <code>a = a // (exp)</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"关系运算\">关系运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th align=\"center\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&gt;</code>,<code>&lt;</code></td>\r\n<td align=\"center\">大于, 小于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&gt;=</code>,<code>&lt;=</code></td>\r\n<td align=\"center\">大于等于, 小于等于</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>==</code></td>\r\n<td align=\"center\">等于, 不等于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>!=</code>,<code>&lt;&gt;</code></td>\r\n<td align=\"center\">不等于</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"逻辑运算\">逻辑运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>and</code></td>\r\n<td>与, <code>x and y</code>, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>or</code></td>\r\n<td>或, <code>x or y</code>, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>not</code></td>\r\n<td>非, <code>not x</code>, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>注意, 一切非零非空的值都为 <code>True</code>, 反之则为 <code>False</code>.</li>\r\n</ul>\r\n<h3 id=\"成员运算符\">成员运算符</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>not in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若不是, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"身份运算符\">身份运算符</h3>\r\n<p>身份运算符用于比较两个对象的存储单元</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>is</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>is not</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 False</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>该运算符判断两个变量是否相同, 等同于 <code>id(x) == id(y)</code></li>\r\n</ul>\r\n<h3 id=\"位运算符\">位运算符</h3>\r\n<p>以 <code>a = 00110011</code>, <code>b = 11001010</code> 为例</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&lt;&lt;</code></td>\r\n<td>左移, 将二进制位左移 X 位, <code>a &lt;&lt; 1</code> 为 <code>01100110</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&gt;&gt;</code></td>\r\n<td>右移, 将二进制位右移 X 位, <code>a &gt;&gt; 1</code> 为 <code>00011001</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&amp;</code></td>\r\n<td>按位与, 二进制同时为 1, 输出为 1, <code>a &amp; b</code> 为 <code>00000010</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>|</code></td>\r\n<td>按位或, 二进制一方为 1, 输出为 1, <code>a | b</code> 为 <code>11111011</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>^</code></td>\r\n<td>按位异或, 二进制相异为 1, 相同为 0, <code>a ^ b</code> 为 <code>11111001</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>~</code></td>\r\n<td>按位非, 二进制数取反, <code>~a</code> 为 <code>11001100</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"运算符优先级\">运算符优先级</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>**</code></td>\r\n<td>指数 (最高优先级)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>~</code>,<code>+</code>,<code>-</code></td>\r\n<td>按位翻转, 一元加号和减号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>*</code>,<code>/</code>,<code>%</code>,<code>//</code></td>\r\n<td>乘，除，取模和取整除</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>+</code>,<code>-</code></td>\r\n<td>加法减法</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&gt;&gt;</code>,<code>&lt;&lt;</code></td>\r\n<td>右移，左移</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&amp;</code></td>\r\n<td>位 'AND'</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>^</code>,<code>|</code></td>\r\n<td>位运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&lt;=</code>,<code>&lt;</code>,<code>&gt;</code>,<code>&gt;=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&lt;&gt;</code>,<code>==</code>,<code>!=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>=</code>,<code>%=</code>,<code>/=</code>,<code>//=</code>,<code>-=</code>,<code>+=</code>,<code>*=</code>,<code>**=</code></td>\r\n<td>赋值运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>is</code>,<code>is not</code></td>\r\n<td>身份运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>in</code>,<code>not in</code></td>\r\n<td>成员运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>not</code>,<code>or</code>,<code>and</code></td>\r\n<td>逻辑运算符</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算术运算\">算术运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th align=\"center\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>+,-,*,/</code></td>\r\n<td align=\"center\">与四则运算作用相同</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>**</code></td>\r\n<td align=\"center\">求幂, <code>a**b</code> == $ a^b $</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>//</code></td>\r\n<td align=\"center\">整除, $ a \\div b = (a//b) \\cdots (a \\% b) $</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>%</code></td>\r\n<td align=\"center\">取模, $ a \\div b = n \\cdots ( a \\% b) $</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"赋值运算符\">赋值运算符</h3>\r\n<p>Python 也支持类似于 C 语言的赋值运算符. 将一个算术运算符加在赋值符前面. 例如, <code>a += (exp)</code> 等价于 <code>a = a + (exp)</code></p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>=</code></td>\r\n<td><code>a=b</code> 将变量 b 的值赋给变量 a</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>+=</code></td>\r\n<td><code>a += exp</code> 等价于 <code>a = a + (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>-=</code></td>\r\n<td><code>a -= exp</code> 等价于 <code>a = a - (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>*=</code></td>\r\n<td><code>a *= exp</code> 等价于 <code>a = a * (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>/=</code></td>\r\n<td><code>a /= exp</code> 等价于 <code>a = a / (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>%=</code></td>\r\n<td><code>a %= exp</code> 等价于 <code>a = a % (exp)</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>**=</code></td>\r\n<td><code>a **= exp</code> 等价于 <code>a = a ** (exp)</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>//=</code></td>\r\n<td><code>a //= exp</code> 等价于 <code>a = a // (exp)</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"关系运算\">关系运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th align=\"center\">功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&gt;</code>,<code>&lt;</code></td>\r\n<td align=\"center\">大于, 小于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&gt;=</code>,<code>&lt;=</code></td>\r\n<td align=\"center\">大于等于, 小于等于</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>==</code></td>\r\n<td align=\"center\">等于, 不等于</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>!=</code>,<code>&lt;&gt;</code></td>\r\n<td align=\"center\">不等于</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"逻辑运算\">逻辑运算</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>and</code></td>\r\n<td>与, <code>x and y</code>, 若 x 为 False, 则返回 x 的值(False), 若 x 为 True , 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>or</code></td>\r\n<td>或, <code>x or y</code>, 若 x 为 True, 则返回 x 的值, 若 x 为 False 则返回 y 的值</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>not</code></td>\r\n<td>非, <code>not x</code>, 若 x 为 True, 则返回 False, 若 x 为 False, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>注意, 一切非零非空的值都为 <code>True</code>, 反之则为 <code>False</code>.</li>\r\n</ul>\r\n<h3 id=\"成员运算符\">成员运算符</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>not in</code></td>\r\n<td><code>element in list</code> 判断 <code>element</code> 是否在 <code>list</code> 中, 若不是, 则返回 True</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"身份运算符\">身份运算符</h3>\r\n<p>身份运算符用于比较两个对象的存储单元</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>is</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 True</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>is not</code></td>\r\n<td>判断两个标识符是否是同一对象, 若是, 则返回 False</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>该运算符判断两个变量是否相同, 等同于 <code>id(x) == id(y)</code></li>\r\n</ul>\r\n<h3 id=\"位运算符\">位运算符</h3>\r\n<p>以 <code>a = 00110011</code>, <code>b = 11001010</code> 为例</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>作用</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&lt;&lt;</code></td>\r\n<td>左移, 将二进制位左移 X 位, <code>a &lt;&lt; 1</code> 为 <code>01100110</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&gt;&gt;</code></td>\r\n<td>右移, 将二进制位右移 X 位, <code>a &gt;&gt; 1</code> 为 <code>00011001</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&amp;</code></td>\r\n<td>按位与, 二进制同时为 1, 输出为 1, <code>a &amp; b</code> 为 <code>00000010</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>|</code></td>\r\n<td>按位或, 二进制一方为 1, 输出为 1, <code>a | b</code> 为 <code>11111011</code></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>^</code></td>\r\n<td>按位异或, 二进制相异为 1, 相同为 0, <code>a ^ b</code> 为 <code>11111001</code></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>~</code></td>\r\n<td>按位非, 二进制数取反, <code>~a</code> 为 <code>11001100</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"运算符优先级\">运算符优先级</h3>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">运算符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>**</code></td>\r\n<td>指数 (最高优先级)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>~</code>,<code>+</code>,<code>-</code></td>\r\n<td>按位翻转, 一元加号和减号</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>*</code>,<code>/</code>,<code>%</code>,<code>//</code></td>\r\n<td>乘，除，取模和取整除</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>+</code>,<code>-</code></td>\r\n<td>加法减法</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&gt;&gt;</code>,<code>&lt;&lt;</code></td>\r\n<td>右移，左移</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&amp;</code></td>\r\n<td>位 'AND'</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>^</code>,<code>|</code></td>\r\n<td>位运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>&lt;=</code>,<code>&lt;</code>,<code>&gt;</code>,<code>&gt;=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>&lt;&gt;</code>,<code>==</code>,<code>!=</code></td>\r\n<td>比较运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>=</code>,<code>%=</code>,<code>/=</code>,<code>//=</code>,<code>-=</code>,<code>+=</code>,<code>*=</code>,<code>**=</code></td>\r\n<td>赋值运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>is</code>,<code>is not</code></td>\r\n<td>身份运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\"><code>in</code>,<code>not in</code></td>\r\n<td>成员运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\"><code>not</code>,<code>or</code>,<code>and</code></td>\r\n<td>逻辑运算符</td>\r\n</tr>\r\n</tbody>\r\n</table>"},{"title":"[PyNote]-try..except..raise异常处理","mathjax":false,"date":"2018-08-15T14:39:39.000Z","_content":"\n- [`try...except`](#try...except)\n- [`try...except{ErrorType}`](#try...except{ErrorType})\n- [`try...except...else`](#可以使用-else-关键词)\n- [`raise`](#raise-抛出异常)\n- [`try..finally`](#异常清理行为)\n- [`with...as`](#使用-with...as-语句)\n\n<!--more-->\n\n# 语法\n\n## `try...except`\n\n```py\nb = 10\nc = 0\na = b / c\nprint(\"a=%d, b=%d, c=%d\"%(a, b, c))\n```\n\n以上代码, 如果直接执行的话会报一个[错误](#ZeroDivisionError), 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 `try...except` 语句进行错误处理.\n\n```py\ntry:\n    b = 10\n    c = 0\n    a = b / c\n    print(\"a=%d, b=%d, c=%d\"%(a, b, c))\nexcept:\n    c = 2\n    a = b / c\n```\n\n但是使用了 `try...except` 语句后, 如果有任何错误, Python 会执行 `except:` 后的语句, 然后继续. 具体的执行顺序:\n\n0. 执行 `try:` 后语句, 直到遇到错误部分\n0. 在错误处中断, 执行 `except:` 后语句\n0. 在错误处重启, 继续执行 `try:` 后剩余部分(发生错误的那一行会被忽略)\n\n<div id=\"ZeroDivisionError\"></div>\n\n```py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n```\n## `try...except{ErrorType}`\n\n在 `try...except` 语句中可以指定错误类型:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\n```\n\n以上语句可以特异性处理 `ZeroDivisionError` 类型的错误, 但是在 `try:` 中遇到其它类型的错误, 程序依然会终止.\n\n### 可以在一个 `except` 中处理多种异常\n\n需要在 `{ErrorType}` 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept (ZeroDivisionError, SyntaxError):\n    print(ZeroDivisionError.__doc__)\n    print(SyntaxError.__doc__)\n```\n\n### 可以使用多个 `except` 关键词\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\nexcept SyntaxError:\n    print(SyntaxError.__doc__)\nexcept:\n    print(\"Unknown\")\n```\n\n- 发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.\n- 可以在最后使用无指定类型的 `except:` 任何异常类型都可以触发它.\n- 在一个 `try...except` 结构中, 最多触发一次 `except`, 之后便会退出该结构.\n\n### 可以使用 `as` 关键字给 `except` 后的错误类型取别名.如:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\n```\n\n### 可以使用 `else` 关键词\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\nelse:\n    print(\"Everything is OK!\")\n```\n\n如果没有异常, 则会运行 `else` 后的语句.\n\n## `raise` 抛出异常\n\n使用语句\n\n```py\nraise ErrorType('提示字符串')\n```\n\n抛出一个异常.\n\n- 抛出异常之后, 程序将停止运行.\n- `raise` 可以不接参数, 这将抛出当前异常(只能运用在`except`后)\n- `raise` 后接的参数必须是一个异常的 `类` 或 `实例`.\n\n# Python 中存在的异常类型\n\n## Python 中的基本异常类型\n\n|异常类型|说明|\n|:-:|-|\n|Exception|**所有异常的基类**|\n|AttributeError|特性应用或赋值失败时触发|\n|IOError|试图打开不存在的文件时触发|\n|IndexError|在使用序列中不存在的索引时触发|\n|KeyError|在使用映射不存在的键时触发|\n|NameError|在找不到名字(变量)时触发|\n|SyntaxError|代码出现语法错误时触发|\n|TypeError|在内建操作或者函数应用于错误类型的对象时触发|\n|ValueError|在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发|\n|ZeroDivisionError|在除法或者地板除操作的第二个操作数为 0 时触发|\n\n## 自定义异常类型\n\n可以通过创建一个继承了 `Exception` 的子类的方式来创建自定义异常类.\n\n```py\nclass MyError(Exception):\n    def __init__(self, expression, suggestion):\n        self.expression = expression\n        self.suggestion = suggestion\n    def __str__(self):\n        print(\"MyError: %s\\n\\tSuggestion: %s\"%(self.expression, self.suggestion))\n```\n\n注意定义一个 `__str__` 方法, 这个方法定义了抛出异常时进行的动作.\n\n# 异常清理行为\n\n```py\ntry:\n    pass\nfinally:\n    pass\n```\n\n无论 `try` 中是否有异常, `finally` 后的语句一定会执行.\n\n## 使用 `with...as` 语句\n\n`with...as` 语句可以调用对象预定义的清理行为. 如:\n\n```py\nwith open('./test.txt', 'r') as f:\n    for i in f:\n        print(i)\n```\n\n将会保证 `with..as:` 后的语句块执行完毕后调用 `close()`(文件对象的预定义清理行为). ","source":"_posts/pynote-try-except-raise异常处理.md","raw":"---\ntitle: '[PyNote]-try..except..raise异常处理'\nmathjax: false\ntags:\n  - Python\n  - Note\ncategories:\n  - Python\ndate: 2018-08-15 22:39:39\n---\n\n- [`try...except`](#try...except)\n- [`try...except{ErrorType}`](#try...except{ErrorType})\n- [`try...except...else`](#可以使用-else-关键词)\n- [`raise`](#raise-抛出异常)\n- [`try..finally`](#异常清理行为)\n- [`with...as`](#使用-with...as-语句)\n\n<!--more-->\n\n# 语法\n\n## `try...except`\n\n```py\nb = 10\nc = 0\na = b / c\nprint(\"a=%d, b=%d, c=%d\"%(a, b, c))\n```\n\n以上代码, 如果直接执行的话会报一个[错误](#ZeroDivisionError), 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 `try...except` 语句进行错误处理.\n\n```py\ntry:\n    b = 10\n    c = 0\n    a = b / c\n    print(\"a=%d, b=%d, c=%d\"%(a, b, c))\nexcept:\n    c = 2\n    a = b / c\n```\n\n但是使用了 `try...except` 语句后, 如果有任何错误, Python 会执行 `except:` 后的语句, 然后继续. 具体的执行顺序:\n\n0. 执行 `try:` 后语句, 直到遇到错误部分\n0. 在错误处中断, 执行 `except:` 后语句\n0. 在错误处重启, 继续执行 `try:` 后剩余部分(发生错误的那一行会被忽略)\n\n<div id=\"ZeroDivisionError\"></div>\n\n```py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n```\n## `try...except{ErrorType}`\n\n在 `try...except` 语句中可以指定错误类型:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\n```\n\n以上语句可以特异性处理 `ZeroDivisionError` 类型的错误, 但是在 `try:` 中遇到其它类型的错误, 程序依然会终止.\n\n### 可以在一个 `except` 中处理多种异常\n\n需要在 `{ErrorType}` 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept (ZeroDivisionError, SyntaxError):\n    print(ZeroDivisionError.__doc__)\n    print(SyntaxError.__doc__)\n```\n\n### 可以使用多个 `except` 关键词\n\n```py\ntry:\n    a = 1 / 0\n    def hei()\n        pass\nexcept ZeroDivisionError:\n    print(ZeroDivisionError.__doc__)\nexcept SyntaxError:\n    print(SyntaxError.__doc__)\nexcept:\n    print(\"Unknown\")\n```\n\n- 发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.\n- 可以在最后使用无指定类型的 `except:` 任何异常类型都可以触发它.\n- 在一个 `try...except` 结构中, 最多触发一次 `except`, 之后便会退出该结构.\n\n### 可以使用 `as` 关键字给 `except` 后的错误类型取别名.如:\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\n```\n\n### 可以使用 `else` 关键词\n\n```py\ntry:\n    a = 1 / 0\nexcept ZeroDivisionError as z:\n    print(z.__doc__)\nelse:\n    print(\"Everything is OK!\")\n```\n\n如果没有异常, 则会运行 `else` 后的语句.\n\n## `raise` 抛出异常\n\n使用语句\n\n```py\nraise ErrorType('提示字符串')\n```\n\n抛出一个异常.\n\n- 抛出异常之后, 程序将停止运行.\n- `raise` 可以不接参数, 这将抛出当前异常(只能运用在`except`后)\n- `raise` 后接的参数必须是一个异常的 `类` 或 `实例`.\n\n# Python 中存在的异常类型\n\n## Python 中的基本异常类型\n\n|异常类型|说明|\n|:-:|-|\n|Exception|**所有异常的基类**|\n|AttributeError|特性应用或赋值失败时触发|\n|IOError|试图打开不存在的文件时触发|\n|IndexError|在使用序列中不存在的索引时触发|\n|KeyError|在使用映射不存在的键时触发|\n|NameError|在找不到名字(变量)时触发|\n|SyntaxError|代码出现语法错误时触发|\n|TypeError|在内建操作或者函数应用于错误类型的对象时触发|\n|ValueError|在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发|\n|ZeroDivisionError|在除法或者地板除操作的第二个操作数为 0 时触发|\n\n## 自定义异常类型\n\n可以通过创建一个继承了 `Exception` 的子类的方式来创建自定义异常类.\n\n```py\nclass MyError(Exception):\n    def __init__(self, expression, suggestion):\n        self.expression = expression\n        self.suggestion = suggestion\n    def __str__(self):\n        print(\"MyError: %s\\n\\tSuggestion: %s\"%(self.expression, self.suggestion))\n```\n\n注意定义一个 `__str__` 方法, 这个方法定义了抛出异常时进行的动作.\n\n# 异常清理行为\n\n```py\ntry:\n    pass\nfinally:\n    pass\n```\n\n无论 `try` 中是否有异常, `finally` 后的语句一定会执行.\n\n## 使用 `with...as` 语句\n\n`with...as` 语句可以调用对象预定义的清理行为. 如:\n\n```py\nwith open('./test.txt', 'r') as f:\n    for i in f:\n        print(i)\n```\n\n将会保证 `with..as:` 后的语句块执行完毕后调用 `close()`(文件对象的预定义清理行为). ","slug":"pynote-try-except-raise异常处理","published":1,"updated":"2018-08-23T17:45:46.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m002bw8lke7tzl4h4","content":"<ul>\r\n<li><a href=\"#try...except\"><code>try...except</code></a></li>\r\n<li><a href=\"#try...except%7BErrorType%7D\"><code>try...except{ErrorType}</code></a></li>\r\n<li><a href=\"#可以使用-else-关键词\"><code>try...except...else</code></a></li>\r\n<li><a href=\"#raise-抛出异常\"><code>raise</code></a></li>\r\n<li><a href=\"#异常清理行为\"><code>try..finally</code></a></li>\r\n<li><a href=\"#使用-with...as-语句\"><code>with...as</code></a></li>\r\n</ul>\r\n<a id=\"more\"></a>\r\n<h1 id=\"语法\">语法</h1>\r\n<h2 id=\"try...except\"><code>try...except</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\">c = <span class=\"number\">0</span></span><br><span class=\"line\">a = b / c</span><br><span class=\"line\">print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br></pre></td></tr></table></figure>\r\n<p>以上代码, 如果直接执行的话会报一个<a href=\"#ZeroDivisionError\">错误</a>, 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 <code>try...except</code> 语句进行错误处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    b = <span class=\"number\">10</span></span><br><span class=\"line\">    c = <span class=\"number\">0</span></span><br><span class=\"line\">    a = b / c</span><br><span class=\"line\">    print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    c = <span class=\"number\">2</span></span><br><span class=\"line\">    a = b / c</span><br></pre></td></tr></table></figure>\r\n<p>但是使用了 <code>try...except</code> 语句后, 如果有任何错误, Python 会执行 <code>except:</code> 后的语句, 然后继续. 具体的执行顺序:</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>执行 <code>try:</code> 后语句, 直到遇到错误部分</li>\r\n<li>在错误处中断, 执行 <code>except:</code> 后语句</li>\r\n<li>在错误处重启, 继续执行 <code>try:</code> 后剩余部分(发生错误的那一行会被忽略)</li>\r\n</ol>\r\n<div id=\"ZeroDivisionError\">\r\n\r\n</div>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"try...excepterrortype\"><code>try...except{ErrorType}</code></h2>\r\n<p>在 <code>try...except</code> 语句中可以指定错误类型:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<p>以上语句可以特异性处理 <code>ZeroDivisionError</code> 类型的错误, 但是在 <code>try:</code> 中遇到其它类型的错误, 程序依然会终止.</p>\r\n<h3 id=\"可以在一个-except-中处理多种异常\">可以在一个 <code>except</code> 中处理多种异常</h3>\r\n<p>需要在 <code>{ErrorType}</code> 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"params\">(ZeroDivisionError, SyntaxError)</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用多个-except-关键词\">可以使用多个 <code>except</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"title\">ZeroDivisionError</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span> SyntaxError:</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Unknown\"</span>)</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.</li>\r\n<li>可以在最后使用无指定类型的 <code>except:</code> 任何异常类型都可以触发它.</li>\r\n<li>在一个 <code>try...except</code> 结构中, 最多触发一次 <code>except</code>, 之后便会退出该结构.</li>\r\n</ul>\r\n<h3 id=\"可以使用-as-关键字给-except-后的错误类型取别名.如\">可以使用 <code>as</code> 关键字给 <code>except</code> 后的错误类型取别名.如:</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用-else-关键词\">可以使用 <code>else</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Everything is OK!\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>如果没有异常, 则会运行 <code>else</code> 后的语句.</p>\r\n<h2 id=\"raise-抛出异常\"><code>raise</code> 抛出异常</h2>\r\n<p>使用语句</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ErrorType(<span class=\"string\">'提示字符串'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>抛出一个异常.</p>\r\n<ul>\r\n<li>抛出异常之后, 程序将停止运行.</li>\r\n<li><code>raise</code> 可以不接参数, 这将抛出当前异常(只能运用在<code>except</code>后)</li>\r\n<li><code>raise</code> 后接的参数必须是一个异常的 <code>类</code> 或 <code>实例</code>.</li>\r\n</ul>\r\n<h1 id=\"python-中存在的异常类型\">Python 中存在的异常类型</h1>\r\n<h2 id=\"python-中的基本异常类型\">Python 中的基本异常类型</h2>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">异常类型</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Exception</td>\r\n<td><strong>所有异常的基类</strong></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">AttributeError</td>\r\n<td>特性应用或赋值失败时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">IOError</td>\r\n<td>试图打开不存在的文件时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">IndexError</td>\r\n<td>在使用序列中不存在的索引时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">KeyError</td>\r\n<td>在使用映射不存在的键时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">NameError</td>\r\n<td>在找不到名字(变量)时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">SyntaxError</td>\r\n<td>代码出现语法错误时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">TypeError</td>\r\n<td>在内建操作或者函数应用于错误类型的对象时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">ValueError</td>\r\n<td>在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">ZeroDivisionError</td>\r\n<td>在除法或者地板除操作的第二个操作数为 0 时触发</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"自定义异常类型\">自定义异常类型</h2>\r\n<p>可以通过创建一个继承了 <code>Exception</code> 的子类的方式来创建自定义异常类.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, expression, suggestion)</span>:</span></span><br><span class=\"line\">        self.expression = expression</span><br><span class=\"line\">        self.suggestion = suggestion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"MyError: %s\\n\\tSuggestion: %s\"</span>%(self.expression, self.suggestion))</span><br></pre></td></tr></table></figure>\r\n<p>注意定义一个 <code>__str__</code> 方法, 这个方法定义了抛出异常时进行的动作.</p>\r\n<h1 id=\"异常清理行为\">异常清理行为</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>无论 <code>try</code> 中是否有异常, <code>finally</code> 后的语句一定会执行.</p>\r\n<h2 id=\"使用-with...as-语句\">使用 <code>with...as</code> 语句</h2>\r\n<p><code>with...as</code> 语句可以调用对象预定义的清理行为. 如:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'./test.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        print(i)</span><br></pre></td></tr></table></figure>\r\n<p>将会保证 <code>with..as:</code> 后的语句块执行完毕后调用 <code>close()</code>(文件对象的预定义清理行为).</p>\r\n","site":{"data":{}},"excerpt":"<ul>\r\n<li><a href=\"#try...except\"><code>try...except</code></a></li>\r\n<li><a href=\"#try...except%7BErrorType%7D\"><code>try...except{ErrorType}</code></a></li>\r\n<li><a href=\"#可以使用-else-关键词\"><code>try...except...else</code></a></li>\r\n<li><a href=\"#raise-抛出异常\"><code>raise</code></a></li>\r\n<li><a href=\"#异常清理行为\"><code>try..finally</code></a></li>\r\n<li><a href=\"#使用-with...as-语句\"><code>with...as</code></a></li>\r\n</ul>","more":"<h1 id=\"语法\">语法</h1>\r\n<h2 id=\"try...except\"><code>try...except</code></h2>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\">c = <span class=\"number\">0</span></span><br><span class=\"line\">a = b / c</span><br><span class=\"line\">print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br></pre></td></tr></table></figure>\r\n<p>以上代码, 如果直接执行的话会报一个<a href=\"#ZeroDivisionError\">错误</a>, 然后整个程序就中断了. 如果要让程序错误了也能继续执行, 就需要用到 <code>try...except</code> 语句进行错误处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    b = <span class=\"number\">10</span></span><br><span class=\"line\">    c = <span class=\"number\">0</span></span><br><span class=\"line\">    a = b / c</span><br><span class=\"line\">    print(<span class=\"string\">\"a=%d, b=%d, c=%d\"</span>%(a, b, c))</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    c = <span class=\"number\">2</span></span><br><span class=\"line\">    a = b / c</span><br></pre></td></tr></table></figure>\r\n<p>但是使用了 <code>try...except</code> 语句后, 如果有任何错误, Python 会执行 <code>except:</code> 后的语句, 然后继续. 具体的执行顺序:</p>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>执行 <code>try:</code> 后语句, 直到遇到错误部分</li>\r\n<li>在错误处中断, 执行 <code>except:</code> 后语句</li>\r\n<li>在错误处重启, 继续执行 <code>try:</code> 后剩余部分(发生错误的那一行会被忽略)</li>\r\n</ol>\r\n<div id=\"ZeroDivisionError\">\r\n\r\n</div>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"try...excepterrortype\"><code>try...except{ErrorType}</code></h2>\r\n<p>在 <code>try...except</code> 语句中可以指定错误类型:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<p>以上语句可以特异性处理 <code>ZeroDivisionError</code> 类型的错误, 但是在 <code>try:</code> 中遇到其它类型的错误, 程序依然会终止.</p>\r\n<h3 id=\"可以在一个-except-中处理多种异常\">可以在一个 <code>except</code> 中处理多种异常</h3>\r\n<p>需要在 <code>{ErrorType}</code> 中使用一个元组来包括需要的异常类型. 只要发生其中一种异常, 就会触发此异常处理.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"params\">(ZeroDivisionError, SyntaxError)</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用多个-except-关键词\">可以使用多个 <code>except</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hei</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">except</span> <span class=\"title\">ZeroDivisionError</span>:</span></span><br><span class=\"line\">    print(ZeroDivisionError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span> SyntaxError:</span><br><span class=\"line\">    print(SyntaxError.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Unknown\"</span>)</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>发生某种异常时, 按顺序核对异常类型, 触发对应的异常处理.</li>\r\n<li>可以在最后使用无指定类型的 <code>except:</code> 任何异常类型都可以触发它.</li>\r\n<li>在一个 <code>try...except</code> 结构中, 最多触发一次 <code>except</code>, 之后便会退出该结构.</li>\r\n</ul>\r\n<h3 id=\"可以使用-as-关键字给-except-后的错误类型取别名.如\">可以使用 <code>as</code> 关键字给 <code>except</code> 后的错误类型取别名.如:</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可以使用-else-关键词\">可以使用 <code>else</code> 关键词</h3>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> z:</span><br><span class=\"line\">    print(z.__doc__)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Everything is OK!\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>如果没有异常, 则会运行 <code>else</code> 后的语句.</p>\r\n<h2 id=\"raise-抛出异常\"><code>raise</code> 抛出异常</h2>\r\n<p>使用语句</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ErrorType(<span class=\"string\">'提示字符串'</span>)</span><br></pre></td></tr></table></figure>\r\n<p>抛出一个异常.</p>\r\n<ul>\r\n<li>抛出异常之后, 程序将停止运行.</li>\r\n<li><code>raise</code> 可以不接参数, 这将抛出当前异常(只能运用在<code>except</code>后)</li>\r\n<li><code>raise</code> 后接的参数必须是一个异常的 <code>类</code> 或 <code>实例</code>.</li>\r\n</ul>\r\n<h1 id=\"python-中存在的异常类型\">Python 中存在的异常类型</h1>\r\n<h2 id=\"python-中的基本异常类型\">Python 中的基本异常类型</h2>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">异常类型</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Exception</td>\r\n<td><strong>所有异常的基类</strong></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">AttributeError</td>\r\n<td>特性应用或赋值失败时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">IOError</td>\r\n<td>试图打开不存在的文件时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">IndexError</td>\r\n<td>在使用序列中不存在的索引时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">KeyError</td>\r\n<td>在使用映射不存在的键时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">NameError</td>\r\n<td>在找不到名字(变量)时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">SyntaxError</td>\r\n<td>代码出现语法错误时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">TypeError</td>\r\n<td>在内建操作或者函数应用于错误类型的对象时触发</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">ValueError</td>\r\n<td>在内建操作或者函数应用于正确类型的对象, 但是该对象使用不合适的值时触发</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">ZeroDivisionError</td>\r\n<td>在除法或者地板除操作的第二个操作数为 0 时触发</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"自定义异常类型\">自定义异常类型</h2>\r\n<p>可以通过创建一个继承了 <code>Exception</code> 的子类的方式来创建自定义异常类.</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, expression, suggestion)</span>:</span></span><br><span class=\"line\">        self.expression = expression</span><br><span class=\"line\">        self.suggestion = suggestion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"MyError: %s\\n\\tSuggestion: %s\"</span>%(self.expression, self.suggestion))</span><br></pre></td></tr></table></figure>\r\n<p>注意定义一个 <code>__str__</code> 方法, 这个方法定义了抛出异常时进行的动作.</p>\r\n<h1 id=\"异常清理行为\">异常清理行为</h1>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\r\n<p>无论 <code>try</code> 中是否有异常, <code>finally</code> 后的语句一定会执行.</p>\r\n<h2 id=\"使用-with...as-语句\">使用 <code>with...as</code> 语句</h2>\r\n<p><code>with...as</code> 语句可以调用对象预定义的清理行为. 如:</p>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'./test.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        print(i)</span><br></pre></td></tr></table></figure>\r\n<p>将会保证 <code>with..as:</code> 后的语句块执行完毕后调用 <code>close()</code>(文件对象的预定义清理行为).</p>"},{"title":"使用Brook翻墙","date":"2018-07-24T10:12:38.000Z","_content":"\n<!--more-->\n\n# 部署翻墙工具 Brook\n\n[Brook@GitHub](https://github.com/txthinking/brook)\n\n## 租赁 VPS\n\n在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.\n\n我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.\n\n[![Vultr-Billing.png](https://i.loli.net/2018/07/24/5b56e6795aa58.png)](https://i.loli.net/2018/07/24/5b56e6795aa58.png)\n\n只是为了翻墙的话, 购买倒数第二 \\$5/mon 五美元每月的套餐即可. 虽然有更便宜的 \\$2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6...\n\n### 测试 VPS 连接稳定性与速度\n\n首先用 `ping` 的方式测试 vultr 各机房的网络状况.\n\nvultr 机房一览:\n\n|地理位置|域名|\n|:--:|:--|\n|Tokyo|[hnd-jp-ping.vultr.com](hnd-jp-ping.vultr.com)|\n|Singapore|[sgp-ping.vultr.com](sgp-ping.vultr.com)|\n|Amsterdam|[ams-nl-ping.vultr.com](ams-nl-ping.vultr.com)|\n|Paris|[par-fr-ping.vultr.com](par-fr-ping.vultr.com)|\n|Frankfurt|[fra-de-ping.vultr.com](fra-de-ping.vultr.com)|\n|London|[lon-gb-ping.vultr.com](lon-gb-ping.vultr.com)|\n|New York|[nj-us-ping.vultr.com](nj-us-ping.vultr.com)|\n|Chicago|[il-us-ping.vultr.com](il-us-ping.vultr.com)|\n|Dallas|[tx-us-ping.vultr.com](tx-us-ping.vultr.com)|\n|Atlanta|[ga-us-ping.vultr.com](ga-us-ping.vultr.com)|\n|Los Angeles|[lax-ca-us-ping.vultr.com](lax-ca-us-ping.vultr.com)|\n|Miami|[fl-us-ping.vultr.com](fl-us-ping.vultr.com)|\n|Seattle|[wa-us-ping.vultr.com](wa-us-ping.vultr.com)|\n|Silicon Valley|[sjo-ca-us-ping.vultr.com](sjo-ca-us-ping.vultr.com)|\n|Sydney|[syd-au-ping.vultr.com](syd-au-ping.vultr.com)|\n\n下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.\n\n- (Windows PowerShell) `Start-Job -ScriptBlock {python3 ./ping-vultr.py >> ./ping-vultr-out.txt}` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口) \n- (Linux) 使用 `nohup python3 ./ping-vultr.py >> ./ping-vultr-out.txt &` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件.\n\t- 注意, 需要将第 15 行的 `os.system(\"ping \" + domains[a] + \" -n 20\")` 改为 `os.system(\"ping \" + domains[a] + \" -c 20\")`\n\n```py\n# !/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport os\n# 创建一个列表, 储存 vultr 各机房的域名.\nnames = [\"Tokyo\", \"Singapore\", \"Amsterdam\", \"Paris\", \"Frankfurt\", \"London\", \"New York\",\n         \"Chicago\", \"Dallas\", \"Atlanta\", \"Los Angeles\", \"Miami\", \"Seattle\", \"Silicon Valley\", \"Sydney\", ]\ndomains = [\"hnd-jp-ping.vultr.com\", \"sgp-ping.vultr.com\", \"ams-nl-ping.vultr.com\", \"par-fr-ping.vultr.com\", \"fra-de-ping.vultr.com\", \"lon-gb-ping.vultr.com\", \"nj-us-ping.vultr.com\",\n           \"il-us-ping.vultr.com\", \"tx-us-ping.vultr.com\", \"ga-us-ping.vultr.com\", \"lax-ca-us-ping.vultr.com\", \"fl-us-ping.vultr.com\", \"wa-us-ping.vultr.com\", \"sjo-ca-us-ping.vultr.com\", \"syd-au-ping.vultr.com\"]\nj = 0\nwhile j < 14:\n    print(\"\\n\\n========================\")\n    print(\"正在 ping 位于 \\\"%s\\\" 的机房\" % names[j], end='\\n')\n    sys.stdout.flush()\n    os.system(\"ping \" + domains[j] + \" -n 20\")\n    j = j + 1\nprint(\"Done\\a\")\n```\n\n从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.\n\n## 部署 Brook 服务\n\nBrook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)\n\n### 安装 Brook\n\n部署 brook 可以先到 Github 项目主页 [txthinking/Brook](https://github.com/txthinking/brook) 下载相关的可执行文件.\n\n64 位桌面 Linux 系统一般下载 arm64 版本\n\n```sh\nwget \"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"\n```\n\n下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 `mv ./brook_linux_amd64 ./brook`\n之后可以将其链接到 `*/bin` 文件夹, 以便在全局使用 `brook` 指令控制 brook 的运行. 否则你必须 `cd` 到 brook 所在的文件夹才能操作.\n注意文件是否有可执行权限, 如果没有, 使用 `chmod +x ./brook` 给它添加可执行权限.\n\n另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.\n\n```sh\nsudo snap install brook\n```\n\n### 运行 Brook\n\nbrook 在安装完成之后, 就可以使用 `brook <args>` 启动运行, 最简单的方法是\n\n```sh\nnohup brook server -l :port -p password &\n```\n\n- `server` 参数, 表示将其作为服务运行\n- `-l :port` 参数将 `brook` 运行到服务器的某个端口, 将 `port` 替换为任意一个空闲端口即可.\n- `-p password` 设置一个密码.\n- `nohup` 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.\n- 命令最末尾的 `&` 符号表示后台运行.\n\nBrook 还有其他的运行模式. 比如 `raw Socks5`, `shadowsocks` 等. 具体可以看[项目Wiki](https://github.com/txthinking/brook/wiki).\n\n根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 [Shadowsocks](https://github.com/shadowsocks/shadowsocks) 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.\n\n### 系统配置: 端口与防火墙\n\n注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.\n\n例如 Ubuntu 使用的防火墙是 `ufw` , 使用以下指令对 `9999` 端口(就是你运行 brook 使用的端口) 放行:\n\n```sh\nsudo ufw allow 9999\nsudo ufw allow 9999/tcp\nsudo ufw allow 9999/udp\n```\n\n## 使用 Brook\n\n### Windows GUI\n\n在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.\n\n解压密码是: 执掌好运的黑黄之王\n\nPS: 我可喜欢这本小说了.😀\n\n[密码: 3dpu](https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A)\n\n该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 `troggle` 可以开关. 不过 GUI 程序没有设计作为服务端的功能.\n\n![Brook Windows GUI 界面](https://i.loli.net/2018/07/13/5b48411dba980.png)\n\n### Android GUI\n\n一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击\"开始\" 就可以用了. \n\n### Linux CLI\n\nBrook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.\n\n```sh\nnohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password >> ./brook.log 2>&1 &\n```\n\n这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 `2>&1` 表示把 stderr 也输出到 stdout 流中.\n\n## 设置 systemd 守护进程\n\n使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.\n\n[TODO:挖坑待填]","source":"_posts/使用Brook翻墙.md","raw":"---\ntitle: 使用Brook翻墙\ndate: 2018-07-24 18:12:38\ntags:\n  - Brook\n  - 翻墙\ncategories:\n  - 日常\n---\n\n<!--more-->\n\n# 部署翻墙工具 Brook\n\n[Brook@GitHub](https://github.com/txthinking/brook)\n\n## 租赁 VPS\n\n在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.\n\n我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.\n\n[![Vultr-Billing.png](https://i.loli.net/2018/07/24/5b56e6795aa58.png)](https://i.loli.net/2018/07/24/5b56e6795aa58.png)\n\n只是为了翻墙的话, 购买倒数第二 \\$5/mon 五美元每月的套餐即可. 虽然有更便宜的 \\$2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6...\n\n### 测试 VPS 连接稳定性与速度\n\n首先用 `ping` 的方式测试 vultr 各机房的网络状况.\n\nvultr 机房一览:\n\n|地理位置|域名|\n|:--:|:--|\n|Tokyo|[hnd-jp-ping.vultr.com](hnd-jp-ping.vultr.com)|\n|Singapore|[sgp-ping.vultr.com](sgp-ping.vultr.com)|\n|Amsterdam|[ams-nl-ping.vultr.com](ams-nl-ping.vultr.com)|\n|Paris|[par-fr-ping.vultr.com](par-fr-ping.vultr.com)|\n|Frankfurt|[fra-de-ping.vultr.com](fra-de-ping.vultr.com)|\n|London|[lon-gb-ping.vultr.com](lon-gb-ping.vultr.com)|\n|New York|[nj-us-ping.vultr.com](nj-us-ping.vultr.com)|\n|Chicago|[il-us-ping.vultr.com](il-us-ping.vultr.com)|\n|Dallas|[tx-us-ping.vultr.com](tx-us-ping.vultr.com)|\n|Atlanta|[ga-us-ping.vultr.com](ga-us-ping.vultr.com)|\n|Los Angeles|[lax-ca-us-ping.vultr.com](lax-ca-us-ping.vultr.com)|\n|Miami|[fl-us-ping.vultr.com](fl-us-ping.vultr.com)|\n|Seattle|[wa-us-ping.vultr.com](wa-us-ping.vultr.com)|\n|Silicon Valley|[sjo-ca-us-ping.vultr.com](sjo-ca-us-ping.vultr.com)|\n|Sydney|[syd-au-ping.vultr.com](syd-au-ping.vultr.com)|\n\n下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.\n\n- (Windows PowerShell) `Start-Job -ScriptBlock {python3 ./ping-vultr.py >> ./ping-vultr-out.txt}` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口) \n- (Linux) 使用 `nohup python3 ./ping-vultr.py >> ./ping-vultr-out.txt &` 将这个脚本放到后台运行, 输出重定向至 `ping-vultr-out.txt` 文件.\n\t- 注意, 需要将第 15 行的 `os.system(\"ping \" + domains[a] + \" -n 20\")` 改为 `os.system(\"ping \" + domains[a] + \" -c 20\")`\n\n```py\n# !/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport os\n# 创建一个列表, 储存 vultr 各机房的域名.\nnames = [\"Tokyo\", \"Singapore\", \"Amsterdam\", \"Paris\", \"Frankfurt\", \"London\", \"New York\",\n         \"Chicago\", \"Dallas\", \"Atlanta\", \"Los Angeles\", \"Miami\", \"Seattle\", \"Silicon Valley\", \"Sydney\", ]\ndomains = [\"hnd-jp-ping.vultr.com\", \"sgp-ping.vultr.com\", \"ams-nl-ping.vultr.com\", \"par-fr-ping.vultr.com\", \"fra-de-ping.vultr.com\", \"lon-gb-ping.vultr.com\", \"nj-us-ping.vultr.com\",\n           \"il-us-ping.vultr.com\", \"tx-us-ping.vultr.com\", \"ga-us-ping.vultr.com\", \"lax-ca-us-ping.vultr.com\", \"fl-us-ping.vultr.com\", \"wa-us-ping.vultr.com\", \"sjo-ca-us-ping.vultr.com\", \"syd-au-ping.vultr.com\"]\nj = 0\nwhile j < 14:\n    print(\"\\n\\n========================\")\n    print(\"正在 ping 位于 \\\"%s\\\" 的机房\" % names[j], end='\\n')\n    sys.stdout.flush()\n    os.system(\"ping \" + domains[j] + \" -n 20\")\n    j = j + 1\nprint(\"Done\\a\")\n```\n\n从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.\n\n## 部署 Brook 服务\n\nBrook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)\n\n### 安装 Brook\n\n部署 brook 可以先到 Github 项目主页 [txthinking/Brook](https://github.com/txthinking/brook) 下载相关的可执行文件.\n\n64 位桌面 Linux 系统一般下载 arm64 版本\n\n```sh\nwget \"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"\n```\n\n下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 `mv ./brook_linux_amd64 ./brook`\n之后可以将其链接到 `*/bin` 文件夹, 以便在全局使用 `brook` 指令控制 brook 的运行. 否则你必须 `cd` 到 brook 所在的文件夹才能操作.\n注意文件是否有可执行权限, 如果没有, 使用 `chmod +x ./brook` 给它添加可执行权限.\n\n另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.\n\n```sh\nsudo snap install brook\n```\n\n### 运行 Brook\n\nbrook 在安装完成之后, 就可以使用 `brook <args>` 启动运行, 最简单的方法是\n\n```sh\nnohup brook server -l :port -p password &\n```\n\n- `server` 参数, 表示将其作为服务运行\n- `-l :port` 参数将 `brook` 运行到服务器的某个端口, 将 `port` 替换为任意一个空闲端口即可.\n- `-p password` 设置一个密码.\n- `nohup` 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.\n- 命令最末尾的 `&` 符号表示后台运行.\n\nBrook 还有其他的运行模式. 比如 `raw Socks5`, `shadowsocks` 等. 具体可以看[项目Wiki](https://github.com/txthinking/brook/wiki).\n\n根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 [Shadowsocks](https://github.com/shadowsocks/shadowsocks) 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.\n\n### 系统配置: 端口与防火墙\n\n注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.\n\n例如 Ubuntu 使用的防火墙是 `ufw` , 使用以下指令对 `9999` 端口(就是你运行 brook 使用的端口) 放行:\n\n```sh\nsudo ufw allow 9999\nsudo ufw allow 9999/tcp\nsudo ufw allow 9999/udp\n```\n\n## 使用 Brook\n\n### Windows GUI\n\n在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.\n\n解压密码是: 执掌好运的黑黄之王\n\nPS: 我可喜欢这本小说了.😀\n\n[密码: 3dpu](https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A)\n\n该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 `troggle` 可以开关. 不过 GUI 程序没有设计作为服务端的功能.\n\n![Brook Windows GUI 界面](https://i.loli.net/2018/07/13/5b48411dba980.png)\n\n### Android GUI\n\n一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击\"开始\" 就可以用了. \n\n### Linux CLI\n\nBrook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.\n\n```sh\nnohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password >> ./brook.log 2>&1 &\n```\n\n这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 `2>&1` 表示把 stderr 也输出到 stdout 流中.\n\n## 设置 systemd 守护进程\n\n使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.\n\n[TODO:挖坑待填]","slug":"使用Brook翻墙","published":1,"updated":"2018-08-23T17:46:06.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m002ew8lkymwusiz3","content":"<a id=\"more\"></a>\r\n<h1 id=\"部署翻墙工具-brook\">部署翻墙工具 Brook</h1>\r\n<p><a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">Brook@GitHub</a></p>\r\n<h2 id=\"租赁-vps\">租赁 VPS</h2>\r\n<p>在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.</p>\r\n<p>我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.</p>\r\n<p><a href=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" alt=\"Vultr-Billing.png\"></a></p>\r\n<p>只是为了翻墙的话, 购买倒数第二 $5/mon 五美元每月的套餐即可. 虽然有更便宜的 $2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6...</p>\r\n<h3 id=\"测试-vps-连接稳定性与速度\">测试 VPS 连接稳定性与速度</h3>\r\n<p>首先用 <code>ping</code> 的方式测试 vultr 各机房的网络状况.</p>\r\n<p>vultr 机房一览:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">地理位置</th>\r\n<th align=\"left\">域名</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Tokyo</td>\r\n<td align=\"left\"><a href=\"hnd-jp-ping.vultr.com\" class=\"uri\">hnd-jp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Singapore</td>\r\n<td align=\"left\"><a href=\"sgp-ping.vultr.com\" class=\"uri\">sgp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Amsterdam</td>\r\n<td align=\"left\"><a href=\"ams-nl-ping.vultr.com\" class=\"uri\">ams-nl-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Paris</td>\r\n<td align=\"left\"><a href=\"par-fr-ping.vultr.com\" class=\"uri\">par-fr-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Frankfurt</td>\r\n<td align=\"left\"><a href=\"fra-de-ping.vultr.com\" class=\"uri\">fra-de-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">London</td>\r\n<td align=\"left\"><a href=\"lon-gb-ping.vultr.com\" class=\"uri\">lon-gb-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">New York</td>\r\n<td align=\"left\"><a href=\"nj-us-ping.vultr.com\" class=\"uri\">nj-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Chicago</td>\r\n<td align=\"left\"><a href=\"il-us-ping.vultr.com\" class=\"uri\">il-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Dallas</td>\r\n<td align=\"left\"><a href=\"tx-us-ping.vultr.com\" class=\"uri\">tx-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Atlanta</td>\r\n<td align=\"left\"><a href=\"ga-us-ping.vultr.com\" class=\"uri\">ga-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Los Angeles</td>\r\n<td align=\"left\"><a href=\"lax-ca-us-ping.vultr.com\" class=\"uri\">lax-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Miami</td>\r\n<td align=\"left\"><a href=\"fl-us-ping.vultr.com\" class=\"uri\">fl-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Seattle</td>\r\n<td align=\"left\"><a href=\"wa-us-ping.vultr.com\" class=\"uri\">wa-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Silicon Valley</td>\r\n<td align=\"left\"><a href=\"sjo-ca-us-ping.vultr.com\" class=\"uri\">sjo-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Sydney</td>\r\n<td align=\"left\"><a href=\"syd-au-ping.vultr.com\" class=\"uri\">syd-au-ping.vultr.com</a></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.</p>\r\n<ul>\r\n<li>(Windows PowerShell) <code>Start-Job -ScriptBlock {python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt}</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口)</li>\r\n<li>(Linux) 使用 <code>nohup python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt &amp;</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件.\r\n<ul>\r\n<li>注意, 需要将第 15 行的 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -n 20&quot;)</code> 改为 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -c 20&quot;)</code></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># !/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 创建一个列表, 储存 vultr 各机房的域名.</span></span><br><span class=\"line\">names = [<span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"Singapore\"</span>, <span class=\"string\">\"Amsterdam\"</span>, <span class=\"string\">\"Paris\"</span>, <span class=\"string\">\"Frankfurt\"</span>, <span class=\"string\">\"London\"</span>, <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"Chicago\"</span>, <span class=\"string\">\"Dallas\"</span>, <span class=\"string\">\"Atlanta\"</span>, <span class=\"string\">\"Los Angeles\"</span>, <span class=\"string\">\"Miami\"</span>, <span class=\"string\">\"Seattle\"</span>, <span class=\"string\">\"Silicon Valley\"</span>, <span class=\"string\">\"Sydney\"</span>, ]</span><br><span class=\"line\">domains = [<span class=\"string\">\"hnd-jp-ping.vultr.com\"</span>, <span class=\"string\">\"sgp-ping.vultr.com\"</span>, <span class=\"string\">\"ams-nl-ping.vultr.com\"</span>, <span class=\"string\">\"par-fr-ping.vultr.com\"</span>, <span class=\"string\">\"fra-de-ping.vultr.com\"</span>, <span class=\"string\">\"lon-gb-ping.vultr.com\"</span>, <span class=\"string\">\"nj-us-ping.vultr.com\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"il-us-ping.vultr.com\"</span>, <span class=\"string\">\"tx-us-ping.vultr.com\"</span>, <span class=\"string\">\"ga-us-ping.vultr.com\"</span>, <span class=\"string\">\"lax-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"fl-us-ping.vultr.com\"</span>, <span class=\"string\">\"wa-us-ping.vultr.com\"</span>, <span class=\"string\">\"sjo-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"syd-au-ping.vultr.com\"</span>]</span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &lt; <span class=\"number\">14</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"\\n\\n========================\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"正在 ping 位于 \\\"%s\\\" 的机房\"</span> % names[j], end=<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    sys.stdout.flush()</span><br><span class=\"line\">    os.system(<span class=\"string\">\"ping \"</span> + domains[j] + <span class=\"string\">\" -n 20\"</span>)</span><br><span class=\"line\">    j = j + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">\"Done\\a\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.</p>\r\n<h2 id=\"部署-brook-服务\">部署 Brook 服务</h2>\r\n<p>Brook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)</p>\r\n<h3 id=\"安装-brook\">安装 Brook</h3>\r\n<p>部署 brook 可以先到 Github 项目主页 <a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">txthinking/Brook</a> 下载相关的可执行文件.</p>\r\n<p>64 位桌面 Linux 系统一般下载 arm64 版本</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget <span class=\"string\">\"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"</span></span><br></pre></td></tr></table></figure>\r\n<p>下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 <code>mv ./brook_linux_amd64 ./brook</code> 之后可以将其链接到 <code>*/bin</code> 文件夹, 以便在全局使用 <code>brook</code> 指令控制 brook 的运行. 否则你必须 <code>cd</code> 到 brook 所在的文件夹才能操作. 注意文件是否有可执行权限, 如果没有, 使用 <code>chmod +x ./brook</code> 给它添加可执行权限.</p>\r\n<p>另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install brook</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"运行-brook\">运行 Brook</h3>\r\n<p>brook 在安装完成之后, 就可以使用 <code>brook &lt;args&gt;</code> 启动运行, 最简单的方法是</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook server -l :port -p password &amp;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>server</code> 参数, 表示将其作为服务运行</li>\r\n<li><code>-l :port</code> 参数将 <code>brook</code> 运行到服务器的某个端口, 将 <code>port</code> 替换为任意一个空闲端口即可.</li>\r\n<li><code>-p password</code> 设置一个密码.</li>\r\n<li><code>nohup</code> 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.</li>\r\n<li>命令最末尾的 <code>&amp;</code> 符号表示后台运行.</li>\r\n</ul>\r\n<p>Brook 还有其他的运行模式. 比如 <code>raw Socks5</code>, <code>shadowsocks</code> 等. 具体可以看<a href=\"https://github.com/txthinking/brook/wiki\" target=\"_blank\" rel=\"noopener\">项目Wiki</a>.</p>\r\n<p>根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 <a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a> 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.</p>\r\n<h3 id=\"系统配置-端口与防火墙\">系统配置: 端口与防火墙</h3>\r\n<p>注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.</p>\r\n<p>例如 Ubuntu 使用的防火墙是 <code>ufw</code> , 使用以下指令对 <code>9999</code> 端口(就是你运行 brook 使用的端口) 放行:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 9999</span><br><span class=\"line\">sudo ufw allow 9999/tcp</span><br><span class=\"line\">sudo ufw allow 9999/udp</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"使用-brook\">使用 Brook</h2>\r\n<h3 id=\"windows-gui\">Windows GUI</h3>\r\n<p>在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.</p>\r\n<p>解压密码是: 执掌好运的黑黄之王</p>\r\n<p>PS: 我可喜欢这本小说了.😀</p>\r\n<p><a href=\"https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A\" target=\"_blank\" rel=\"noopener\">密码: 3dpu</a></p>\r\n<p>该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 <code>troggle</code> 可以开关. 不过 GUI 程序没有设计作为服务端的功能.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/07/13/5b48411dba980.png\" alt=\"Brook Windows GUI 界面\">\r\n<p class=\"caption\">Brook Windows GUI 界面</p>\r\n</div>\r\n<h3 id=\"android-gui\">Android GUI</h3>\r\n<p>一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击&quot;开始&quot; 就可以用了.</p>\r\n<h3 id=\"linux-cli\">Linux CLI</h3>\r\n<p>Brook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password &gt;&gt; ./brook.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\r\n<p>这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 <code>2&gt;&amp;1</code> 表示把 stderr 也输出到 stdout 流中.</p>\r\n<h2 id=\"设置-systemd-守护进程\">设置 systemd 守护进程</h2>\r\n<p>使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.</p>\r\n<p>[TODO:挖坑待填]</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"部署翻墙工具-brook\">部署翻墙工具 Brook</h1>\r\n<p><a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">Brook@GitHub</a></p>\r\n<h2 id=\"租赁-vps\">租赁 VPS</h2>\r\n<p>在国内, 要租赁到一个外国 VPS 还是比较麻烦的, 在付款方式上就能拦住不少人.</p>\r\n<p>我选择的是 vultr 这个服务商, 因为他支持使用 PayPal 甚至 支付宝 付款.</p>\r\n<p><a href=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2018/07/24/5b56e6795aa58.png\" alt=\"Vultr-Billing.png\"></a></p>\r\n<p>只是为了翻墙的话, 购买倒数第二 $5/mon 五美元每月的套餐即可. 虽然有更便宜的 $2.5/mon 但是这个服务器将无法分配到公网 IPv4 地址, 只有 IPv6...</p>\r\n<h3 id=\"测试-vps-连接稳定性与速度\">测试 VPS 连接稳定性与速度</h3>\r\n<p>首先用 <code>ping</code> 的方式测试 vultr 各机房的网络状况.</p>\r\n<p>vultr 机房一览:</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th align=\"center\">地理位置</th>\r\n<th align=\"left\">域名</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Tokyo</td>\r\n<td align=\"left\"><a href=\"hnd-jp-ping.vultr.com\" class=\"uri\">hnd-jp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Singapore</td>\r\n<td align=\"left\"><a href=\"sgp-ping.vultr.com\" class=\"uri\">sgp-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Amsterdam</td>\r\n<td align=\"left\"><a href=\"ams-nl-ping.vultr.com\" class=\"uri\">ams-nl-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Paris</td>\r\n<td align=\"left\"><a href=\"par-fr-ping.vultr.com\" class=\"uri\">par-fr-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Frankfurt</td>\r\n<td align=\"left\"><a href=\"fra-de-ping.vultr.com\" class=\"uri\">fra-de-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">London</td>\r\n<td align=\"left\"><a href=\"lon-gb-ping.vultr.com\" class=\"uri\">lon-gb-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">New York</td>\r\n<td align=\"left\"><a href=\"nj-us-ping.vultr.com\" class=\"uri\">nj-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Chicago</td>\r\n<td align=\"left\"><a href=\"il-us-ping.vultr.com\" class=\"uri\">il-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Dallas</td>\r\n<td align=\"left\"><a href=\"tx-us-ping.vultr.com\" class=\"uri\">tx-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Atlanta</td>\r\n<td align=\"left\"><a href=\"ga-us-ping.vultr.com\" class=\"uri\">ga-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Los Angeles</td>\r\n<td align=\"left\"><a href=\"lax-ca-us-ping.vultr.com\" class=\"uri\">lax-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Miami</td>\r\n<td align=\"left\"><a href=\"fl-us-ping.vultr.com\" class=\"uri\">fl-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Seattle</td>\r\n<td align=\"left\"><a href=\"wa-us-ping.vultr.com\" class=\"uri\">wa-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td align=\"center\">Silicon Valley</td>\r\n<td align=\"left\"><a href=\"sjo-ca-us-ping.vultr.com\" class=\"uri\">sjo-ca-us-ping.vultr.com</a></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td align=\"center\">Sydney</td>\r\n<td align=\"left\"><a href=\"syd-au-ping.vultr.com\" class=\"uri\">syd-au-ping.vultr.com</a></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>下面这个脚本会将这些机房的域名挨个 ping 20次, 使用 python3 运行它. 不是我不提供操作系统自带的脚本, 只是因为我不会 bash 编程, 也不会 PowerShell 或 Batch. 不过幸好 Python 有 os 与 sys 模块可以调用外部命令.</p>\r\n<ul>\r\n<li>(Windows PowerShell) <code>Start-Job -ScriptBlock {python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt}</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件. (实测发现在 Windows 下后台无法运行, 一开启则停止, 使用绝对路径也不行, 不知道是什么问题, 还是使用前台进程吧, 大不了多开个窗口)</li>\r\n<li>(Linux) 使用 <code>nohup python3 ./ping-vultr.py &gt;&gt; ./ping-vultr-out.txt &amp;</code> 将这个脚本放到后台运行, 输出重定向至 <code>ping-vultr-out.txt</code> 文件.\r\n<ul>\r\n<li>注意, 需要将第 15 行的 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -n 20&quot;)</code> 改为 <code>os.system(&quot;ping &quot; + domains[a] + &quot; -c 20&quot;)</code></li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># !/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 创建一个列表, 储存 vultr 各机房的域名.</span></span><br><span class=\"line\">names = [<span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"Singapore\"</span>, <span class=\"string\">\"Amsterdam\"</span>, <span class=\"string\">\"Paris\"</span>, <span class=\"string\">\"Frankfurt\"</span>, <span class=\"string\">\"London\"</span>, <span class=\"string\">\"New York\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"Chicago\"</span>, <span class=\"string\">\"Dallas\"</span>, <span class=\"string\">\"Atlanta\"</span>, <span class=\"string\">\"Los Angeles\"</span>, <span class=\"string\">\"Miami\"</span>, <span class=\"string\">\"Seattle\"</span>, <span class=\"string\">\"Silicon Valley\"</span>, <span class=\"string\">\"Sydney\"</span>, ]</span><br><span class=\"line\">domains = [<span class=\"string\">\"hnd-jp-ping.vultr.com\"</span>, <span class=\"string\">\"sgp-ping.vultr.com\"</span>, <span class=\"string\">\"ams-nl-ping.vultr.com\"</span>, <span class=\"string\">\"par-fr-ping.vultr.com\"</span>, <span class=\"string\">\"fra-de-ping.vultr.com\"</span>, <span class=\"string\">\"lon-gb-ping.vultr.com\"</span>, <span class=\"string\">\"nj-us-ping.vultr.com\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"il-us-ping.vultr.com\"</span>, <span class=\"string\">\"tx-us-ping.vultr.com\"</span>, <span class=\"string\">\"ga-us-ping.vultr.com\"</span>, <span class=\"string\">\"lax-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"fl-us-ping.vultr.com\"</span>, <span class=\"string\">\"wa-us-ping.vultr.com\"</span>, <span class=\"string\">\"sjo-ca-us-ping.vultr.com\"</span>, <span class=\"string\">\"syd-au-ping.vultr.com\"</span>]</span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &lt; <span class=\"number\">14</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"\\n\\n========================\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"正在 ping 位于 \\\"%s\\\" 的机房\"</span> % names[j], end=<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    sys.stdout.flush()</span><br><span class=\"line\">    os.system(<span class=\"string\">\"ping \"</span> + domains[j] + <span class=\"string\">\" -n 20\"</span>)</span><br><span class=\"line\">    j = j + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">\"Done\\a\"</span>)</span><br></pre></td></tr></table></figure>\r\n<p>从结果中选择一个连接成功次数最多, 丢包率最小的区域, 购买此处机房.</p>\r\n<h2 id=\"部署-brook-服务\">部署 Brook 服务</h2>\r\n<p>Brook 开发了各个平台的版本, 随便选择一个熟悉的操作系统即可. 我这里选择了 Ubuntu 18.04, 因为我日常使用的就是它. 如果你不差钱的话, 也可以选择 Windows Server ( $16/mon 呢 😏)</p>\r\n<h3 id=\"安装-brook\">安装 Brook</h3>\r\n<p>部署 brook 可以先到 Github 项目主页 <a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">txthinking/Brook</a> 下载相关的可执行文件.</p>\r\n<p>64 位桌面 Linux 系统一般下载 arm64 版本</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget <span class=\"string\">\"https://github.com/txthinking/brook/releases/download/v20180707/brook_linux_arm64\"</span></span><br></pre></td></tr></table></figure>\r\n<p>下载完成之后, 直接得到一个可执行文件 (Go 语言编译得到的文件都是这样.) , 可以先将其重命名 <code>mv ./brook_linux_amd64 ./brook</code> 之后可以将其链接到 <code>*/bin</code> 文件夹, 以便在全局使用 <code>brook</code> 指令控制 brook 的运行. 否则你必须 <code>cd</code> 到 brook 所在的文件夹才能操作. 注意文件是否有可执行权限, 如果没有, 使用 <code>chmod +x ./brook</code> 给它添加可执行权限.</p>\r\n<p>另一种方法, 在 snap 商店中已经提供了 brook 程序, 直接下载安装即可. 我知道在 Ubuntu 18.04 有 snap 商店, 其他发行版不知道有没有.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install brook</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"运行-brook\">运行 Brook</h3>\r\n<p>brook 在安装完成之后, 就可以使用 <code>brook &lt;args&gt;</code> 启动运行, 最简单的方法是</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook server -l :port -p password &amp;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>server</code> 参数, 表示将其作为服务运行</li>\r\n<li><code>-l :port</code> 参数将 <code>brook</code> 运行到服务器的某个端口, 将 <code>port</code> 替换为任意一个空闲端口即可.</li>\r\n<li><code>-p password</code> 设置一个密码.</li>\r\n<li><code>nohup</code> 是一个 Linux 系统指令, 将进程放到 shell 之外运行, 否则你一断开 ssh , 包括 brook 在内的所有在此 shell 中运行的程序都会停止.</li>\r\n<li>命令最末尾的 <code>&amp;</code> 符号表示后台运行.</li>\r\n</ul>\r\n<p>Brook 还有其他的运行模式. 比如 <code>raw Socks5</code>, <code>shadowsocks</code> 等. 具体可以看<a href=\"https://github.com/txthinking/brook/wiki\" target=\"_blank\" rel=\"noopener\">项目Wiki</a>.</p>\r\n<p>根据我的了解, Sock5 是一种网络协议, ,它的工作就是把 A 机器接受/发送的数据原封不动地传输给 B 机器. 对于翻墙来说, 因为此协议没有对数据进行加密和混淆, 被 GFW 抓住封 IP 是必然的, 对于翻墙来说没什么用. 而 <a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\" rel=\"noopener\">Shadowsocks</a> 作者已经喝茶, 代码已被删除, 虽然有其他的分支保留了下来, 但是最近的代码更新也隔了好几个月了. 我在 V2ex 论坛上听说(原谅我地址已经找不到了) SS 的加密混淆特征已经被 GFW 掌握, IP 封锁越来越迅速了. 所以使用 SS 的效果可能会很差. 不知道 Brook 的 ShadowSocks 模式和原 Shadowsocks 有什么区别, 但是我认为这种方式可能会比较危险.</p>\r\n<h3 id=\"系统配置-端口与防火墙\">系统配置: 端口与防火墙</h3>\r\n<p>注意, 如果你的系统有防火墙, 需要允许 brook 通过设置的端口, 并且需要同时允许 TCP/UDP 端口.</p>\r\n<p>例如 Ubuntu 使用的防火墙是 <code>ufw</code> , 使用以下指令对 <code>9999</code> 端口(就是你运行 brook 使用的端口) 放行:</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 9999</span><br><span class=\"line\">sudo ufw allow 9999/tcp</span><br><span class=\"line\">sudo ufw allow 9999/udp</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"使用-brook\">使用 Brook</h2>\r\n<h3 id=\"windows-gui\">Windows GUI</h3>\r\n<p>在 GitHub 项目主页上下载时经常遇到莫名失败, 并且速度奇慢无比, 我好不容易下载好了, 在这里放一个度盘吧. (不保证最新) 事实上, 这里提到的使用方法对应的可执行文件我都放到了一个压缩包里, 上传到度盘.</p>\r\n<p>解压密码是: 执掌好运的黑黄之王</p>\r\n<p>PS: 我可喜欢这本小说了.😀</p>\r\n<p><a href=\"https://pan.baidu.com/s/1iXs5S_2i5m2_IZQT_0R66A\" target=\"_blank\" rel=\"noopener\">密码: 3dpu</a></p>\r\n<p>该 GUI 界面傻瓜式操作, 将对应值填进输入栏里, 然后点击 Save 就可以用了. 在托盘区会有一个小钥匙的图标, 右键 <code>troggle</code> 可以开关. 不过 GUI 程序没有设计作为服务端的功能.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/07/13/5b48411dba980.png\" alt=\"Brook Windows GUI 界面\">\r\n<p class=\"caption\">Brook Windows GUI 界面</p>\r\n</div>\r\n<h3 id=\"android-gui\">Android GUI</h3>\r\n<p>一样的, 安装了 apk 包, 把服务器 IP 地址, 端口, 用户名和密码一填, 点击&quot;开始&quot; 就可以用了.</p>\r\n<h3 id=\"linux-cli\">Linux CLI</h3>\r\n<p>Brook 没有提供 Linux 下的 GUI 程序, 只能通过命令行使用. 不过对于 Linux 用户来说并不是什么难事. Brook 各种意义上都非常简单.</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s server_address:port -p password &gt;&gt; ./brook.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\r\n<p>这将把 brook 运行时的信息输出到当前目录下的 brook.log 文件, 虽然我从来没看过, 但是如果出了问题, 有这个文件应该能有所帮助. 命令行里的 <code>2&gt;&amp;1</code> 表示把 stderr 也输出到 stdout 流中.</p>\r\n<h2 id=\"设置-systemd-守护进程\">设置 systemd 守护进程</h2>\r\n<p>使用 Brook 的过程中, 我经常是隔 2~3 天就发现 brook 这个进程在 VPS 上被结束掉了. 正在研究利用 systemd 进程监控守护的方法.</p>\r\n<p>[TODO:挖坑待填]</p>"},{"title":"布置PowerShell工作环境","date":"2018-08-21T06:00:46.000Z","_content":"\n<!--more-->\n\n# 推荐 ConEmu\n\n原生 PowerShell 的使用体验... 怎么说呢, 只谈工作肯定是没问题的, 但是它不好看啊.\n\n首先, 一旦将 PowerShell 字符集切换到 UTF8 , 就会出现输入中文字符时只显示一半的毛病;\n\n其次, 一旦启用 `oh-my-posh` 的 `Agnoster` 主题, 就会发生光标错位的问题.\n\n但是, ConEmu 就没有这些问题...\n\n因为要同时使用 ConEmu 与 Terminal on VsCode, 需要让 ConEmu 启动时启用 `oh-my-posh` 但是使用 VsCode 时不启用.\n\n在 ConEmu 的 task 设置中, 如果直接设置\n\n```\npowershell Start-ConEmu\n```\n\n会导致执行完命令就退出. 需要加上参数 `-NoExit`\n\n```\npowershell -NoExit Start-ConEmu\n```\n\n这样, 执行完我自定义的函数后, PowerShell 就不会退出了.\n\n# Git\n\n## Git Windows version\n\n在 [官网](https://git-scm.com/downloads) 安装对应版本.\n\n## posh-git\n\n[posh-git](https://www.preview.powershellgallery.com/packages/posh-git) 是一个 PowerShell 模块, 主要有以下功能:\n\n- 提供了 PowerShell 下 git 命令的补全功能;\n- cmdlet 格式的 git 命令; (并不打算用...)\n- PowerShell 中的 Git 状态提示符.(oh-my-posh 的依赖)\n\n需要使用 `Import-Module` 启用.\n\n# Vim\n\n## 使用安装包安装\n\n[参考官网](https://www.vim.org/download.php#pc)\n\n## 使用 chocolatey 安装\n\n[我的上篇文章](/2018/08/PowerShell-安装-Chocolatey/#先安装一个-vim-试试)\n\n# oh-my-posh\n\n喜欢 `oh-my-zsh` 的终端风格, 在网上了解到 PowerShell 也有一款叫做 `oh-my-posh` 的模块.\n\n这里是它的官网: [oh-my-posh](https://github.com/JanDeDobbeleer/oh-my-posh) .\n\n安装该模块, 先在 PowerShell 中使用 `Find-Module oh-my-posh` 查找是否能连接上 [PowerShell Gallery](https://www.powershellgallery.com).\n\n如果输出以下信息, \n\n```powershell\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.0.223    oh-my-posh                          PSGallery            Theming capabilities for the PowerShell prompt in ConEmu\n```\n\n就直接使用 `Install-Module oh-my-posh` 安装. 之后可以使用 `Import-Module oh-my-posh` 载入模块, 使用 `Set-Theme XXX` 设置主题. \n\n<!--最好看的主题是 Agnoster-->\n\n建议在 ConEmu 中使用.\n\n# user.poshrc\n\n要想让 PowerShell 执行用户编辑的脚本, 需要设置安全策略:\n\n```powershell\n# 查询当前安全策略\nGet-ExecutionPolicy\n# 设置当前安全策略\nSet-ExecutionPolicy XXX\n## 可设置的策略:\n### Restricted          不运行任何脚本, 包括配置文件\n### AllSigned           所有脚本必须签名\n### RemoteSigned        不限制本地编辑的脚本, 但是从网络下载的脚本必须有签名\n### Unrestricted        完全不受限制, 但是如果运行从网络下载的脚本, 系统会提示\n### Bypass              啥都不管, 随便你运行什么也一句话都不说\n### Default             Restricted\n### Undefined           从当前作用域删除当前分配的执行策, 此参数将不会删除在组策略作用域中设置的执行策略. (没接触过相关领域, 这个看不懂了...)\n```\n\n## 编辑 $PROFILE\n\nPowerShell 的 `$PROFILE` 变量存储它的配置文件路径(这个配置文件对本机所有用户生效, 不过很多 Windows 都是单用户吧), 在 PowerShell 启动时便会运行. 如果没动过它的话, 它就是空的. \n\n最好将自己的设置项放在用户目录中, `$PROFILE` 里只需要放一句 \"执行对应脚本\" 就好了.\n\n我自己的 `$PROFILE` 里只有这个内容:\n\n```powershell\n. $HOME\\.psconfig\\poshrc.ps1\n```\n\n意思是执行 `poshrc.ps1` 脚本, 那是个自己编辑的文件. (注意有个点号 `.`, 这是为了共享变量的作用域!)\n\n## 组织配置目录\n\n按照自己的习惯, 我在自己的 `$HOME` 目录下新建了一个目录 `.psconfig` . 这个目录有着如下结构:\n\n```\n.psconfig/\n    poshrc.ps1      //存放用户配置, 主要\n    alias.ps1       //存放 alias\n    userfunc.ps1    //存放 自定义函数\n```\n\n### poshrc.ps1\n\n这是 `.psconfig` 的主要部分, 要设置什么就都写进这个文件里. 为了方便清晰, 我将设置别名(alias)和定义函数的文件分开了, 就是同路径下的 `alias.ps1` 和 `userfunc.ps1` 文件.\n\n我的 `poshrc.ps1` 内容大概为以下部分\n\n```powershell\n# Define functions\n. $Home/.psconfig/userfunc.ps1\n\n# Set alias\nImport-Alias $Home/.psconfig/alias.ps1\n\n# Set variabilities\n# ...\n\n# Others\n```\n\n0. 首先, 定义函数(放在一个单独的文件里了);\n0. 之后, 设置别名, 这里有两种办法, 一种是 `Set-Alias 别名 原名`, 一种是 `Import-Alias`. 如果是前者, 就像普通的脚本一样运行它就好, 如果是后者, 虽然不限制文件后缀名, 只要是个纯文本就行, 但是需要特殊的语法:\n0. 再之后, 就设定一些经常使用的变量. 如果很多, 又有针对性, 也可以单独放一个文件.\n0. 最后, 就是其他要设置的东西.\n\n### alias.ps1\n\n这个文件里存放定义的别名, 可以使用 `Set-Alias XXX YYY` 的语法一个个设置, 也可以写成 CSV 格式通过 `Import-Alias` 导入.\n\n#### csv(逗号分割值) 文件格式\n\n```powershell\n# Import-Alias 需要使用以下语法:\n#别名   原名             鬼知道什么东西   作用域\n#====== =============== =============== =======\n\"grep\", \"findstr.exe\",  \"\" ,            \"AllScope\"\n# 一行一条, 空格可忽略.\n# 第三项实在不知道是什么, 但是又必须要有...\n```\n\n### userfunc.ps1\n\n```powershell\nfunction name($args) {\n  ...\n}\n```\n\n定义函数. 对于函数名, 官方建议使用驼峰命名法, 就和其他 cmdlet 差不多. 确实很好看.\n\n比如, 我写这个博客, 觉得每次 `Hexo generate` 生成的文件里空行太多了, 而且文本位置也不固定, 导致每次 `git push` 的时候都有大量不必要的修改被上传, 再加上想要把. 于是想要重新定义一个工作流:\n\n```powershell\nfunction Make-Blog() {\n  $origin_location = Get-Location       # 获取当前路径, 做完事跳回来\n  Set-Location $Blog                    # 这个变量定义在 poshrc 里了, 是博客的根目录\n  hexo g\n  jdf format ./public                   # 调用 jdf 对 html 文档进行格式化\n  git add *\n  git commit\n  git push                              # 把博客的所有东西存到 GitHub(public/ 和 themes/ 设置了 gitignore)\n  cp -Force ./public/* ../.hexo.deploy  # 把要发布的内容复制到另一目录.\n  Set-Location ../.hexo.deploy\n  git add *\n  git commit -m \"Uploaded\"\n  git push                              # 把发布的页面推送到这个博客的仓库\n  Set-Location $origin_location\n}\n```\n","source":"_posts/布置PowerShell工作环境.md","raw":"---\ntitle: 布置PowerShell工作环境\ntags:\n  - PowerShell\ncategories:\n  - 日常\ndate: 2018-08-21 14:00:46\n---\n\n<!--more-->\n\n# 推荐 ConEmu\n\n原生 PowerShell 的使用体验... 怎么说呢, 只谈工作肯定是没问题的, 但是它不好看啊.\n\n首先, 一旦将 PowerShell 字符集切换到 UTF8 , 就会出现输入中文字符时只显示一半的毛病;\n\n其次, 一旦启用 `oh-my-posh` 的 `Agnoster` 主题, 就会发生光标错位的问题.\n\n但是, ConEmu 就没有这些问题...\n\n因为要同时使用 ConEmu 与 Terminal on VsCode, 需要让 ConEmu 启动时启用 `oh-my-posh` 但是使用 VsCode 时不启用.\n\n在 ConEmu 的 task 设置中, 如果直接设置\n\n```\npowershell Start-ConEmu\n```\n\n会导致执行完命令就退出. 需要加上参数 `-NoExit`\n\n```\npowershell -NoExit Start-ConEmu\n```\n\n这样, 执行完我自定义的函数后, PowerShell 就不会退出了.\n\n# Git\n\n## Git Windows version\n\n在 [官网](https://git-scm.com/downloads) 安装对应版本.\n\n## posh-git\n\n[posh-git](https://www.preview.powershellgallery.com/packages/posh-git) 是一个 PowerShell 模块, 主要有以下功能:\n\n- 提供了 PowerShell 下 git 命令的补全功能;\n- cmdlet 格式的 git 命令; (并不打算用...)\n- PowerShell 中的 Git 状态提示符.(oh-my-posh 的依赖)\n\n需要使用 `Import-Module` 启用.\n\n# Vim\n\n## 使用安装包安装\n\n[参考官网](https://www.vim.org/download.php#pc)\n\n## 使用 chocolatey 安装\n\n[我的上篇文章](/2018/08/PowerShell-安装-Chocolatey/#先安装一个-vim-试试)\n\n# oh-my-posh\n\n喜欢 `oh-my-zsh` 的终端风格, 在网上了解到 PowerShell 也有一款叫做 `oh-my-posh` 的模块.\n\n这里是它的官网: [oh-my-posh](https://github.com/JanDeDobbeleer/oh-my-posh) .\n\n安装该模块, 先在 PowerShell 中使用 `Find-Module oh-my-posh` 查找是否能连接上 [PowerShell Gallery](https://www.powershellgallery.com).\n\n如果输出以下信息, \n\n```powershell\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.0.223    oh-my-posh                          PSGallery            Theming capabilities for the PowerShell prompt in ConEmu\n```\n\n就直接使用 `Install-Module oh-my-posh` 安装. 之后可以使用 `Import-Module oh-my-posh` 载入模块, 使用 `Set-Theme XXX` 设置主题. \n\n<!--最好看的主题是 Agnoster-->\n\n建议在 ConEmu 中使用.\n\n# user.poshrc\n\n要想让 PowerShell 执行用户编辑的脚本, 需要设置安全策略:\n\n```powershell\n# 查询当前安全策略\nGet-ExecutionPolicy\n# 设置当前安全策略\nSet-ExecutionPolicy XXX\n## 可设置的策略:\n### Restricted          不运行任何脚本, 包括配置文件\n### AllSigned           所有脚本必须签名\n### RemoteSigned        不限制本地编辑的脚本, 但是从网络下载的脚本必须有签名\n### Unrestricted        完全不受限制, 但是如果运行从网络下载的脚本, 系统会提示\n### Bypass              啥都不管, 随便你运行什么也一句话都不说\n### Default             Restricted\n### Undefined           从当前作用域删除当前分配的执行策, 此参数将不会删除在组策略作用域中设置的执行策略. (没接触过相关领域, 这个看不懂了...)\n```\n\n## 编辑 $PROFILE\n\nPowerShell 的 `$PROFILE` 变量存储它的配置文件路径(这个配置文件对本机所有用户生效, 不过很多 Windows 都是单用户吧), 在 PowerShell 启动时便会运行. 如果没动过它的话, 它就是空的. \n\n最好将自己的设置项放在用户目录中, `$PROFILE` 里只需要放一句 \"执行对应脚本\" 就好了.\n\n我自己的 `$PROFILE` 里只有这个内容:\n\n```powershell\n. $HOME\\.psconfig\\poshrc.ps1\n```\n\n意思是执行 `poshrc.ps1` 脚本, 那是个自己编辑的文件. (注意有个点号 `.`, 这是为了共享变量的作用域!)\n\n## 组织配置目录\n\n按照自己的习惯, 我在自己的 `$HOME` 目录下新建了一个目录 `.psconfig` . 这个目录有着如下结构:\n\n```\n.psconfig/\n    poshrc.ps1      //存放用户配置, 主要\n    alias.ps1       //存放 alias\n    userfunc.ps1    //存放 自定义函数\n```\n\n### poshrc.ps1\n\n这是 `.psconfig` 的主要部分, 要设置什么就都写进这个文件里. 为了方便清晰, 我将设置别名(alias)和定义函数的文件分开了, 就是同路径下的 `alias.ps1` 和 `userfunc.ps1` 文件.\n\n我的 `poshrc.ps1` 内容大概为以下部分\n\n```powershell\n# Define functions\n. $Home/.psconfig/userfunc.ps1\n\n# Set alias\nImport-Alias $Home/.psconfig/alias.ps1\n\n# Set variabilities\n# ...\n\n# Others\n```\n\n0. 首先, 定义函数(放在一个单独的文件里了);\n0. 之后, 设置别名, 这里有两种办法, 一种是 `Set-Alias 别名 原名`, 一种是 `Import-Alias`. 如果是前者, 就像普通的脚本一样运行它就好, 如果是后者, 虽然不限制文件后缀名, 只要是个纯文本就行, 但是需要特殊的语法:\n0. 再之后, 就设定一些经常使用的变量. 如果很多, 又有针对性, 也可以单独放一个文件.\n0. 最后, 就是其他要设置的东西.\n\n### alias.ps1\n\n这个文件里存放定义的别名, 可以使用 `Set-Alias XXX YYY` 的语法一个个设置, 也可以写成 CSV 格式通过 `Import-Alias` 导入.\n\n#### csv(逗号分割值) 文件格式\n\n```powershell\n# Import-Alias 需要使用以下语法:\n#别名   原名             鬼知道什么东西   作用域\n#====== =============== =============== =======\n\"grep\", \"findstr.exe\",  \"\" ,            \"AllScope\"\n# 一行一条, 空格可忽略.\n# 第三项实在不知道是什么, 但是又必须要有...\n```\n\n### userfunc.ps1\n\n```powershell\nfunction name($args) {\n  ...\n}\n```\n\n定义函数. 对于函数名, 官方建议使用驼峰命名法, 就和其他 cmdlet 差不多. 确实很好看.\n\n比如, 我写这个博客, 觉得每次 `Hexo generate` 生成的文件里空行太多了, 而且文本位置也不固定, 导致每次 `git push` 的时候都有大量不必要的修改被上传, 再加上想要把. 于是想要重新定义一个工作流:\n\n```powershell\nfunction Make-Blog() {\n  $origin_location = Get-Location       # 获取当前路径, 做完事跳回来\n  Set-Location $Blog                    # 这个变量定义在 poshrc 里了, 是博客的根目录\n  hexo g\n  jdf format ./public                   # 调用 jdf 对 html 文档进行格式化\n  git add *\n  git commit\n  git push                              # 把博客的所有东西存到 GitHub(public/ 和 themes/ 设置了 gitignore)\n  cp -Force ./public/* ../.hexo.deploy  # 把要发布的内容复制到另一目录.\n  Set-Location ../.hexo.deploy\n  git add *\n  git commit -m \"Uploaded\"\n  git push                              # 把发布的页面推送到这个博客的仓库\n  Set-Location $origin_location\n}\n```\n","slug":"布置PowerShell工作环境","published":1,"updated":"2018-08-23T17:46:10.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw7m002iw8lkxu7737sw","content":"<a id=\"more\"></a>\r\n<h1 id=\"推荐-conemu\">推荐 ConEmu</h1>\r\n<p>原生 PowerShell 的使用体验... 怎么说呢, 只谈工作肯定是没问题的, 但是它不好看啊.</p>\r\n<p>首先, 一旦将 PowerShell 字符集切换到 UTF8 , 就会出现输入中文字符时只显示一半的毛病;</p>\r\n<p>其次, 一旦启用 <code>oh-my-posh</code> 的 <code>Agnoster</code> 主题, 就会发生光标错位的问题.</p>\r\n<p>但是, ConEmu 就没有这些问题...</p>\r\n<p>因为要同时使用 ConEmu 与 Terminal on VsCode, 需要让 ConEmu 启动时启用 <code>oh-my-posh</code> 但是使用 VsCode 时不启用.</p>\r\n<p>在 ConEmu 的 task 设置中, 如果直接设置</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powershell Start-ConEmu</span><br></pre></td></tr></table></figure>\r\n<p>会导致执行完命令就退出. 需要加上参数 <code>-NoExit</code></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powershell -NoExit Start-ConEmu</span><br></pre></td></tr></table></figure>\r\n<p>这样, 执行完我自定义的函数后, PowerShell 就不会退出了.</p>\r\n<h1 id=\"git\">Git</h1>\r\n<h2 id=\"git-windows-version\">Git Windows version</h2>\r\n<p>在 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">官网</a> 安装对应版本.</p>\r\n<h2 id=\"posh-git\">posh-git</h2>\r\n<p><a href=\"https://www.preview.powershellgallery.com/packages/posh-git\" target=\"_blank\" rel=\"noopener\">posh-git</a> 是一个 PowerShell 模块, 主要有以下功能:</p>\r\n<ul>\r\n<li>提供了 PowerShell 下 git 命令的补全功能;</li>\r\n<li>cmdlet 格式的 git 命令; (并不打算用...)</li>\r\n<li>PowerShell 中的 Git 状态提示符.(oh-my-posh 的依赖)</li>\r\n</ul>\r\n<p>需要使用 <code>Import-Module</code> 启用.</p>\r\n<h1 id=\"vim\">Vim</h1>\r\n<h2 id=\"使用安装包安装\">使用安装包安装</h2>\r\n<p><a href=\"https://www.vim.org/download.php#pc\" target=\"_blank\" rel=\"noopener\">参考官网</a></p>\r\n<h2 id=\"使用-chocolatey-安装\">使用 chocolatey 安装</h2>\r\n<p><a href=\"/2018/08/PowerShell-安装-Chocolatey/#先安装一个-vim-试试\">我的上篇文章</a></p>\r\n<h1 id=\"oh-my-posh\">oh-my-posh</h1>\r\n<p>喜欢 <code>oh-my-zsh</code> 的终端风格, 在网上了解到 PowerShell 也有一款叫做 <code>oh-my-posh</code> 的模块.</p>\r\n<p>这里是它的官网: <a href=\"https://github.com/JanDeDobbeleer/oh-my-posh\" target=\"_blank\" rel=\"noopener\">oh-my-posh</a> .</p>\r\n<p>安装该模块, 先在 PowerShell 中使用 <code>Find-Module oh-my-posh</code> 查找是否能连接上 <a href=\"https://www.powershellgallery.com\" target=\"_blank\" rel=\"noopener\">PowerShell Gallery</a>.</p>\r\n<p>如果输出以下信息,</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version    Name                                Repository           Description</span><br><span class=\"line\">-------    ----                                ----------           -----------</span><br><span class=\"line\"><span class=\"number\">2.0</span>.<span class=\"number\">223</span>    oh-my-posh                          PSGallery            Theming capabilities <span class=\"keyword\">for</span> the PowerShell prompt <span class=\"keyword\">in</span> ConEmu</span><br></pre></td></tr></table></figure>\r\n<p>就直接使用 <code>Install-Module oh-my-posh</code> 安装. 之后可以使用 <code>Import-Module oh-my-posh</code> 载入模块, 使用 <code>Set-Theme XXX</code> 设置主题.</p>\r\n<!--最好看的主题是 Agnoster-->\r\n<p>建议在 ConEmu 中使用.</p>\r\n<h1 id=\"user.poshrc\">user.poshrc</h1>\r\n<p>要想让 PowerShell 执行用户编辑的脚本, 需要设置安全策略:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询当前安全策略</span></span><br><span class=\"line\"><span class=\"built_in\">Get-ExecutionPolicy</span></span><br><span class=\"line\"><span class=\"comment\"># 设置当前安全策略</span></span><br><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> XXX</span><br><span class=\"line\"><span class=\"comment\">## 可设置的策略:</span></span><br><span class=\"line\"><span class=\"comment\">### Restricted          不运行任何脚本, 包括配置文件</span></span><br><span class=\"line\"><span class=\"comment\">### AllSigned           所有脚本必须签名</span></span><br><span class=\"line\"><span class=\"comment\">### RemoteSigned        不限制本地编辑的脚本, 但是从网络下载的脚本必须有签名</span></span><br><span class=\"line\"><span class=\"comment\">### Unrestricted        完全不受限制, 但是如果运行从网络下载的脚本, 系统会提示</span></span><br><span class=\"line\"><span class=\"comment\">### Bypass              啥都不管, 随便你运行什么也一句话都不说</span></span><br><span class=\"line\"><span class=\"comment\">### Default             Restricted</span></span><br><span class=\"line\"><span class=\"comment\">### Undefined           从当前作用域删除当前分配的执行策, 此参数将不会删除在组策略作用域中设置的执行策略. (没接触过相关领域, 这个看不懂了...)</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"编辑-profile\">编辑 $PROFILE</h2>\r\n<p>PowerShell 的 <code>$PROFILE</code> 变量存储它的配置文件路径(这个配置文件对本机所有用户生效, 不过很多 Windows 都是单用户吧), 在 PowerShell 启动时便会运行. 如果没动过它的话, 它就是空的.</p>\r\n<p>最好将自己的设置项放在用户目录中, <code>$PROFILE</code> 里只需要放一句 &quot;执行对应脚本&quot; 就好了.</p>\r\n<p>我自己的 <code>$PROFILE</code> 里只有这个内容:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. <span class=\"variable\">$HOME</span>\\.psconfig\\poshrc.ps1</span><br></pre></td></tr></table></figure>\r\n<p>意思是执行 <code>poshrc.ps1</code> 脚本, 那是个自己编辑的文件. (注意有个点号 <code>.</code>, 这是为了共享变量的作用域!)</p>\r\n<h2 id=\"组织配置目录\">组织配置目录</h2>\r\n<p>按照自己的习惯, 我在自己的 <code>$HOME</code> 目录下新建了一个目录 <code>.psconfig</code> . 这个目录有着如下结构:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.psconfig/</span><br><span class=\"line\">    poshrc.ps1      //存放用户配置, 主要</span><br><span class=\"line\">    alias.ps1       //存放 alias</span><br><span class=\"line\">    userfunc.ps1    //存放 自定义函数</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"poshrc.ps1\">poshrc.ps1</h3>\r\n<p>这是 <code>.psconfig</code> 的主要部分, 要设置什么就都写进这个文件里. 为了方便清晰, 我将设置别名(alias)和定义函数的文件分开了, 就是同路径下的 <code>alias.ps1</code> 和 <code>userfunc.ps1</code> 文件.</p>\r\n<p>我的 <code>poshrc.ps1</code> 内容大概为以下部分</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define functions</span></span><br><span class=\"line\">. <span class=\"variable\">$Home</span>/.psconfig/userfunc.ps1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set alias</span></span><br><span class=\"line\"><span class=\"built_in\">Import-Alias</span> <span class=\"variable\">$Home</span>/.psconfig/alias.ps1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set variabilities</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Others</span></span><br></pre></td></tr></table></figure>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 定义函数(放在一个单独的文件里了);</li>\r\n<li>之后, 设置别名, 这里有两种办法, 一种是 <code>Set-Alias 别名 原名</code>, 一种是 <code>Import-Alias</code>. 如果是前者, 就像普通的脚本一样运行它就好, 如果是后者, 虽然不限制文件后缀名, 只要是个纯文本就行, 但是需要特殊的语法:</li>\r\n<li>再之后, 就设定一些经常使用的变量. 如果很多, 又有针对性, 也可以单独放一个文件.</li>\r\n<li>最后, 就是其他要设置的东西.</li>\r\n</ol>\r\n<h3 id=\"alias.ps1\">alias.ps1</h3>\r\n<p>这个文件里存放定义的别名, 可以使用 <code>Set-Alias XXX YYY</code> 的语法一个个设置, 也可以写成 CSV 格式通过 <code>Import-Alias</code> 导入.</p>\r\n<h4 id=\"csv逗号分割值-文件格式\">csv(逗号分割值) 文件格式</h4>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Import-Alias 需要使用以下语法:</span></span><br><span class=\"line\"><span class=\"comment\">#别名   原名             鬼知道什么东西   作用域</span></span><br><span class=\"line\"><span class=\"comment\">#====== =============== =============== =======</span></span><br><span class=\"line\"><span class=\"string\">\"grep\"</span>, <span class=\"string\">\"findstr.exe\"</span>,  <span class=\"string\">\"\"</span> ,            <span class=\"string\">\"AllScope\"</span></span><br><span class=\"line\"><span class=\"comment\"># 一行一条, 空格可忽略.</span></span><br><span class=\"line\"><span class=\"comment\"># 第三项实在不知道是什么, 但是又必须要有...</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"userfunc.ps1\">userfunc.ps1</h3>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> name(<span class=\"variable\">$args</span>) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>定义函数. 对于函数名, 官方建议使用驼峰命名法, 就和其他 cmdlet 差不多. 确实很好看.</p>\r\n<p>比如, 我写这个博客, 觉得每次 <code>Hexo generate</code> 生成的文件里空行太多了, 而且文本位置也不固定, 导致每次 <code>git push</code> 的时候都有大量不必要的修改被上传, 再加上想要把. 于是想要重新定义一个工作流:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> Make-Blog() &#123;</span><br><span class=\"line\">  <span class=\"variable\">$origin_location</span> = <span class=\"built_in\">Get-Location</span>       <span class=\"comment\"># 获取当前路径, 做完事跳回来</span></span><br><span class=\"line\">  <span class=\"built_in\">Set-Location</span> <span class=\"variable\">$Blog</span>                    <span class=\"comment\"># 这个变量定义在 poshrc 里了, 是博客的根目录</span></span><br><span class=\"line\">  hexo g</span><br><span class=\"line\">  jdf format ./public                   <span class=\"comment\"># 调用 jdf 对 html 文档进行格式化</span></span><br><span class=\"line\">  git add *</span><br><span class=\"line\">  git commit</span><br><span class=\"line\">  git push                              <span class=\"comment\"># 把博客的所有东西存到 GitHub(public/ 和 themes/ 设置了 gitignore)</span></span><br><span class=\"line\">  cp -Force ./public/* ../.hexo.deploy  <span class=\"comment\"># 把要发布的内容复制到另一目录.</span></span><br><span class=\"line\">  <span class=\"built_in\">Set-Location</span> ../.hexo.deploy</span><br><span class=\"line\">  git add *</span><br><span class=\"line\">  git commit -m <span class=\"string\">\"Uploaded\"</span></span><br><span class=\"line\">  git push                              <span class=\"comment\"># 把发布的页面推送到这个博客的仓库</span></span><br><span class=\"line\">  <span class=\"built_in\">Set-Location</span> <span class=\"variable\">$origin_location</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"推荐-conemu\">推荐 ConEmu</h1>\r\n<p>原生 PowerShell 的使用体验... 怎么说呢, 只谈工作肯定是没问题的, 但是它不好看啊.</p>\r\n<p>首先, 一旦将 PowerShell 字符集切换到 UTF8 , 就会出现输入中文字符时只显示一半的毛病;</p>\r\n<p>其次, 一旦启用 <code>oh-my-posh</code> 的 <code>Agnoster</code> 主题, 就会发生光标错位的问题.</p>\r\n<p>但是, ConEmu 就没有这些问题...</p>\r\n<p>因为要同时使用 ConEmu 与 Terminal on VsCode, 需要让 ConEmu 启动时启用 <code>oh-my-posh</code> 但是使用 VsCode 时不启用.</p>\r\n<p>在 ConEmu 的 task 设置中, 如果直接设置</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powershell Start-ConEmu</span><br></pre></td></tr></table></figure>\r\n<p>会导致执行完命令就退出. 需要加上参数 <code>-NoExit</code></p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powershell -NoExit Start-ConEmu</span><br></pre></td></tr></table></figure>\r\n<p>这样, 执行完我自定义的函数后, PowerShell 就不会退出了.</p>\r\n<h1 id=\"git\">Git</h1>\r\n<h2 id=\"git-windows-version\">Git Windows version</h2>\r\n<p>在 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">官网</a> 安装对应版本.</p>\r\n<h2 id=\"posh-git\">posh-git</h2>\r\n<p><a href=\"https://www.preview.powershellgallery.com/packages/posh-git\" target=\"_blank\" rel=\"noopener\">posh-git</a> 是一个 PowerShell 模块, 主要有以下功能:</p>\r\n<ul>\r\n<li>提供了 PowerShell 下 git 命令的补全功能;</li>\r\n<li>cmdlet 格式的 git 命令; (并不打算用...)</li>\r\n<li>PowerShell 中的 Git 状态提示符.(oh-my-posh 的依赖)</li>\r\n</ul>\r\n<p>需要使用 <code>Import-Module</code> 启用.</p>\r\n<h1 id=\"vim\">Vim</h1>\r\n<h2 id=\"使用安装包安装\">使用安装包安装</h2>\r\n<p><a href=\"https://www.vim.org/download.php#pc\" target=\"_blank\" rel=\"noopener\">参考官网</a></p>\r\n<h2 id=\"使用-chocolatey-安装\">使用 chocolatey 安装</h2>\r\n<p><a href=\"/2018/08/PowerShell-安装-Chocolatey/#先安装一个-vim-试试\">我的上篇文章</a></p>\r\n<h1 id=\"oh-my-posh\">oh-my-posh</h1>\r\n<p>喜欢 <code>oh-my-zsh</code> 的终端风格, 在网上了解到 PowerShell 也有一款叫做 <code>oh-my-posh</code> 的模块.</p>\r\n<p>这里是它的官网: <a href=\"https://github.com/JanDeDobbeleer/oh-my-posh\" target=\"_blank\" rel=\"noopener\">oh-my-posh</a> .</p>\r\n<p>安装该模块, 先在 PowerShell 中使用 <code>Find-Module oh-my-posh</code> 查找是否能连接上 <a href=\"https://www.powershellgallery.com\" target=\"_blank\" rel=\"noopener\">PowerShell Gallery</a>.</p>\r\n<p>如果输出以下信息,</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version    Name                                Repository           Description</span><br><span class=\"line\">-------    ----                                ----------           -----------</span><br><span class=\"line\"><span class=\"number\">2.0</span>.<span class=\"number\">223</span>    oh-my-posh                          PSGallery            Theming capabilities <span class=\"keyword\">for</span> the PowerShell prompt <span class=\"keyword\">in</span> ConEmu</span><br></pre></td></tr></table></figure>\r\n<p>就直接使用 <code>Install-Module oh-my-posh</code> 安装. 之后可以使用 <code>Import-Module oh-my-posh</code> 载入模块, 使用 <code>Set-Theme XXX</code> 设置主题.</p>\r\n<!--最好看的主题是 Agnoster-->\r\n<p>建议在 ConEmu 中使用.</p>\r\n<h1 id=\"user.poshrc\">user.poshrc</h1>\r\n<p>要想让 PowerShell 执行用户编辑的脚本, 需要设置安全策略:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询当前安全策略</span></span><br><span class=\"line\"><span class=\"built_in\">Get-ExecutionPolicy</span></span><br><span class=\"line\"><span class=\"comment\"># 设置当前安全策略</span></span><br><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> XXX</span><br><span class=\"line\"><span class=\"comment\">## 可设置的策略:</span></span><br><span class=\"line\"><span class=\"comment\">### Restricted          不运行任何脚本, 包括配置文件</span></span><br><span class=\"line\"><span class=\"comment\">### AllSigned           所有脚本必须签名</span></span><br><span class=\"line\"><span class=\"comment\">### RemoteSigned        不限制本地编辑的脚本, 但是从网络下载的脚本必须有签名</span></span><br><span class=\"line\"><span class=\"comment\">### Unrestricted        完全不受限制, 但是如果运行从网络下载的脚本, 系统会提示</span></span><br><span class=\"line\"><span class=\"comment\">### Bypass              啥都不管, 随便你运行什么也一句话都不说</span></span><br><span class=\"line\"><span class=\"comment\">### Default             Restricted</span></span><br><span class=\"line\"><span class=\"comment\">### Undefined           从当前作用域删除当前分配的执行策, 此参数将不会删除在组策略作用域中设置的执行策略. (没接触过相关领域, 这个看不懂了...)</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"编辑-profile\">编辑 $PROFILE</h2>\r\n<p>PowerShell 的 <code>$PROFILE</code> 变量存储它的配置文件路径(这个配置文件对本机所有用户生效, 不过很多 Windows 都是单用户吧), 在 PowerShell 启动时便会运行. 如果没动过它的话, 它就是空的.</p>\r\n<p>最好将自己的设置项放在用户目录中, <code>$PROFILE</code> 里只需要放一句 &quot;执行对应脚本&quot; 就好了.</p>\r\n<p>我自己的 <code>$PROFILE</code> 里只有这个内容:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. <span class=\"variable\">$HOME</span>\\.psconfig\\poshrc.ps1</span><br></pre></td></tr></table></figure>\r\n<p>意思是执行 <code>poshrc.ps1</code> 脚本, 那是个自己编辑的文件. (注意有个点号 <code>.</code>, 这是为了共享变量的作用域!)</p>\r\n<h2 id=\"组织配置目录\">组织配置目录</h2>\r\n<p>按照自己的习惯, 我在自己的 <code>$HOME</code> 目录下新建了一个目录 <code>.psconfig</code> . 这个目录有着如下结构:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.psconfig/</span><br><span class=\"line\">    poshrc.ps1      //存放用户配置, 主要</span><br><span class=\"line\">    alias.ps1       //存放 alias</span><br><span class=\"line\">    userfunc.ps1    //存放 自定义函数</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"poshrc.ps1\">poshrc.ps1</h3>\r\n<p>这是 <code>.psconfig</code> 的主要部分, 要设置什么就都写进这个文件里. 为了方便清晰, 我将设置别名(alias)和定义函数的文件分开了, 就是同路径下的 <code>alias.ps1</code> 和 <code>userfunc.ps1</code> 文件.</p>\r\n<p>我的 <code>poshrc.ps1</code> 内容大概为以下部分</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define functions</span></span><br><span class=\"line\">. <span class=\"variable\">$Home</span>/.psconfig/userfunc.ps1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set alias</span></span><br><span class=\"line\"><span class=\"built_in\">Import-Alias</span> <span class=\"variable\">$Home</span>/.psconfig/alias.ps1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set variabilities</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Others</span></span><br></pre></td></tr></table></figure>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 定义函数(放在一个单独的文件里了);</li>\r\n<li>之后, 设置别名, 这里有两种办法, 一种是 <code>Set-Alias 别名 原名</code>, 一种是 <code>Import-Alias</code>. 如果是前者, 就像普通的脚本一样运行它就好, 如果是后者, 虽然不限制文件后缀名, 只要是个纯文本就行, 但是需要特殊的语法:</li>\r\n<li>再之后, 就设定一些经常使用的变量. 如果很多, 又有针对性, 也可以单独放一个文件.</li>\r\n<li>最后, 就是其他要设置的东西.</li>\r\n</ol>\r\n<h3 id=\"alias.ps1\">alias.ps1</h3>\r\n<p>这个文件里存放定义的别名, 可以使用 <code>Set-Alias XXX YYY</code> 的语法一个个设置, 也可以写成 CSV 格式通过 <code>Import-Alias</code> 导入.</p>\r\n<h4 id=\"csv逗号分割值-文件格式\">csv(逗号分割值) 文件格式</h4>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Import-Alias 需要使用以下语法:</span></span><br><span class=\"line\"><span class=\"comment\">#别名   原名             鬼知道什么东西   作用域</span></span><br><span class=\"line\"><span class=\"comment\">#====== =============== =============== =======</span></span><br><span class=\"line\"><span class=\"string\">\"grep\"</span>, <span class=\"string\">\"findstr.exe\"</span>,  <span class=\"string\">\"\"</span> ,            <span class=\"string\">\"AllScope\"</span></span><br><span class=\"line\"><span class=\"comment\"># 一行一条, 空格可忽略.</span></span><br><span class=\"line\"><span class=\"comment\"># 第三项实在不知道是什么, 但是又必须要有...</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"userfunc.ps1\">userfunc.ps1</h3>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> name(<span class=\"variable\">$args</span>) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>定义函数. 对于函数名, 官方建议使用驼峰命名法, 就和其他 cmdlet 差不多. 确实很好看.</p>\r\n<p>比如, 我写这个博客, 觉得每次 <code>Hexo generate</code> 生成的文件里空行太多了, 而且文本位置也不固定, 导致每次 <code>git push</code> 的时候都有大量不必要的修改被上传, 再加上想要把. 于是想要重新定义一个工作流:</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> Make-Blog() &#123;</span><br><span class=\"line\">  <span class=\"variable\">$origin_location</span> = <span class=\"built_in\">Get-Location</span>       <span class=\"comment\"># 获取当前路径, 做完事跳回来</span></span><br><span class=\"line\">  <span class=\"built_in\">Set-Location</span> <span class=\"variable\">$Blog</span>                    <span class=\"comment\"># 这个变量定义在 poshrc 里了, 是博客的根目录</span></span><br><span class=\"line\">  hexo g</span><br><span class=\"line\">  jdf format ./public                   <span class=\"comment\"># 调用 jdf 对 html 文档进行格式化</span></span><br><span class=\"line\">  git add *</span><br><span class=\"line\">  git commit</span><br><span class=\"line\">  git push                              <span class=\"comment\"># 把博客的所有东西存到 GitHub(public/ 和 themes/ 设置了 gitignore)</span></span><br><span class=\"line\">  cp -Force ./public/* ../.hexo.deploy  <span class=\"comment\"># 把要发布的内容复制到另一目录.</span></span><br><span class=\"line\">  <span class=\"built_in\">Set-Location</span> ../.hexo.deploy</span><br><span class=\"line\">  git add *</span><br><span class=\"line\">  git commit -m <span class=\"string\">\"Uploaded\"</span></span><br><span class=\"line\">  git push                              <span class=\"comment\"># 把发布的页面推送到这个博客的仓库</span></span><br><span class=\"line\">  <span class=\"built_in\">Set-Location</span> <span class=\"variable\">$origin_location</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"绑定个性域名到GitHub博客","date":"2018-08-23T17:08:09.000Z","_content":"\n# 映射自定义域名到 GitHub Page\n\n0. 首先, 需要自己拥有一个域名, 在域名服务商处购买 (买国内的需要实名认证, 但是不推荐买国外的, 因为.)\n0. 其次, 需要在 DNS 解析服务商处建立域名映射\n0. 最后, 需要在 GitHub 仓库中添加 CNAME 文件, 使其接受映射. \n\n<!--more-->\n\n如果映射域名为 `blog.example.com`, 则 CNAME 文件内容为\n\n```\nblog.example.com\n```\n\n注意, CNAME 文件中只能有一个域名.\n\n## 添加 HTTPS\n\n以在阿里云购买免费的 ssl 证书为例:\n\n阿里云中, 只有 [Symantec 的 DV SSL](https://www.aliyun.com/product/cas#product-area2) 是免费的, 虽然首页都显示收费项目, 但是从这里进入就能看到 \"免费性 DV SSL\"了.\n\n购买一个 DV SSL, 支付 0 元. 之后进入 [证书控制台](https://yundun.console.aliyun.com/?p=cas#/cas/home) 操作.\n\n进入时, 看到页面上有如下提示:\n\n```\n证书订单的流程如下图，每个环节都有对应的帮助信息，请一定仔细阅读：\n\n补全信息->提交审核->查看进度->颁发证书->下载证书\n\n特别提示：免费证书只要按要求配置验证文件正确，系统就可自动完成签发。后台小二无法加速免费证书。另外，免费证书用于个人测试目的，后台小二无法提供安装部署的工单咨询服务噢！\n```\n\n开始上图!\n\n首先, 点击 SSL 证书的 \"补全\", 开始工作.\n\n![Snipaste_2018-08-24_01-04-28.png](https://i.loli.net/2018/08/24/5b7ee9284660e.png)\n\n进入该页面后, 按照提示补充信息, 因为域名在阿里云购买, 所以勾选让系统添加纪录完成授权认证. 同时因为不懂 `CSR` , 所以让系统生成.\n\n![Snipaste_2018-08-24_01-02-46.png](https://i.loli.net/2018/08/24/5b7ee8c560f86.png)\n\n由于域名备案时是个人站, 因此不需要上传其他资料了.\n\n![Snipaste_2018-08-24_01-02-14.png](https://i.loli.net/2018/08/24/5b7ee8c576784.png)\n\n提交之后等待审核...\n\n审核比较快, 半个小时就发下来了. 在控制台签发到网站即可.","source":"_posts/绑定个性域名到GitHub博客.md","raw":"---\ntitle: 绑定个性域名到GitHub博客\ncategories:\n  - 网站\ndate: 2018-08-24 01:08:09\n---\n\n# 映射自定义域名到 GitHub Page\n\n0. 首先, 需要自己拥有一个域名, 在域名服务商处购买 (买国内的需要实名认证, 但是不推荐买国外的, 因为.)\n0. 其次, 需要在 DNS 解析服务商处建立域名映射\n0. 最后, 需要在 GitHub 仓库中添加 CNAME 文件, 使其接受映射. \n\n<!--more-->\n\n如果映射域名为 `blog.example.com`, 则 CNAME 文件内容为\n\n```\nblog.example.com\n```\n\n注意, CNAME 文件中只能有一个域名.\n\n## 添加 HTTPS\n\n以在阿里云购买免费的 ssl 证书为例:\n\n阿里云中, 只有 [Symantec 的 DV SSL](https://www.aliyun.com/product/cas#product-area2) 是免费的, 虽然首页都显示收费项目, 但是从这里进入就能看到 \"免费性 DV SSL\"了.\n\n购买一个 DV SSL, 支付 0 元. 之后进入 [证书控制台](https://yundun.console.aliyun.com/?p=cas#/cas/home) 操作.\n\n进入时, 看到页面上有如下提示:\n\n```\n证书订单的流程如下图，每个环节都有对应的帮助信息，请一定仔细阅读：\n\n补全信息->提交审核->查看进度->颁发证书->下载证书\n\n特别提示：免费证书只要按要求配置验证文件正确，系统就可自动完成签发。后台小二无法加速免费证书。另外，免费证书用于个人测试目的，后台小二无法提供安装部署的工单咨询服务噢！\n```\n\n开始上图!\n\n首先, 点击 SSL 证书的 \"补全\", 开始工作.\n\n![Snipaste_2018-08-24_01-04-28.png](https://i.loli.net/2018/08/24/5b7ee9284660e.png)\n\n进入该页面后, 按照提示补充信息, 因为域名在阿里云购买, 所以勾选让系统添加纪录完成授权认证. 同时因为不懂 `CSR` , 所以让系统生成.\n\n![Snipaste_2018-08-24_01-02-46.png](https://i.loli.net/2018/08/24/5b7ee8c560f86.png)\n\n由于域名备案时是个人站, 因此不需要上传其他资料了.\n\n![Snipaste_2018-08-24_01-02-14.png](https://i.loli.net/2018/08/24/5b7ee8c576784.png)\n\n提交之后等待审核...\n\n审核比较快, 半个小时就发下来了. 在控制台签发到网站即可.","slug":"绑定个性域名到GitHub博客","published":1,"updated":"2018-08-23T17:57:48.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8vtw82002lw8lkozyz8h15","content":"<h1 id=\"映射自定义域名到-github-page\">映射自定义域名到 GitHub Page</h1>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 需要自己拥有一个域名, 在域名服务商处购买 (买国内的需要实名认证, 但是不推荐买国外的, 因为.)</li>\r\n<li>其次, 需要在 DNS 解析服务商处建立域名映射</li>\r\n<li>最后, 需要在 GitHub 仓库中添加 CNAME 文件, 使其接受映射.</li>\r\n</ol>\r\n<a id=\"more\"></a>\r\n<p>如果映射域名为 <code>blog.example.com</code>, 则 CNAME 文件内容为</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog.example.com</span><br></pre></td></tr></table></figure>\r\n<p>注意, CNAME 文件中只能有一个域名.</p>\r\n<h2 id=\"添加-https\">添加 HTTPS</h2>\r\n<p>以在阿里云购买免费的 ssl 证书为例:</p>\r\n<p>阿里云中, 只有 <a href=\"https://www.aliyun.com/product/cas#product-area2\" target=\"_blank\" rel=\"noopener\">Symantec 的 DV SSL</a> 是免费的, 虽然首页都显示收费项目, 但是从这里进入就能看到 &quot;免费性 DV SSL&quot;了.</p>\r\n<p>购买一个 DV SSL, 支付 0 元. 之后进入 <a href=\"https://yundun.console.aliyun.com/?p=cas#/cas/home\" target=\"_blank\" rel=\"noopener\">证书控制台</a> 操作.</p>\r\n<p>进入时, 看到页面上有如下提示:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">证书订单的流程如下图，每个环节都有对应的帮助信息，请一定仔细阅读：</span><br><span class=\"line\"></span><br><span class=\"line\">补全信息-&gt;提交审核-&gt;查看进度-&gt;颁发证书-&gt;下载证书</span><br><span class=\"line\"></span><br><span class=\"line\">特别提示：免费证书只要按要求配置验证文件正确，系统就可自动完成签发。后台小二无法加速免费证书。另外，免费证书用于个人测试目的，后台小二无法提供安装部署的工单咨询服务噢！</span><br></pre></td></tr></table></figure>\r\n<p>开始上图!</p>\r\n<p>首先, 点击 SSL 证书的 &quot;补全&quot;, 开始工作.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ee9284660e.png\" alt=\"Snipaste_2018-08-24_01-04-28.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-04-28.png</p>\r\n</div>\r\n<p>进入该页面后, 按照提示补充信息, 因为域名在阿里云购买, 所以勾选让系统添加纪录完成授权认证. 同时因为不懂 <code>CSR</code> , 所以让系统生成.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ee8c560f86.png\" alt=\"Snipaste_2018-08-24_01-02-46.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-02-46.png</p>\r\n</div>\r\n<p>由于域名备案时是个人站, 因此不需要上传其他资料了.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ee8c576784.png\" alt=\"Snipaste_2018-08-24_01-02-14.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-02-14.png</p>\r\n</div>\r\n<p>提交之后等待审核...</p>\r\n<p>审核比较快, 半个小时就发下来了. 在控制台签发到网站即可.</p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"映射自定义域名到-github-page\">映射自定义域名到 GitHub Page</h1>\r\n<ol start=\"0\" style=\"list-style-type: decimal\">\r\n<li>首先, 需要自己拥有一个域名, 在域名服务商处购买 (买国内的需要实名认证, 但是不推荐买国外的, 因为.)</li>\r\n<li>其次, 需要在 DNS 解析服务商处建立域名映射</li>\r\n<li>最后, 需要在 GitHub 仓库中添加 CNAME 文件, 使其接受映射.</li>\r\n</ol>","more":"<p>如果映射域名为 <code>blog.example.com</code>, 则 CNAME 文件内容为</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog.example.com</span><br></pre></td></tr></table></figure>\r\n<p>注意, CNAME 文件中只能有一个域名.</p>\r\n<h2 id=\"添加-https\">添加 HTTPS</h2>\r\n<p>以在阿里云购买免费的 ssl 证书为例:</p>\r\n<p>阿里云中, 只有 <a href=\"https://www.aliyun.com/product/cas#product-area2\" target=\"_blank\" rel=\"noopener\">Symantec 的 DV SSL</a> 是免费的, 虽然首页都显示收费项目, 但是从这里进入就能看到 &quot;免费性 DV SSL&quot;了.</p>\r\n<p>购买一个 DV SSL, 支付 0 元. 之后进入 <a href=\"https://yundun.console.aliyun.com/?p=cas#/cas/home\" target=\"_blank\" rel=\"noopener\">证书控制台</a> 操作.</p>\r\n<p>进入时, 看到页面上有如下提示:</p>\r\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">证书订单的流程如下图，每个环节都有对应的帮助信息，请一定仔细阅读：</span><br><span class=\"line\"></span><br><span class=\"line\">补全信息-&gt;提交审核-&gt;查看进度-&gt;颁发证书-&gt;下载证书</span><br><span class=\"line\"></span><br><span class=\"line\">特别提示：免费证书只要按要求配置验证文件正确，系统就可自动完成签发。后台小二无法加速免费证书。另外，免费证书用于个人测试目的，后台小二无法提供安装部署的工单咨询服务噢！</span><br></pre></td></tr></table></figure>\r\n<p>开始上图!</p>\r\n<p>首先, 点击 SSL 证书的 &quot;补全&quot;, 开始工作.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ee9284660e.png\" alt=\"Snipaste_2018-08-24_01-04-28.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-04-28.png</p>\r\n</div>\r\n<p>进入该页面后, 按照提示补充信息, 因为域名在阿里云购买, 所以勾选让系统添加纪录完成授权认证. 同时因为不懂 <code>CSR</code> , 所以让系统生成.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ee8c560f86.png\" alt=\"Snipaste_2018-08-24_01-02-46.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-02-46.png</p>\r\n</div>\r\n<p>由于域名备案时是个人站, 因此不需要上传其他资料了.</p>\r\n<div class=\"figure\">\r\n<img src=\"https://i.loli.net/2018/08/24/5b7ee8c576784.png\" alt=\"Snipaste_2018-08-24_01-02-14.png\">\r\n<p class=\"caption\">Snipaste_2018-08-24_01-02-14.png</p>\r\n</div>\r\n<p>提交之后等待审核...</p>\r\n<p>审核比较快, 半个小时就发下来了. 在控制台签发到网站即可.</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjl8vtw5y0000w8lkhustrq5q","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw6t000bw8lkhgczb3ri"},{"post_id":"cjl8vtw6i0001w8lk73wnfm46","category_id":"cjl8vtw6p0007w8lktql5bxxv","_id":"cjl8vtw6w000gw8lkccgwyo2f"},{"post_id":"cjl8vtw6l0004w8lk64q1438g","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw74000ow8lkukp7q2pp"},{"post_id":"cjl8vtw6w000fw8lkl033490u","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw76000sw8lkyg67wvpy"},{"post_id":"cjl8vtw6y000jw8lk3grho5p7","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw76000vw8lkptlacipu"},{"post_id":"cjl8vtw6n0005w8lketmhpycc","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw760010w8lkav8xnvzy"},{"post_id":"cjl8vtw6s000aw8lka5fkj76e","category_id":"cjl8vtw73000nw8lk5iqnjyuo","_id":"cjl8vtw760013w8lknfu2kd0r"},{"post_id":"cjl8vtw76000xw8lkxf1ze91n","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw760019w8lkfkfwrz6f"},{"post_id":"cjl8vtw760011w8lk235fmggk","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw76001cw8lkcmgmzuqe"},{"post_id":"cjl8vtw72000lw8lkday64zrp","category_id":"cjl8vtw76000ww8lkdpqyamxt","_id":"cjl8vtw76001hw8lkgxke32t6"},{"post_id":"cjl8vtw760014w8lkxe5ypf79","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw76001kw8lkt0gtwymb"},{"post_id":"cjl8vtw75000qw8lkpzbu4lna","category_id":"cjl8vtw760015w8lka0lwd7yv","_id":"cjl8vtw7m001pw8lk1qmqt3pt"},{"post_id":"cjl8vtw76001bw8lk79i2rcei","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw7m001sw8lkc6ryefrk"},{"post_id":"cjl8vtw76001gw8lknq05im6a","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw7m001vw8lkgm1etqn1"},{"post_id":"cjl8vtw76000tw8lkgblmpdho","category_id":"cjl8vtw76001dw8lkwbn5khot","_id":"cjl8vtw7m001yw8lkrwfq7do0"},{"post_id":"cjl8vtw76001ow8lk3diare44","category_id":"cjl8vtw6p0007w8lktql5bxxv","_id":"cjl8vtw7m0021w8lk3y7k2b10"},{"post_id":"cjl8vtw760018w8lksaz0viiu","category_id":"cjl8vtw76001mw8lk8ing75r5","_id":"cjl8vtw7m0025w8lkrkfolxr9"},{"post_id":"cjl8vtw7m001rw8lkj27r7c86","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw7m0028w8lkx7zjelad"},{"post_id":"cjl8vtw7m001uw8lkxb3oezq5","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw7m002cw8lkfnq72lgg"},{"post_id":"cjl8vtw7m001xw8lk2tm41qwk","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw7m002fw8lky7n4lmhc"},{"post_id":"cjl8vtw7m0020w8lkt6iqrnx8","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw82002jw8lk3bsmstf6"},{"post_id":"cjl8vtw7m0024w8lkijncqva3","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw83002mw8lk388m7q12"},{"post_id":"cjl8vtw7m0027w8lkzu1lr1c8","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw84002pw8lk6ohcihn7"},{"post_id":"cjl8vtw7m002bw8lke7tzl4h4","category_id":"cjl8vtw6k0002w8lkhr1u2xze","_id":"cjl8vtw85002rw8lkmdhi2cts"},{"post_id":"cjl8vtw7m002ew8lkymwusiz3","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw86002tw8lkdtj77ik1"},{"post_id":"cjl8vtw7m002iw8lkxu7737sw","category_id":"cjl8vtw6t000cw8lkwreld4jz","_id":"cjl8vtw86002ww8lk23vrbqoi"},{"post_id":"cjl8vtw82002lw8lkozyz8h15","category_id":"cjl8vtw6p0007w8lktql5bxxv","_id":"cjl8vtw87002yw8lkvgnae41n"}],"PostTag":[{"post_id":"cjl8vtw5y0000w8lkhustrq5q","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw71000kw8lkefz4zjip"},{"post_id":"cjl8vtw5y0000w8lkhustrq5q","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw73000mw8lkuzlxduyr"},{"post_id":"cjl8vtw5y0000w8lkhustrq5q","tag_id":"cjl8vtw6u000dw8lkg4y1qwmr","_id":"cjl8vtw76000rw8lk0ex5x2l3"},{"post_id":"cjl8vtw6w000fw8lkl033490u","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw76000uw8lkpow86roa"},{"post_id":"cjl8vtw6w000fw8lkl033490u","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw76000zw8lkxmbzs233"},{"post_id":"cjl8vtw6y000jw8lk3grho5p7","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw760012w8lkozlmnnuk"},{"post_id":"cjl8vtw6y000jw8lk3grho5p7","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw760017w8lk22q3d3nc"},{"post_id":"cjl8vtw6i0001w8lk73wnfm46","tag_id":"cjl8vtw6x000iw8lkct16pqf4","_id":"cjl8vtw76001aw8lkpogkg1ek"},{"post_id":"cjl8vtw6l0004w8lk64q1438g","tag_id":"cjl8vtw74000pw8lkr8x0q1rd","_id":"cjl8vtw76001ew8lkj3l44rp4"},{"post_id":"cjl8vtw6l0004w8lk64q1438g","tag_id":"cjl8vtw76000yw8lkf9webgwl","_id":"cjl8vtw76001iw8lk9yrkd3a0"},{"post_id":"cjl8vtw6n0005w8lketmhpycc","tag_id":"cjl8vtw760016w8lk2824mjou","_id":"cjl8vtw76001lw8lkd349xicf"},{"post_id":"cjl8vtw6s000aw8lka5fkj76e","tag_id":"cjl8vtw76000yw8lkf9webgwl","_id":"cjl8vtw7m001qw8lkwquuc32o"},{"post_id":"cjl8vtw72000lw8lkday64zrp","tag_id":"cjl8vtw76001nw8lk3rzvvk6w","_id":"cjl8vtw7m001ww8lkmgd638ap"},{"post_id":"cjl8vtw7m001uw8lkxb3oezq5","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw7m001zw8lkfz7uc2p6"},{"post_id":"cjl8vtw7m001uw8lkxb3oezq5","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw7m0023w8lkr8yprnuo"},{"post_id":"cjl8vtw7m001xw8lk2tm41qwk","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw7m0026w8lk6xihp7m1"},{"post_id":"cjl8vtw7m001xw8lk2tm41qwk","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw7m002aw8lk97ueaj2h"},{"post_id":"cjl8vtw75000qw8lkpzbu4lna","tag_id":"cjl8vtw7m001tw8lkir24xceo","_id":"cjl8vtw7m002dw8lkyf4n1l8u"},{"post_id":"cjl8vtw7m0020w8lkt6iqrnx8","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw7m002hw8lk08quwpf9"},{"post_id":"cjl8vtw7m0020w8lkt6iqrnx8","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw82002kw8lkid9t05u3"},{"post_id":"cjl8vtw7m0024w8lkijncqva3","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw84002nw8lkt5sw31hb"},{"post_id":"cjl8vtw7m0024w8lkijncqva3","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw84002qw8lkvqvw6f1b"},{"post_id":"cjl8vtw7m0027w8lkzu1lr1c8","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw85002sw8lk83jdvs6f"},{"post_id":"cjl8vtw7m0027w8lkzu1lr1c8","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw86002vw8lkmgokq3xs"},{"post_id":"cjl8vtw7m002bw8lke7tzl4h4","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw87002xw8lkwfgkond7"},{"post_id":"cjl8vtw7m002bw8lke7tzl4h4","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw870030w8lk9yxwrfow"},{"post_id":"cjl8vtw76000tw8lkgblmpdho","tag_id":"cjl8vtw7m0022w8lku2lw7jd8","_id":"cjl8vtw880031w8lk0jzg35c4"},{"post_id":"cjl8vtw76000tw8lkgblmpdho","tag_id":"cjl8vtw7m0029w8lkklygaiak","_id":"cjl8vtw880033w8lkoncf43ae"},{"post_id":"cjl8vtw76000xw8lkxf1ze91n","tag_id":"cjl8vtw7m002gw8lk0yc58yf6","_id":"cjl8vtw880034w8lk0v12h81p"},{"post_id":"cjl8vtw76000xw8lkxf1ze91n","tag_id":"cjl8vtw84002ow8lk44rdq8g2","_id":"cjl8vtw890036w8lk75bkkfje"},{"post_id":"cjl8vtw76000xw8lkxf1ze91n","tag_id":"cjl8vtw86002uw8lkca9qb76p","_id":"cjl8vtw890037w8lkb2h8v9jh"},{"post_id":"cjl8vtw760011w8lk235fmggk","tag_id":"cjl8vtw7m002gw8lk0yc58yf6","_id":"cjl8vtw890038w8lk9vwlvj04"},{"post_id":"cjl8vtw760011w8lk235fmggk","tag_id":"cjl8vtw880032w8lklc3nqsjg","_id":"cjl8vtw89003aw8lkzopaq0rj"},{"post_id":"cjl8vtw760014w8lkxe5ypf79","tag_id":"cjl8vtw880035w8lk1xgocvg1","_id":"cjl8vtw8a003bw8lktzjxud1r"},{"post_id":"cjl8vtw76001bw8lk79i2rcei","tag_id":"cjl8vtw890039w8lkuocq2q3d","_id":"cjl8vtw8a003dw8lkbzik6ok4"},{"post_id":"cjl8vtw76001bw8lk79i2rcei","tag_id":"cjl8vtw6p0008w8lkyz80edi1","_id":"cjl8vtw8a003ew8lkk5fhj9uh"},{"post_id":"cjl8vtw76001gw8lknq05im6a","tag_id":"cjl8vtw6l0003w8lkx7l292z6","_id":"cjl8vtw8b003hw8lktjzamdk7"},{"post_id":"cjl8vtw76001gw8lknq05im6a","tag_id":"cjl8vtw8a003cw8lk10zp3wva","_id":"cjl8vtw8b003iw8lkld45anpm"},{"post_id":"cjl8vtw76001gw8lknq05im6a","tag_id":"cjl8vtw8a003fw8lknhqcjc7a","_id":"cjl8vtw8c003kw8lkncpnfh0p"},{"post_id":"cjl8vtw76001jw8lk57eikqmb","tag_id":"cjl8vtw8b003gw8lkln00rsjt","_id":"cjl8vtw8c003lw8lk5dpmbt7l"},{"post_id":"cjl8vtw76001ow8lk3diare44","tag_id":"cjl8vtw8b003gw8lkln00rsjt","_id":"cjl8vtw8c003nw8lk9qqfoosl"},{"post_id":"cjl8vtw7m001rw8lkj27r7c86","tag_id":"cjl8vtw880035w8lk1xgocvg1","_id":"cjl8vtw8c003pw8lkps2hnw6k"},{"post_id":"cjl8vtw7m002ew8lkymwusiz3","tag_id":"cjl8vtw8c003ow8lkkmgqqn54","_id":"cjl8vtw8d003sw8lk9nxa8i1f"},{"post_id":"cjl8vtw7m002ew8lkymwusiz3","tag_id":"cjl8vtw8c003qw8lkf88305tc","_id":"cjl8vtw8d003tw8lk8aeeqf28"},{"post_id":"cjl8vtw7m002iw8lkxu7737sw","tag_id":"cjl8vtw880035w8lk1xgocvg1","_id":"cjl8vtw8d003uw8lknk6ka75f"}],"Tag":[{"name":"Python","_id":"cjl8vtw6l0003w8lkx7l292z6"},{"name":"Note","_id":"cjl8vtw6p0008w8lkyz80edi1"},{"name":"json","_id":"cjl8vtw6u000dw8lkg4y1qwmr"},{"name":"HTML5","_id":"cjl8vtw6x000iw8lkct16pqf4"},{"name":"Samba","_id":"cjl8vtw74000pw8lkr8x0q1rd"},{"name":"Docker","_id":"cjl8vtw76000yw8lkf9webgwl"},{"name":"SSH","_id":"cjl8vtw760016w8lk2824mjou"},{"name":"Regex","_id":"cjl8vtw76001nw8lk3rzvvk6w"},{"name":"Assemble","_id":"cjl8vtw7m001tw8lkir24xceo"},{"name":"Windows","_id":"cjl8vtw7m0022w8lku2lw7jd8"},{"name":"File System","_id":"cjl8vtw7m0029w8lkklygaiak"},{"name":"Linux","_id":"cjl8vtw7m002gw8lk0yc58yf6"},{"name":"Android","_id":"cjl8vtw84002ow8lk44rdq8g2"},{"name":"Termux","_id":"cjl8vtw86002uw8lkca9qb76p"},{"name":"Anki","_id":"cjl8vtw880032w8lklc3nqsjg"},{"name":"PowerShell","_id":"cjl8vtw880035w8lk1xgocvg1"},{"name":"Vim","_id":"cjl8vtw890039w8lkuocq2q3d"},{"name":"Anaconda","_id":"cjl8vtw8a003cw8lk10zp3wva"},{"name":"Jupyter","_id":"cjl8vtw8a003fw8lknhqcjc7a"},{"name":"Hexo","_id":"cjl8vtw8b003gw8lkln00rsjt"},{"name":"Brook","_id":"cjl8vtw8c003ow8lkkmgqqn54"},{"name":"翻墙","_id":"cjl8vtw8c003qw8lkf88305tc"}]}}